package formularios.Ventas;

import clases.Cartera.ndCxc;
import clases.FacturacionPos;
import clases.Cliente;
import clases.IconCellRenderer;
import clases.Identidad;
import clases.Instancias;
import clases.Respuesta;
import java.awt.Component;
import clases.RespuestaServicioEnvioFacturas;
import clases.RespuestaServicioRest;
import clases.Utils;
import clases.Ventas.ndCongelada;
import clases.Ventas.ndCotizacion;
import clases.Ventas.ndFactura;
import clases.Ventas.ndOServicio;
import clases.Ventas.ndOServicio1;
import clases.Ventas.ndPedido;
import clases.Ventas.ndPlanSepare;
import clases.big;
import clases.convertirNumeroALetras;
import clases.credito.ndCuota;
import clases.credito.ndPrestamo;
import clases.facturacionElectronica;
import clases.facturacionElectronicaPanama;
import clases.metodosGenerales;
import clases.ndMaestra;
import clases.productos.ndProducto;
import clases.terceros.ndTercero;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import configuracion.Propiedades;
import configuracion.dlgSolicitarPermisos;
import configuracion.ndConfiguracion;
import datechooser.model.multiple.Period;
import formularios.Parqueadero.buscPlacas;
import formularios.frmIngresar;
import formularios.infBuscadorCliente;
import formularios.productos.buscProductos;
import formularios.productos.dlgCompraDetallada1;
import formularios.productos.seleccionarPLU;
import formularios.terceros.CambioMoneda;
import formularios.terceros.buscBodegas;
import formularios.terceros.buscClientes;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Event;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import static java.awt.image.ImageObserver.WIDTH;
import java.beans.PropertyVetoException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.net.Socket;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import logs.Logs;
import org.jfree.util.Log;

public class pnlFactura extends javax.swing.JPanel {

    DefaultTableModel modeloPro;
    DefaultTableModel modeloComprobantes;
    DefaultTableModel modeloInventario;
    DefaultTableModel modeloCredito;
    metodosGenerales metodos = new metodosGenerales();
    Instancias instancias;
    String codigoAutorizacion = "";
        
    boolean dinamico = true;
    boolean mostrarDevuelta = true;
    private String trmMoneda="";
    private String fechaMoneda="";
    private String respuesta;

    //Barra de titulo
    private Dimension dimBarra = null;
    boolean topeDescuento = true;
    private int cantDias = 0;
    private boolean isSelected = false;
    private String numeroFacturaRenvio="0";
    private String numeroIdFacturaRenvio="0";
    DecimalFormat df = new DecimalFormat("#.00");

    private boolean focusDiasPlazo = false, cambioMesa = false, plu = false, desdeParqueadero = false, mesaCongelada = false, actualizarInventario = true,
            saltarPasosFactura = false, saltarPasosFactura1 = false, facturaCredito, modificarPedidoActivo = false, cargandoCongelada = false,
            solicitudPermiso = false, facturandoPedidos = false, preguntarLimpiar = true, showMsg = true;

    private infFactura factura;
    private String tipo, credito1, consecutivoMesa, idCosteo, valorFila = null, descontarFisicoInventario = "SI",
            loteGeneral = "", permisoNumero = "", tipoActual = "", ter = "", loteCuentasCobro = "", fechaFacturaAutomatica = "";

    private BigDecimal costoCosteo;

    Object[] datos;
    Object[] productosMovimientos;
    Object[][] productosMovimientos1;
    Object[] datosFacElectVerificar;

    public int cantProductosOrden = 0;
    public int banderaFecha = 0;
    private Vector<String> cotizaciones = null;

    //NODOS
    private String nodoOrdenServicio, trasladoBod = "", nodoCotizacion, ndPeluqueria = "", ndGuarderia = "", ndHospitalizacion = "", diasHospitalizacion = "",
            horasHospitalizacion = "", simbolo = "";
    private ndPlanSepare ndSepare;
    private ndCongelada cuentaCobro;
    private ndPedido ndPedido;
    private String tipoModulo= "";
    private String fechaExpedicionUltimoDiaMesAnterior = "";

    public String getTipoModulo() {
        return tipoModulo;
    }

    public void setTipoModulo(String tipoModulo) {
        this.tipoModulo = tipoModulo;
    }
    
    public String getRespuesta() {
        return respuesta;
    }

    public void setRespuesta(String respuesta) {
        this.respuesta = respuesta;
    }

    public String getNumeroFacturaRenvio() {
        return numeroFacturaRenvio;
    }

    public void setNumeroFacturaRenvio(String numeroFacturaRenvio) {
        this.numeroFacturaRenvio = numeroFacturaRenvio;
    }

    public String getNumeroIdFacturaRenvio() {
        return numeroIdFacturaRenvio;
    }

    public void setNumeroIdFacturaRenvio(String numeroIdFacturaRenvio) {
        this.numeroIdFacturaRenvio = numeroIdFacturaRenvio;
    }
    
    public String getPermisoNumero() {
        return permisoNumero;
    }

    public void setPermisoNumero(String permisoNumero) {
        this.permisoNumero = permisoNumero;
    }
    
    public void setShowMsg(boolean showMsg) {
        this.showMsg = showMsg;
    }

    public boolean isSolicitudPermiso() {
        return solicitudPermiso;
    }

    public void setSolicitudPermiso(boolean solicitudPermiso) {
        this.solicitudPermiso = solicitudPermiso;
    }

    public BigDecimal getCostoCosteo() {
        return costoCosteo;
    }

    public void setCostoCosteo(BigDecimal costoCosteo) {
        this.costoCosteo = costoCosteo;
    }

    public String getIdCosteo() {
        return idCosteo;
    }

    public void setIdCosteo(String idCosteo) {
        this.idCosteo = idCosteo;
    }

    public boolean isCambioMesa() {
        return cambioMesa;
    }

    public void setCambioMesa(boolean cambioMesa) {
        this.cambioMesa = cambioMesa;
    }

    public String getDescontarFisicoInventario() {
        return descontarFisicoInventario;
    }

    public void setDescontarFisicoInventario(String descontarFisicoInventario) {
        this.descontarFisicoInventario = descontarFisicoInventario;
    }

    public boolean isActualizarInventario() {
        return actualizarInventario;
    }

    public void setActualizarInventario(boolean actualizarInventario) {
        this.actualizarInventario = actualizarInventario;
    }

    public boolean isModificarPedidoActivo() {
        return modificarPedidoActivo;
    }

    public void setModificarPedidoActivo(boolean modificarPedidoActivo) {
        this.modificarPedidoActivo = modificarPedidoActivo;
    }

    public String getTrmMoneda() {
        return trmMoneda;
    }

    public void setTrmMoneda(String trmMoneda) {
        this.trmMoneda = trmMoneda;
    }
    
    public String getFechaMoneda() {
        return fechaMoneda;
    }

    public void setFechaMoneda(String fechaMoneda) {
        this.fechaMoneda = fechaMoneda;
    }

    public boolean isMostrarDevuelta() {
        return mostrarDevuelta;
    }

    public void setMostrarDevuelta(boolean mostrarDevuelta) {
        this.mostrarDevuelta = mostrarDevuelta;
    }
    
    public void diasPlazo(String dias){
    txtDiasPlazo.setText(dias);
    }

    public String getFechaExpedicionUltimoDiaMesAnterior() {
        return fechaExpedicionUltimoDiaMesAnterior;
    }

    public void setFechaExpedicionUltimoDiaMesAnterior(String fechaExpedicionUltimoDiaMesAnterior) {
        this.fechaExpedicionUltimoDiaMesAnterior = fechaExpedicionUltimoDiaMesAnterior;
    }
    
    

    public pnlFactura(String tipo) {

        initComponents();
       
    
        cmbTipoOperacion.setSelectedIndex(9);
        chkSisteCredito.setEnabled(false);

        lbCupo.setVisible(false);
        pnlOcultar.setVisible(false);
        pnlCambiarMesa.setVisible(false);
        pnlGarantia.setVisible(false);

        instancias = Instancias.getInstancias();
        consultarMaestros();
    
        txtIdSistema.setVisible(false);
        pnlVisor.setVisible(false);

        tblImagenes.setDefaultRenderer(Object.class, new IconCellRenderer());
        tblProductos.setDefaultRenderer(Object.class, new IconCellRenderer());
//        tblProductos.getColumnModel().getColumn(1).setCellRenderer(new WordWrapCellRenderer());

        pnlCuentaCobro.setVisible(false);
        btnPendientes.setVisible(false);
        pnlComprobante.setVisible(false);

        simbolo = instancias.getSimbolo();
        
        modeloComprobantes = (DefaultTableModel) tblComprobantes.getModel();
        Object[][] comprobantes = instancias.getSql().getTiposComprobantes();
        for (Object[] comprobante : comprobantes) {           
            if(!String.valueOf(comprobante[0]).equals("DS")){
            modeloComprobantes.addRow(new Object[]{comprobante[0], comprobante[1], false, comprobante[2], comprobante[5], comprobante[3],
                comprobante[4], comprobante[7], comprobante[6], comprobante[8], comprobante[9], comprobante[10]});
            }
        }

        String paisFact = instancias.getConfiguraciones().getPais();
        if (paisFact.equals("Panama")) {
            txtIva.setText("Tax");
        }

        if (instancias.getConfiguraciones().isFacturaElectronica()) {
            txtDescGeneral.setVisible(false);
        }

        if (!instancias.getConfiguraciones().isPuc()) {
            txtModeloContable.setVisible(false);
            lbModeloContable.setVisible(false);
        }

        if (!instancias.getConfiguraciones().isInventarioBodegas()) {
            lbBodega.setVisible(false);
            txtBodega.setVisible(false);
        }
        
        if (instancias.getConfiguraciones().getTipoImpresion().equals("Sin-Codigo")) {
            tblProductos.getColumnModel().getColumn(0).setMinWidth(0);
            tblProductos.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblProductos.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        if (!instancias.getConfiguraciones().isMedico()) {
            if (tblProductos.getColumnModel().getColumnCount() > 0) {
                tblProductos.getColumnModel().getColumn(17).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(17).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(17).setMaxWidth(0);
            }
            txtCopago.setVisible(false);
        }

        try {
            if (datos[17].equals("SI")) {
                if (tblProductos.getColumnModel().getColumnCount() > 0) {
                    tblProductos.getColumnModel().getColumn(10).setMinWidth(50);
//                    tblProductos.getColumnModel().getColumn(10).setPreferredWidth(150);
                    tblProductos.getColumnModel().getColumn(10).setMaxWidth(125);
                }
            } else {
                tblProductos.getColumnModel().getColumn(10).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(10).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(10).setMaxWidth(0);
            }
        } catch (Exception e) {
            Logs.error(e);
        }

        if (tipo.equals("credito")) {
            facturaCredito = true;
            this.tipo = "facturacion";
        } //        else if (tipo.equals("congeladas")) {
        //            Logs.log("entro a las mesas");
        //            jLabel2.setVisible(false);
        //            jLabel2.setEnabled(false);
        //            this.tipo = "facturacion";
        //        } 
        else {
            facturaCredito = false;
            this.tipo = tipo;
        }

        if (tipo.equals("facturacion") && (Boolean) datos[78]) {
            tblProductos.getColumnModel().getColumn(19).setMinWidth(100);
            tblProductos.getColumnModel().getColumn(19).setPreferredWidth(100);
            tblProductos.getColumnModel().getColumn(19).setMaxWidth(100);
        } else {
            tblProductos.getColumnModel().getColumn(19).setMinWidth(0);
            tblProductos.getColumnModel().getColumn(19).setPreferredWidth(0);
            tblProductos.getColumnModel().getColumn(19).setMaxWidth(0);
        }

        if (instancias.getConfiguraciones().isProductosSerial()) {
            tblProductos.getColumnModel().getColumn(27).setMinWidth(100);
            tblProductos.getColumnModel().getColumn(27).setPreferredWidth(200);
            tblProductos.getColumnModel().getColumn(27).setMaxWidth(300);
        } else {
            if (instancias.getConfiguraciones().isParqueadero()) {
                tblProductos.getColumnModel().getColumn(27).setMinWidth(100);
                tblProductos.getColumnModel().getColumn(27).setPreferredWidth(200);
                tblProductos.getColumnModel().getColumn(27).setMaxWidth(300);
            } else {
                tblProductos.getColumnModel().getColumn(27).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(27).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(27).setMaxWidth(0);
            }
        }

//        if (!tipo.equals("orden")) {
        tblProductos.getColumnModel().getColumn(26).setMinWidth(0);
        tblProductos.getColumnModel().getColumn(26).setPreferredWidth(0);
        tblProductos.getColumnModel().getColumn(26).setMaxWidth(0);
        tblProductos.getColumnModel().getColumn(25).setMinWidth(0);
        tblProductos.getColumnModel().getColumn(25).setPreferredWidth(0);
        tblProductos.getColumnModel().getColumn(25).setMaxWidth(0);
        tblProductos.getColumnModel().getColumn(24).setMinWidth(0);
        tblProductos.getColumnModel().getColumn(24).setPreferredWidth(0);
        tblProductos.getColumnModel().getColumn(24).setMaxWidth(0);
//        }

        // SI ES RESTAURANTE ACTIVAMOS EL PANEL 
        if (instancias.getConfiguraciones().isRestaurante()) {
            if (tblProductos.getColumnModel().getColumnCount() > 0) {
                tblProductos.setModel(new javax.swing.table.DefaultTableModel(
                        new Object[][]{},
                        new String[]{
                            "Codigo", "Descripción", "Valor/Unit", "Cant.", "Subtotal", "Desc %", "Desc " + this.simbolo, "Iva %", "Impo " + this.simbolo, "Total", "Ubicación",
                            "Referencia", "plu", "cant2", "ponderado", "Utilidad", "Estado", "Copago", "datoGrupo", "Pago Tercero", "Utilidad",
                            "Preparacion", "Borrar", "Impoconsumo", "Orden", "Aviso", "F. Entrega", "Imei", "Lote", "idProd", "paraComanda",
                            "permisoDesc", "idSistema", "Iva " + this.simbolo, "Grupo", "Estandar", "Medida", "ControlInv","Idbdcongelada"
                        }
                ) {
                    boolean[] canEdit = new boolean[]{
                        false, false, true, true, false, true, true, false, true, false, false, false, false, false, false, false, false, true,
                        false, true, true, true, false, true, false, false, false, false, false, false, false, false, false, true, false,
                        false, false, false, false
                    };
                    
                    boolean[] canEditDinamico = new boolean[]{
                        false, false, true, false, false, true, true, false, true, false, false, false, false, false, false, false, false, true,
                        false, true, true, true, false, true, false, false, false, false, false, false, false, false, false, true, false,
                        false, false, false, false
                    };

                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        if (dinamico) {
                            return canEdit[columnIndex];
                        } else {
                            return canEditDinamico[columnIndex];
                        }
                    }
                });

                if (instancias.getConfiguraciones().getTipoImpresion().equals("Sin-Codigo")) {
                    tblProductos.getColumnModel().getColumn(0).setMinWidth(0);
                    tblProductos.getColumnModel().getColumn(0).setPreferredWidth(0);
                    tblProductos.getColumnModel().getColumn(0).setMaxWidth(0);
                } else {
                    tblProductos.getColumnModel().getColumn(0).setMinWidth(50);
                    tblProductos.getColumnModel().getColumn(0).setPreferredWidth(100);
                    tblProductos.getColumnModel().getColumn(0).setMaxWidth(200);
                }

                tblProductos.getColumnModel().getColumn(1).setMinWidth(200);                  
                tblProductos.getColumnModel().getColumn(2).setMinWidth(80);
                tblProductos.getColumnModel().getColumn(2).setPreferredWidth(100);
                tblProductos.getColumnModel().getColumn(2).setMaxWidth(150);
                tblProductos.getColumnModel().getColumn(23).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(23).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(23).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(33).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(33).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(33).setMaxWidth(0);

                if (tipo.equals("facturacion") && (Boolean) datos[78]) {
                    tblProductos.getColumnModel().getColumn(19).setMinWidth(100);
                    tblProductos.getColumnModel().getColumn(19).setPreferredWidth(100);
                    tblProductos.getColumnModel().getColumn(19).setMaxWidth(100);
                } else {
                    tblProductos.getColumnModel().getColumn(19).setMinWidth(0);
                    tblProductos.getColumnModel().getColumn(19).setPreferredWidth(0);
                    tblProductos.getColumnModel().getColumn(19).setMaxWidth(0);
                }

                tblProductos.getColumnModel().getColumn(3).setMinWidth(35);
                tblProductos.getColumnModel().getColumn(3).setPreferredWidth(70);
                tblProductos.getColumnModel().getColumn(3).setMaxWidth(150);
                tblProductos.getColumnModel().getColumn(4).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(4).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(4).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(7).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(7).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(7).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(8).setMinWidth(80);
                tblProductos.getColumnModel().getColumn(8).setPreferredWidth(100);
                tblProductos.getColumnModel().getColumn(8).setMaxWidth(140);
                tblProductos.getColumnModel().getColumn(9).setMinWidth(80);
                tblProductos.getColumnModel().getColumn(9).setPreferredWidth(100);
                tblProductos.getColumnModel().getColumn(9).setMaxWidth(150);
                tblProductos.getColumnModel().getColumn(10).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(10).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(10).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(11).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(11).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(11).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(12).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(12).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(12).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(13).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(13).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(13).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(14).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(14).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(14).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(15).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(15).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(15).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(16).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(16).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(16).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(17).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(17).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(17).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(18).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(18).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(18).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(20).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(20).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(20).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(21).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(21).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(21).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(22).setMinWidth(50);
                tblProductos.getColumnModel().getColumn(22).setPreferredWidth(50);
                tblProductos.getColumnModel().getColumn(22).setMaxWidth(50);
                tblProductos.getColumnModel().getColumn(24).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(24).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(24).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(25).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(25).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(25).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(26).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(26).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(26).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(27).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(27).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(27).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(28).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(28).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(28).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(29).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(29).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(29).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(30).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(30).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(30).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(31).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(31).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(31).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(32).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(32).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(32).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(34).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(34).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(34).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(35).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(35).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(35).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(36).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(36).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(36).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(37).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(37).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(37).setMaxWidth(0);
                tblProductos.getColumnModel().getColumn(38).setMinWidth(0);
                tblProductos.getColumnModel().getColumn(38).setPreferredWidth(0);
                tblProductos.getColumnModel().getColumn(38).setMaxWidth(0);
            }

            tblProductos.setDefaultRenderer(Object.class, new IconCellRenderer());

        } else {
            pnlVisor.setVisible(false);
//            tblInventario.getColumnModel().getColumn(1).setMinWidth(40);
//            tblInventario.getColumnModel().getColumn(1).setPreferredWidth(40);
//            tblInventario.getColumnModel().getColumn(1).setMaxWidth(40);
//            tblInventario.getColumnModel().getColumn(2).setMinWidth(40);
//            tblInventario.getColumnModel().getColumn(2).setPreferredWidth(40);
//            tblInventario.getColumnModel().getColumn(2).setMaxWidth(40);
//            tblProductos.getColumnModel().getColumn(22).setMinWidth(0);
//            tblProductos.getColumnModel().getColumn(22).setPreferredWidth(0);
//            tblProductos.getColumnModel().getColumn(22).setMaxWidth(0);
        }
        // FIN DEL RESTARANTE

        if (datos[6].toString().equals("porcentaje")) {
            tblProductos.getColumnModel().getColumn(5).setMinWidth(45);
            tblProductos.getColumnModel().getColumn(5).setPreferredWidth(45);
            tblProductos.getColumnModel().getColumn(5).setMaxWidth(45);
            tblProductos.getColumnModel().getColumn(6).setMinWidth(0);
            tblProductos.getColumnModel().getColumn(6).setPreferredWidth(0);
            tblProductos.getColumnModel().getColumn(6).setMaxWidth(0);
        } else {
            tblProductos.getColumnModel().getColumn(5).setMinWidth(0);
            tblProductos.getColumnModel().getColumn(5).setPreferredWidth(0);
            tblProductos.getColumnModel().getColumn(5).setMaxWidth(0);
            tblProductos.getColumnModel().getColumn(6).setMinWidth(100);
            tblProductos.getColumnModel().getColumn(6).setPreferredWidth(100);
            tblProductos.getColumnModel().getColumn(6).setMaxWidth(100);
        }

        cargarTablaRestaurante();

        tblInventario.removeEditor();
        modeloPro = (DefaultTableModel) tblProductos.getModel();

//        combobox en tabla de inventario
        TableColumn tc = tblInventario.getColumnModel().getColumn(0);
        TableCellEditor tce = new DefaultCellEditor(cmbListas);
        tc.setCellEditor(tce);

        txtFechaFactura.setText(metodosGenerales.fecha());
        txtVencimiento.setText(metodosGenerales.fecha());
        setBorder(null);
        repaint();

//        tblProductos.setDefaultRenderer(Object.class, new cambiarColorTabla(3, 0));
        txtNit.requestFocus();
        btnVolver.setVisible(false);
        btnVolver1.setVisible(false);
        jPanel6.setVisible(false);
        btnActualizar.setVisible(false);
        btnReImprimir.setVisible(false);

        if (facturaCredito) {
            txtDiasPlazo.setEnabled(false);
            pnlCredito.setVisible(true);
            lbTitulo.setText("CREDITOS");
            modeloCredito = (DefaultTableModel) tblCuotas.getModel();
            dtFechaDesenvolso.setFormat(2);
            dtFechaDesenvolso.setSelectedDate(metodos.haciaDate2(metodosGenerales.fecha()));
        } else {
            pnlCredito.setVisible(false);
        }
        

        if (instancias.getConfiguraciones().isRestaurante() && (tipo.equals("mesa") || tipo.equals("facturacion")
                || tipo.equals("pedido") || tipo.equals("cotizacion"))) {
            pnlVisor.setVisible(true);
        }

        ter = instancias.getTerminal();

//        lbNombre3.setVisible(false);
//        txtCartera.setVisible(false);
//        lbNombre2.setForeground(Color.red);
        setTipo(tipo);

        tblComprobantes.setValueAt(true, 0, 2);

        if (null == tblComprobantes.getValueAt(0, 7)) {
            cmbTipoOperacion.setVisible(false);
            lbTipoOperacion.setVisible(false);
        } else {
            if (tblComprobantes.getValueAt(0, 7).equals("Facturación Electronica")) {
                cmbTipoOperacion.setVisible(true);
                lbTipoOperacion.setVisible(true);
            } else {
                cmbTipoOperacion.setVisible(false);
                lbTipoOperacion.setVisible(false);
            }
        }

        actualizarResolucion(0);
        actualizarConsecutivo(0);

        this.registerKeyboardAction(accion("guardarFactura"), "guardarFactura", KeyStroke.getKeyStroke(KeyEvent.VK_F3, 0), JComponent.WHEN_IN_FOCUSED_WINDOW);
        this.registerKeyboardAction(accion("imprimir"), "imprimir", KeyStroke.getKeyStroke(KeyEvent.VK_F4, 0), JComponent.WHEN_IN_FOCUSED_WINDOW);
        this.registerKeyboardAction(accion("productos"), "productos", KeyStroke.getKeyStroke(KeyEvent.VK_F6, 0), JComponent.WHEN_IN_FOCUSED_WINDOW);
        this.registerKeyboardAction(accion("limpiar"), "limpiar", KeyStroke.getKeyStroke(KeyEvent.VK_F7, 0), JComponent.WHEN_IN_FOCUSED_WINDOW);
        this.registerKeyboardAction(accion("aumentarCantidad"), "aumentarCantidad", KeyStroke.getKeyStroke(KeyEvent.VK_F8, 0), JComponent.WHEN_IN_FOCUSED_WINDOW);
        this.registerKeyboardAction(accion("disminuirCantidad"), "disminuirCantidad", KeyStroke.getKeyStroke(KeyEvent.VK_F9, 0), JComponent.WHEN_IN_FOCUSED_WINDOW);
        this.registerKeyboardAction(accion("terceros"), "terceros", KeyStroke.getKeyStroke(KeyEvent.VK_F10, 0), JComponent.WHEN_IN_FOCUSED_WINDOW);
        this.registerKeyboardAction(accion("valor"), "valor", KeyStroke.getKeyStroke(KeyEvent.VK_F11, 0), JComponent.WHEN_IN_FOCUSED_WINDOW);
        this.registerKeyboardAction(accion("reimprimir"), "reimprimir", KeyStroke.getKeyStroke(KeyEvent.VK_F12, 0), JComponent.WHEN_IN_FOCUSED_WINDOW);
        this.registerKeyboardAction(accion("subir"), "subir", KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0), JComponent.WHEN_IN_FOCUSED_WINDOW);

//        this.registerKeyboardAction(accion("modificar"), "modificar", KeyStroke.getKeyStroke(KeyEvent.VK_M, Event.CTRL_MASK), JComponent.WHEN_IN_FOCUSED_WINDOW);
        this.registerKeyboardAction(accion("mostrar"), "mostrar", KeyStroke.getKeyStroke(KeyEvent.VK_M, Event.CTRL_MASK), JComponent.WHEN_IN_FOCUSED_WINDOW);
        btnCambioMoneda.setVisible(false);
        jLMoneda.setVisible(false);
        setMinimoDias(10);
    }

    private ActionListener accion(final String opc) {
        ActionListener a = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                switch (opc) {
                    case "imprimir":
                        if ((btnGuardar1.isEnabled()) && (btnGuardar1.isVisible())) {
                            btnGuardar1ActionPerformed(null);
                        }
                        break;
                    case "limpiar":
                        if ((btnLimpiar.isEnabled()) && (btnLimpiar.isVisible())) {
                            btnLimpiarActionPerformed(null);
                        }
                        break;
                    case "guardarFactura":
                        if ((btnGuardar.isEnabled()) && (btnGuardar.isVisible())) {
                            btnGuardarActionPerformed(null);
                        }
                        break;
                    case "productos":
                        if ((btnBusProd.isEnabled()) && (btnBusProd.isVisible())) {
                            btnBusProdActionPerformed(null);
                        }
                        break;
                    case "reimprimir": {
                        if (!tipo.equals("mesa")) {
                            try {
                                instancias.getReimpresion().setSelected(true);
                            } catch (PropertyVetoException ex) {
                                Logger.getLogger(pnlFactura.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                    break;
                    case "terceros":
                        if ((btnBuscTerceros.isEnabled()) && (btnBuscTerceros.isVisible())) {
                            btnBuscTercerosActionPerformed(null);
                        }
                        break;
                    case "modificar":
                        if ((btnActualizar.isEnabled()) && (btnActualizar.isVisible())) {
                            btnActualizarActionPerformed(null);
                        }
                        break;
                    case "valor":
                        if (tblProductos.getSelectedRow() > -1) {
                            tblProductos.editCellAt(tblProductos.getSelectedRow(), 2);
                            tblProductos.setColumnSelectionInterval(2, 2);
                            tblProductos.transferFocus();
                        }
                        break;
                    case "subir":
//                        if (tblProductos.getSelectedRow() > -1) {
////                            tblProductos.editCellAt(tblProductos.getSelectedRow());
//                            tblProductos.setColumnSelectionInterval(tblProductos.getSelectedRow() - 1, tblProductos.getSelectedRow() - 1);
//                            tblProductos.transferFocus();
//                        }
//                        break;
                    case "aumentarCantidad":
                        if (tblProductos.getSelectedRow() > -1) {
                            String baseUtilizada = obtenerBase();
                            ndProducto nodo = instancias.getSql().getDatosProducto(tblProductos.getValueAt(tblProductos.getSelectedRow(), 32).toString(), baseUtilizada);

                            if (!nodo.getUsuario().equals("ADMIN") && !tipo.equals("cotizacion")) {
                                metodos.msgAdvertenciaAjustado(factura, "La cantidad no se puede aumentar");
                                return;
                            }

                            BigDecimal num = big.getBigDecimal(tblProductos.getValueAt(tblProductos.getSelectedRow(), 3));
                            num = num.add(BigDecimal.ONE);

                            if (num.compareTo(BigDecimal.ZERO) <= 0) {
                                tblProductos.setValueAt(BigDecimal.ONE, tblProductos.getSelectedRow(), 3);
                            } else {
                                tblProductos.setValueAt(num, tblProductos.getSelectedRow(), 3);
                            }

                            calcularTabla(tblProductos.getSelectedRow(), false);
                        }
                        break;
                    case "disminuirCantidad":
                        if (tblProductos.getSelectedRow() > -1) {
                            String baseUtilizada = obtenerBase();
                            ndProducto nodo = instancias.getSql().getDatosProducto(tblProductos.getValueAt(tblProductos.getSelectedRow(), 32).toString(), baseUtilizada);

                            if (!nodo.getUsuario().equals("ADMIN") && !tipo.equals("cotizacion")) {
                                return;
                            }

                            BigDecimal num = big.getBigDecimal(tblProductos.getValueAt(tblProductos.getSelectedRow(), 3));
                            num = num.subtract(BigDecimal.ONE);

                            if (num.compareTo(BigDecimal.ZERO) <= 0) {
                                tblProductos.setValueAt(BigDecimal.ONE, tblProductos.getSelectedRow(), 3);
                            } else {
                                tblProductos.setValueAt(num, tblProductos.getSelectedRow(), 3);
                            }
                            calcularTabla(tblProductos.getSelectedRow(), false);

                        }
                        break;
                    case "mostrar":
                        if (pnlInformacion.isVisible()) {
                            pnlInformacion.setVisible(false);
                            btnOcultarInfoCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/boton-de-suma.png")));
                        } else {
                            pnlInformacion.setVisible(true);
                            btnOcultarInfoCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/boton-resta.png")));
                        }
                        break;
                }
            }
        };
        return a;
    }

    private String getTipoDocumentoEquivalente(String tipoIdentificacionAdquiriente) {
        if (tipoIdentificacionAdquiriente.equals("Cédula de ciudadanía")) {
            return "CEDULA_CIUDADANIA";
        } else if (tipoIdentificacionAdquiriente.equals("Nit")) {
            return "NIT";
        } else if (tipoIdentificacionAdquiriente.equals("Registro civil")) {
            return "REGISTRO_CIVIL";
        } else if (tipoIdentificacionAdquiriente.equals("Tarjeta de identidad")) {
            return "TARJETA_IDENTIDAD";
        } else if (tipoIdentificacionAdquiriente.equals("Cédula de extranjería")) {
            return "CEDULA_EXTRANJERIA";
        } else if (tipoIdentificacionAdquiriente.equals("Pasaporte")) {
            return "PASAPORTE";
        } else if (tipoIdentificacionAdquiriente.equals("Documento de identificación extranjero")) {
            return "DOC_ID_EXTRANJERO";
        } else if (tipoIdentificacionAdquiriente.equals("NIT de otro país")) {
            return "NIT_OTRO_PAIS";
        } else if (tipoIdentificacionAdquiriente.equals("PEP")) {
            return "PEP";    
        } else if (tipoIdentificacionAdquiriente.equals("NUIP")) {
            return "NUIP";    
        } else {
            return tipoIdentificacionAdquiriente;
        }
    }

//    static class WordWrapCellRenderer extends JTextArea implements TableCellRenderer {
//
//        WordWrapCellRenderer() {
//            setLineWrap(true);
//            setWrapStyleWord(true);
//        }
//
//        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
//            setText(value.toString());
//            setSize(table.getColumnModel().getColumn(column).getWidth(), 30);
//
//            if (getPreferredSize().height > 30) {
//                if (table.getRowHeight(row) != getPreferredSize().height) {
//                    table.setRowHeight(row, getPreferredSize().height);
//                }
//            } else {
//                if (table.getRowHeight(row) != getPreferredSize().height) {
//                    table.setRowHeight(row, 30);
//                }
//            }
//
//            if (isSelected) {
//                setForeground(new Color(0, 0, 0));
//                setBackground(table.getSelectionBackground());
//                Font font = new Font("Century Gothic", Font.PLAIN, 18);
//                setFont(font);
//            } else {
//                setForeground(new Color(0, 0, 0));
//                setBackground(table.getBackground());
//                Font font = new Font("Century Gothic", Font.PLAIN, 18);
//                setFont(font);
//            }
//
//            return this;
//        }
//    }
    public void setTipo(String tipo) {
        switch (tipo) {
            case "credito":
                if (tapControl.getTabCount() == 4) {
                    tapControl.remove(3);
                    tapControl.remove(2);

                    if (!instancias.getConfiguraciones().isRestaurante()) {
                        tapControl.remove(1);
                    }
                }

                break;
            case "facturacion":
                lbTitulo.setText("FACTURACIÓN");
                lbFacturaNo.setText(instancias.getTituloFactura());

                try {
                    if (cmbCargar.getItemAt(4).equals("Cargar Plan Separe")) {
                        cmbCargar.removeItemAt(4);
                    }
                } catch (Exception e) {
                    Logs.error(e);
                }

                if (instancias.getConfiguraciones().isProductosSerial()) {
                    pnlGarantia.setVisible(true);
                }

                if (tapControl.getTabCount() == 4) {
                    tapControl.remove(3);
                    tapControl.remove(2);

//                    if (!instancias.getConfiguraciones().isRestaurante()) {
//                        tapControl.remove(1);
//                    }
                }

                pnlComprobante.setVisible(true);

                break;
            case "cotizacion":
                lbTitulo.setText("COTIZACIÓN");
                lbFacturaNo.setText("Cotización No.");

                cmbCargar.setSelectedIndex(0);
                cmbCargar.setEnabled(false);
                btnPendientes.setVisible(true);
                btnReImprimir.setVisible(true);

                lbFechaVencimiento.setVisible(false);
                txtVencimiento.setVisible(false);

                lbDiasPlazo.setEnabled(false);
                txtDiasPlazo.setEnabled(false);

                chkSisteCredito.setEnabled(false);
                txtTurno.setVisible(false);
                lbOtroConsecutivo.setVisible(false);

                btnGuardar.setText("GUARDAR");
                btnGuardar1.setText("GUARDAR/IMPRIMIR");

                if (tapControl.getTabCount() == 4) {
                    tapControl.remove(3);
                    tapControl.remove(2);

                    if (!instancias.getConfiguraciones().isRestaurante()) {
                        tapControl.remove(1);
                    }
                }

                lbModeloContable.setVisible(false);
                txtModeloContable.setVisible(false);

                break;
            case "orden":
                cmbCargar.setSelectedIndex(1);
                cmbCargar.setEnabled(false);

                lbTitulo.setText("ORDEN DE SERVICIO");
                lbFacturaNo.setText("Orden No.");

                if (instancias.getConfiguraciones().isServicioAutomotor()) {
                    lbVendedor.setText("Mecánico: ");
                } else {
                    lbVendedor.setText("Técnico: ");
                }

                btnPendientes.setVisible(true);
                btnPendientes.setText("ORDEN PEND");

                if (tapControl.getTabCount() == 4) {
                    tapControl.remove(3);

                    if (!instancias.getConfiguraciones().isServicioAutomotor()) {
                        tapControl.remove(2);
                    }

                    if (!instancias.getConfiguraciones().isRestaurante()) {
                        tapControl.remove(1);
                    }
                }

                lbFechaVencimiento.setVisible(false);
                txtVencimiento.setVisible(false);

                lbDiasPlazo.setEnabled(false);
                txtDiasPlazo.setEnabled(false);
                chkSisteCredito.setEnabled(false);

                btnActualizar.setVisible(true);
                btnReImprimir.setVisible(true);

                btnGuardar.setText("GUARDAR");
                btnGuardar1.setText("GUARDAR/IMPRIMIR");

                lbModeloContable.setVisible(false);
                txtModeloContable.setVisible(false);

                break;
            case "pedido":
                lbTitulo.setText("PEDIDOS");
                lbFacturaNo.setText("Pedido No.");
                btnActualizar.setVisible(true);
                btnReImprimir.setVisible(true);

                btnPendientes.setVisible(true);
                btnPendientes.setText("PEDIDOS PEND");

                btnGuardar.setText("GUARDAR");
                btnGuardar1.setText("GUARDAR/IMPRIMIR");

                cmbCargar.setSelectedIndex(3);
                cmbCargar.setEnabled(false);

                lbFechaVencimiento.setVisible(false);
                txtVencimiento.setVisible(false);

                lbDiasPlazo.setEnabled(false);
                txtDiasPlazo.setEnabled(false);
                chkSisteCredito.setEnabled(false);

                txtDescGeneral.setVisible(false);

                if (tapControl.getTabCount() == 4) {
                    tapControl.remove(3);
                    tapControl.remove(2);

                    if (!instancias.getConfiguraciones().isRestaurante()) {
                        tapControl.remove(1);
                    }
                }

                lbModeloContable.setVisible(false);
                txtModeloContable.setVisible(false);

                break;
            case "separe":
                lbTitulo.setText("PLAN SEPARE");
                lbFacturaNo.setText("Separe No.");

                cmbCargar.setSelectedIndex(4);
                cmbCargar.setEnabled(false);

                btnGuardar.setText("GENERAR");
                btnGuardar1.setText("GENERAR/IMPRIMIR");
                btnReImprimir.setVisible(true);

                if (tapControl.getTabCount() == 4) {
                    tapControl.remove(3);
                    tapControl.remove(2);

                    if (!instancias.getConfiguraciones().isRestaurante()) {
                        tapControl.remove(1);
                    }
                }

                lbModeloContable.setVisible(false);
                txtModeloContable.setVisible(false);

                break;
            case "cuentaCobro":
                lbTitulo.setText("CUENTAS DE COBRO");
                lbFacturaNo.setText("Plantilla No.");
                pnlCuentaCobro.setVisible(true);

                txtDiasPlazo.setEnabled(false);
                txtVencimiento.setVisible(false);
                lbFechaVencimiento.setVisible(false);
                lbOtroConsecutivo.setVisible(false);
                txtTurno.setVisible(false);

                cmbCargar.setSelectedIndex(5);
                cmbCargar.setEnabled(false);

                btnGuardar.setText("GUARDAR");
                btnGuardar1.setVisible(false);

                if (tapControl.getTabCount() == 4) {
                    tapControl.remove(2);

                    if (!instancias.getConfiguraciones().isRestaurante()) {
                        tapControl.remove(1);
                    }
                }

                break;
            case "mesa":

                if (instancias.getConfiguraciones().isRestaurante()) {
                    if (instancias.getTitulo() == null) {
                        lbTitulo.setText("MESAS");
                    } else {
                        lbTitulo.setText(instancias.getTitulo());
                    }

                    lbFacturaNo.setText("MESA No.");
                } else {
                    lbTitulo.setText("CONGELADA");
                    lbFacturaNo.setText("CONGELADA No.");
                }

                btnVolver.setVisible(true);
                btnVolver1.setVisible(true);

                if (tapControl.getTabCount() == 4) {
                    tapControl.remove(3);
                    tapControl.remove(2);

                    if (!instancias.getConfiguraciones().isRestaurante()) {
                        tapControl.remove(1);
                    }
                }

                pnlComprobante.setVisible(true);

                break;
        }

        if (instancias.isVentasPredeterminado()) {
            cargar1010();
        }
    }

    public void borrarAdiciones() {
        int num = tblProductos.getRowCount();
        int num2 = 0;
        while (num2 <= num) {
            String desde = "";
            String desdeAgregado[]= new String[2];
            try {
                desde = tblProductos.getValueAt(num2, 31).toString();
                desdeAgregado = desde.split(";");
            } catch (Exception e) {
//                Logs.error(""+e);
            }

            if ("PRODUCTO-AGREGADO".equals(desdeAgregado[0])) {
                modeloPro.removeRow(num2);
                modeloInventario.removeRow(num2);
                num2 = num2 - 1;
            } else {
            }

            num2 = num2 + 1;
        }

        tblProductos.removeEditor();
        tblInventario.removeEditor();
    }
    
    /*
      valida si el registro en la bdcongelada existe ó no,
      si existe lo modifica sino lo inserta
    */
    public String manejoInsertUpdateCongelada(ndCongelada nodo) {
       /*error*/
        String retorno = "";
        String idCongelada = "";
        Object[] datosCongelada = instancias.getSql().consultarExistenciaCongelada(nodo);
        if (datosCongelada[0] != null) {
            idCongelada = datosCongelada[0].toString();
           double cantidadTotal = Double.parseDouble(nodo.getCant2().replace(",", "."));
           double cantidad2 = Double.parseDouble(datosCongelada[2].toString().replace(",", "."));
            
            if(cantidadTotal >= cantidad2){
              nodo.setCantidadSolicitada((cantidadTotal - cantidad2) + "");
            }else{
               nodo.setCantidadSolicitada((cantidadTotal) + "");
            }            
            retorno = String.valueOf(instancias.getSql().modificarCongelada(nodo));
        } else {
            boolean estado = instancias.getSql().agregarCongelada(nodo);
            if (estado) {
                idCongelada = instancias.getSql().consultaSecuencia();
            } else {
              
            }
        }
        if (retorno.equals("false")) {
            return "null";
        }
        return idCongelada;
    }
    
     public boolean manejoInsertUpdateComanda(String congelada, String factura, String cod, String producto, String opciones, String ingrediente,
            String adiciones, String aderezos, String cant, String obv, String turno, String pedido, String consecutivo, String idCongelada){
        boolean retorno=false;
        String cantidadSolicitada = "0";
        Object[] datosComanda = instancias.getSql().consultarExistenciaComanda(congelada, cod, idCongelada);
        
        if(datosComanda[0] != null){
            double cantidadTotal = Double.parseDouble(cant);
//            double cantidad2 = Double.parseDouble(datosComanda[1].toString().replace(".", "").replace(",", "."));
            double cantidad2 = Double.parseDouble(datosComanda[1].toString());
            
            if(cantidadTotal >= cantidad2){
              cantidadSolicitada=((cantidadTotal - cantidad2) + "");
            }else{
               cantidadSolicitada=((cantidadTotal) + "");
            }  
            retorno=instancias.getSql().modificarComanda( congelada,  factura,  cod,  producto,  opciones,  ingrediente,
             adiciones,  aderezos,  cant,  obv,  turno,  pedido,  consecutivo, idCongelada, cantidadSolicitada);
        }else{
            cantidadSolicitada=cant;
            retorno=instancias.getSql().agregarComandaIdCongelada(congelada,  factura,  cod,  producto,  opciones,  ingrediente,
             adiciones,  aderezos,  cant,  obv,  turno,  pedido,  consecutivo, idCongelada, cantidadSolicitada);
        }
        
        return retorno;
    }

    public void actualizarConsecutivo(int fila) {
        String baseUtilizada = obtenerBase();

        try {
            if (tblProductos.getSelectedColumn() == 2) {
                if (!(Boolean) datos[61]) {
                    ndProducto nodo = instancias.getSql().getDatosProducto(tblProductos.getValueAt(tblProductos.getSelectedRow(), 32).toString(), baseUtilizada);
                  
                    String lista = tblInventario.getValueAt(tblProductos.getSelectedRow(), 0).toString();
                    if (lista.equals("L1")) {
                        tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(nodo.getL1())), tblProductos.getSelectedRow(), 2);
                    } else if (lista.equals("L2")) {
                        tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(nodo.getL2())), tblProductos.getSelectedRow(), 2);
                    } else if (lista.equals("L3")) {
                        tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(nodo.getL3())), tblProductos.getSelectedRow(), 2);
                    } else if (lista.equals("L4")) {
                        tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(nodo.getL4())), tblProductos.getSelectedRow(), 2);
                    }
                    tblProductos.removeEditor();
                }

                KeyEvent evento = new KeyEvent(tblProductos, 0, 0, 0, 0);
                evento.setKeyCode(KeyEvent.VK_ENTER);
                tblProductosKeyReleased(evento);
            }
        } catch (Exception e) {
            Logs.error(e);
        }

        try {
            if (tblProductos.getSelectedColumn() != 2 && tblProductos.getSelectedColumn() != 1) {
                KeyEvent evento = new KeyEvent(tblProductos, 0, 0, 0, 0);
                evento.setKeyCode(KeyEvent.VK_ENTER);
                tblProductosKeyReleased(evento);
                txtCodProducto.requestFocus();
            }
        } catch (Exception e) {
            Logs.error(e);
        }

        String prefijo = "", consecutivo = "1";

        switch (tipo) {
            case "facturacion":
                if (null == tblComprobantes.getValueAt(fila, 8)) {
                    prefijo = "";
                } else {
                    prefijo = tblComprobantes.getValueAt(fila, 8).toString();
                }

                if (null == tblComprobantes.getValueAt(fila, 9)) {
                    metodos.msgAdvertencia(factura, "Resolución sin consecutivo, verifique para que pueda continuar");
                    return;
                } else {
//                    consecutivo = tblComprobantes.getValueAt(fila, 9).toString();
                     consecutivo = ""+instancias.getSql().getConsecutivoFacturaActual(tblComprobantes.getValueAt(fila, 0).toString());
                }
                int opc = cmbCargar.getSelectedIndex();
            
            if(cmbCargar.getItemAt(opc).equals("Cargar FE")){
              Logs.debug("No se debe mover el consecutivo porque esta en modo carga FE");
            }else{
                lbNoFactura.setText(prefijo + consecutivo);
            }    
                break;
            case "orden":
                lbNoFactura.setText((String) instancias.getSql().getNumConsecutivoActual("OSERV")[0]);
                break;
            case "cotizacion":
                lbNoFactura.setText((String) instancias.getSql().getNumConsecutivoActual("COTI")[0]);
                break;
            case "pedido":
                lbNoFactura.setText((String) instancias.getSql().getNumConsecutivoActual("PEDIDO")[0]);
                break;
            case "separe":
                lbNoFactura.setText((String) instancias.getSql().getNumConsecutivoActual("SEPARE")[0]);
                break;
            case "cuentaCobro":
                lbNoFactura.setText((String) instancias.getSql().getNumConsecutivoActual("CCOBRO")[0]);
                break;
            case "mesa":
//                if (!mesaCongelada && !lbTitulo.getText().equals("DOMICILIO")) {
//                    lbNoFactura.setText((String) instancias.getSql().getNumConsecutivo("CONGELADA")[0]);
//                }

                if (lbTitulo.getText().equals("DOMICILIO")) {

                    if (null == tblComprobantes.getValueAt(fila, 8)) {
                        prefijo = "";
                    } else {
                        prefijo = tblComprobantes.getValueAt(fila, 8).toString();
                    }

                    if (null == tblComprobantes.getValueAt(fila, 9)) {
                        metodos.msgAdvertencia(factura, "Resolución sin consecutivo, verifique para que pueda continuar");
                        return;
                    } else {
                        consecutivo = tblComprobantes.getValueAt(fila, 9).toString();
                    }

                    lbNoFactura.setText(prefijo + consecutivo);
                }
                break;
        }
    }

    public int obtenerDocumento() {
        int fila = 0;
        for (int i = 0; i < tblComprobantes.getRowCount(); i++) {
            if ((Boolean) tblComprobantes.getValueAt(i, 2)) {
                fila = i;
            }
        }
        return fila;
    }

//    public void aumentarConsecutivo(int fila) {
//
//        switch (tipo) {
//            case "facturacion":
////                if (!instancias.getSql().aumentarConsecutivoFactura(tblComprobantes.getValueAt(fila, 0).toString(),
////                        Integer.parseInt((String) instancias.getSql().getNumConsecutivoFact(tblComprobantes.getValueAt(fila, 0).toString())[0]) + 1)) {
////                    metodos.msgError(null, "Error al aumentar consecutivo de factura");
////                }
//                break;
//            case "orden":
//                if (!instancias.getSql().aumentarConsecutivo("OSERV", Integer.parseInt((String) instancias.getSql().getNumConsecutivo("OSERV")[0]) + 1)) {
//                    metodos.msgError(null, "Hubo un problema al guardar en el consecutivo de la cotizacion");
//                }
//                break;
//            case "cotizacion":
//                if (!instancias.getSql().aumentarConsecutivo("COTI", Integer.parseInt((String) instancias.getSql().getNumConsecutivo("COTI")[0]) + 1)) {
//                    metodos.msgError(null, "Hubo un problema al guardar en el consecutivo de la cotizacion");
//                }
//                break;
//            case "pedido":
//                if (!instancias.getSql().aumentarConsecutivo("PEDIDO", Integer.parseInt((String) instancias.getSql().getNumConsecutivo("PEDIDO")[0]) + 1)) {
//                    metodos.msgError(null, "Hubo un problema al guardar en el consecutivo del pedido");
//                }
//                break;
//            case "separe":
//                if (!instancias.getSql().aumentarConsecutivo("SEPARE", Integer.parseInt((String) instancias.getSql().getNumConsecutivo("SEPARE")[0]) + 1)) {
//                    metodos.msgError(null, "Hubo un problema al guardar en el consecutivo del pedido");
//                }
//                break;
//            case "cuentaCobro":
//                if (!instancias.getSql().aumentarConsecutivo("CCOBRO", Integer.parseInt((String) instancias.getSql().getNumConsecutivo("CCOBRO")[0]) + 1)) {
//                    metodos.msgError(null, "Hubo un problema al guardar en el consecutivo de la cuenta de cobro");
//                }
//                break;
//            case "mesa":
//                if (lbTitulo.getText().equals("DOMICILIO")) {
//                    //se comenta ya que el consecutivo se actualiza cuando se consume
////                    if (!instancias.getSql().aumentarConsecutivoFactura(tblComprobantes.getValueAt(fila, 0).toString(),
////                            Integer.parseInt((String) instancias.getSql().getNumConsecutivoFact(tblComprobantes.getValueAt(fila, 0).toString())[0]) + 1)) {
////                        metodos.msgError(null, "Error al aumentar consecutivo de factura");
////                    }
//                } else {
//                    if (!instancias.getSql().aumentarConsecutivo("CONGELADA", Integer.parseInt((String) instancias.getSql().getNumConsecutivo("CONGELADA")[0]) + 1)) {
//                        metodos.msgError(null, "Hubo un problema al guardar en el consecutivo de la congelada");
//                    }
//                }
//                break;
//        }
//    }

    public void imprimir(String factura, String factura2) {

        String observaciones = txtObservaciones.getText();

        String legal = "", pie;

        try {
            legal = instancias.getLegal();
        } catch (Exception ex) {
            legal = "";
        }

        try {
            pie = instancias.getPie();
        } catch (Exception ex) {
            pie = "";
        }

        Boolean tipoDomicilio = false;
        if (tipo.equals("mesa")) {
            tipo = "facturacion";
            tipoDomicilio = true;
        }
        Logs.log("tipo ################### " + tipo);
        switch (tipo) {
            case "facturacion":

                //VERIFICAMOS SI TIENE UN TITULO ADICIONAL
                String titulo;
                if (tipo.equals("facturacion") && instancias.getConfiguraciones().isRestaurante()) {
                    if ((Boolean) datos[54]) {
                        titulo = "Turno";
                    } else {
                        titulo = "";
                    }
                } else if ((Boolean) datos[57]) {
                    titulo = "Num Fact2";
                } else {
                    titulo = "";
                }

                String tipo = "";
                String impresora = "";

                //OBTENEMOS EL TIPO DE FACTURA QUE SE VA A IMPRIMIR
                if (rdMediaCarta.isSelected()) {
                    tipo = "factura" + instancias.getRegimen();
                    impresora = datos[82].toString();
                } else if (rdCarta.isSelected()) {
                    tipo = "facturaCompleta" + instancias.getRegimen();
                    impresora = datos[83].toString();
                } else if (rdPos.isSelected()) {
                    tipo = "pos" + instancias.getRegimen();
                    impresora = datos[81].toString();
                }

                //VALIDACIÓN PARA VER IMPOCONSUMO EN LA IMPRESION
                String impoconsumo = datos[84].toString();

                //VALIDACIÓN PARA VER RETENCIONES EN LA IMPRESION
                String retenciones = datos[85].toString();

                //VALIDACION PARA LA IMPRESION CON CODIGO, SIN CODIGO O IMEI
                String tipoImpr = instancias.getConfiguraciones().getTipoImpresion();
                if (tipoImpr.equals("Con-Codigo")) {
                } else if (tipoImpr.equals("Sin-Codigo")) {
                    tipo = tipo + "1";
                } else if (tipoImpr.equals("Imei")) {
                    tipo = tipo + "Imei";
                }

                //CREAMOS OBJETO PARA HACER CONTEO DE GRUPOS 
                Object[] grupos = new Object[tblProductos.getRowCount()];

                //HACEMOS CONTEO DE GRUPOS DE LOS PRODUCTOS DE FACTURA
                int ser = 0;
                if ((Boolean) datos[Identidad.impresionPorGrupo]) {
                    for (int i = 0; i < tblProductos.getRowCount(); i++) {
                        String grupo = tblProductos.getValueAt(i, 34).toString();

                        Boolean entro = false;
                        for (int j = 0; j < grupos.length; j++) {
                            if (grupo.equals(grupos[j])) {
                                entro = true;
                            }
                        }

                        if (!entro) {
                            grupos[ser] = grupo;
                            ser++;
                        }
                    }
                }

                //OBTENEMOS LA SENTENCIA SQL
                String condicion;
                if ((Boolean) datos[Identidad.combinarProductos] && instancias.getConfiguraciones().isRestaurante()) {
                    condicion = metodos.sentenciaImpresionFactura("", " WHERE bdFactura.factura = '" + factura2 + "' ");
                } else {
                    if (instancias.getConfiguraciones().isRestaurante()) {
                        condicion = metodos.sentenciaImpresionFactura("", " WHERE bdFactura.factura = '" + factura2 + "' ");
                    } else {
                        condicion = metodos.sentenciaImpresionFactura("", " WHERE bdFactura.factura = '" + factura2 + "' ");
                    }
                }

                //SI ESTA SELECCIONADA IMPRESION POR GRUPO
                Logs.log("ESTA SELECCIONADA IMPRESION POR GRUPO " + datos[Identidad.impresionPorGrupo]);
                
//                if ((Boolean) datos[Identidad.impresionPorGrupo]) { // COMO ESTABA ANTES DE HACER LO DE IMPRESIONES
                if (false) {
                    
                    //validar si en algun momento se necesita facturar por grupos
                    for (int i = 0; i < ser; i++) {

                        String impresoraGrupo = "Sin_impresora";
                        Object[] datosGrupo;

                        String grupoActual = grupos[i].toString();

                        if (!grupoActual.equals("")) {
                            datosGrupo = instancias.getSql().getDatosGrupo(grupoActual);
                            impresoraGrupo = datosGrupo[5].toString();

                        } else {
                            impresoraGrupo = "Sin_impresora";
                        }
                        Logs.log("Usando impresora " + impresoraGrupo);

                        if ((Boolean) datos[Identidad.combinarProductos] && instancias.getConfiguraciones().isRestaurante()) {
                            if (grupoActual.equals("")) {
                                condicion = metodos.sentenciaImpresionFactura("agrupada", " WHERE bdFactura.factura = '" + factura2 + "' and Grupo is Null ");
                            } else {
                                //ENTRO POR ACA PARA FACTURA
                                condicion = metodos.sentenciaImpresionFactura("agrupada", " WHERE bdFactura.factura = '" + factura2 + "' and Grupo = '" + grupos[i] + "' ");
                            }
                        } else {
                            if (instancias.getConfiguraciones().isRestaurante()) {
                                if (grupoActual.equals("")) {
                                    condicion = metodos.sentenciaImpresionFactura("agrupada", " WHERE bdFactura.factura = '" + factura2 + "' and Grupo is Null ");
                                } else {
                                    condicion = metodos.sentenciaImpresionFactura("agrupada", " WHERE bdFactura.factura = '" + factura2 + "' and Grupo = '" + grupos[i] + "' ");
                                }
                            } else {
                                if (grupoActual.equals("")) {
                                    condicion = metodos.sentenciaImpresionFactura("", " WHERE bdFactura.factura = '" + factura2 + "' and Grupo is Null ");
                                } else {
                                    condicion = metodos.sentenciaImpresionFactura("", " WHERE bdFactura.factura = '" + factura2 + "' and Grupo = '" + grupos[i] + "' ");
                                }
                            }
                        }
                        Logs.log("Usando impresora condicion " + condicion);
                        boolean tamImpresion = Boolean.valueOf(datos[180].toString());
                        //verifica si la envia a Impresion de 58mm
                      
                        if (rdPos.isSelected()) {
                            if(tamImpresion == false){
                              tipo=tipo+"Tam58";
                            }
                        }
                        
                        if (instancias.getRegimen().equals("")) {
                            //MANDA A IMPROMIR
                            instancias.getReporte().ver_Factura(factura2, observaciones, instancias.getInformacionEmpresaCompleto(), legal, "Original", pie,
                                    tipo, factura2, !(Boolean) datos[68], titulo, impresoraGrupo, impoconsumo, retenciones, condicion, false, false);

                        } else {
                            instancias.getReporte().ver_Factura(factura2, observaciones, instancias.getInformacionEmpresaCompleto(), legal, "Original", pie,
                                    tipo, factura, !(Boolean) datos[68], titulo, impresoraGrupo, impoconsumo, retenciones, condicion, false, false);
                        }

                        try {
                            Thread.sleep(500);
                        } catch (Exception e) {
                            Logs.error(e);
                        }
                    }
                } else {
                    boolean tamImpresion = Boolean.valueOf(datos[118].toString());
                        //verifica si la envia a Impresion de 58mm
                    if (rdPos.isSelected()) {
                        if (tamImpresion == false) {
                            tipo = tipo + "Tam58";
                        }
                    }
                    if (instancias.getRegimen().equals("")) {
                        instancias.getReporte().ver_Factura(factura2, observaciones, instancias.getInformacionEmpresaCompleto(), legal, "Original",
                                pie, tipo, factura2, !(Boolean) datos[68], titulo, impresora, impoconsumo, retenciones, condicion, false, false);
                    } else {
                        instancias.getReporte().ver_Factura(factura2, observaciones, instancias.getInformacionEmpresaCompleto(), legal, "Original", pie,
                                tipo, factura, !(Boolean) datos[68], titulo, impresora, impoconsumo, retenciones, condicion, false, false);
                    }
                }

                //HACEMOS UN STOP PARA NO SATURAR LA IMPRESORA
                try {
                    Thread.sleep(500);
                } catch (Exception e) {
                    Logs.error(e);
                }

                if ((Boolean) datos[63]) {

                    String copias = "";
                    try {
                        copias = metodos.msgIngresarEnter(null, "Cantidad de copias");
                    } catch (Exception e) {
                        Logs.error(e);
                    }

                    try {
                        if (copias != null || !copias.equals("")) {
                            for (int i = 0; i < Integer.parseInt(copias); i++) {

                                if ((Boolean) datos[Identidad.impresionPorGrupo]) {
                                    for (int ix = 0; ix < ser; ix++) {

                                        String impresoraGrupo = "Sin_impresora";
                                        Object[] datosGrupo;

                                        String grupoActual = grupos[ix].toString();

                                        if (!grupoActual.equals("")) {
                                            datosGrupo = instancias.getSql().getDatosGrupo(grupoActual);
                                            impresoraGrupo = datosGrupo[5].toString();
                                        } else {
                                            impresoraGrupo = "Sin_impresora";
                                        }

                                        if ((Boolean) datos[Identidad.combinarProductos] && instancias.getConfiguraciones().isRestaurante()) {
                                            if (grupoActual.equals("")) {
                                                condicion = metodos.sentenciaImpresionFactura("agrupada", " WHERE bdFactura.factura = '" + factura2 + "' and Grupo is Null ");
//                                                condicion = " facturaAgrupada where factura = '" + factura2 + "' and Grupo is Null ";
                                            } else {
                                                condicion = metodos.sentenciaImpresionFactura("agrupada", " WHERE bdFactura.factura = '" + factura2 + "' and Grupo = '" + grupoActual + "' ");
//                                                condicion = " facturaAgrupada where factura = '" + factura2 + "' and Grupo = '" + grupoActual + "'  ";
                                            }
                                        } else {
                                            if (instancias.getConfiguraciones().isRestaurante()) {
                                                if (grupoActual.equals("")) {
                                                    condicion = metodos.sentenciaImpresionFactura("agrupada", " WHERE bdFactura.factura = '" + factura2 + "' and Grupo is Null ");
//                                                    condicion = " facturaAgrupada where factura = '" + factura2 + "' and Grupo is Null ";
                                                } else {
                                                    condicion = metodos.sentenciaImpresionFactura("agrupada", " WHERE bdFactura.factura = '" + factura2 + "' and Grupo = '" + grupoActual + "' ");
//                                                    condicion = " facturaAgrupada where factura = '" + factura2 + "' and Grupo = '" + grupoActual + "' ";
                                                }
                                            } else {
                                                if (grupoActual.equals("")) {
                                                    condicion = metodos.sentenciaImpresionFactura("", " WHERE bdFactura.factura = '" + factura2 + "' and Grupo is Null ");
//                                                    condicion = " factura where factura = '" + factura2 + "' and Grupo is Null ";
                                                } else {
                                                    condicion = metodos.sentenciaImpresionFactura("", " WHERE bdFactura.factura = '" + factura2 + "' and Grupo = '" + grupoActual + "' ");
//                                                    condicion = " factura where factura = '" + factura2 + "' and Grupo = '" + grupoActual + "' ";
                                                }
                                            }
                                        }

                                        if (instancias.getRegimen().equals("")) {
                                            instancias.getReporte().ver_Factura(factura2, observaciones, instancias.getInformacionEmpresaCompleto(), legal, "Copia " + (i + 1),
                                                    pie, tipo, factura2, !(Boolean) datos[68], titulo, impresoraGrupo, impoconsumo, retenciones, condicion, false, false);
                                        } else {
                                            instancias.getReporte().ver_Factura(factura2, observaciones, instancias.getInformacionEmpresaCompleto(), legal, "Copia " + (i + 1),
                                                    pie, tipo, factura, !(Boolean) datos[68], titulo, impresoraGrupo, impoconsumo, retenciones, condicion, false, false);
                                        }

                                        try {
                                            Thread.sleep(500);
                                        } catch (Exception e) {
                                            Logs.error(e);
                                        }
                                    }
                                } else {
                                    if (instancias.getRegimen().equals("")) {
                                        instancias.getReporte().ver_Factura(factura2, observaciones, instancias.getInformacionEmpresaCompleto(), legal, "Copia " + (i + 1),
                                                instancias.getPie(), tipo, factura2, !(Boolean) datos[68], titulo, impresora, impoconsumo, retenciones, condicion, false, false);
                                    } else {
                                        instancias.getReporte().ver_Factura(factura2, observaciones, instancias.getInformacionEmpresaCompleto(), legal, "Copia " + (i + 1),
                                                instancias.getPie(), tipo, factura, !(Boolean) datos[68], titulo, impresora, impoconsumo, retenciones, condicion, false, false);
                                    }
                                }
                            }
                        }
                    } catch (Exception e) {
                        Logs.error(e);
                    }

                } else {
                    int cantidad;

                    try {
                        cantidad = Integer.parseInt(datos[73].toString());
                    } catch (Exception e) {
                        cantidad = 0;
                    }

                    if (cantidad > 0) {
                        for (int i = 0; i < cantidad; i++) {

                            if ((Boolean) datos[Identidad.impresionPorGrupo]) {
                                for (int ix = 0; ix < ser; ix++) {

                                    String impresoraGrupo = "Sin_impresora";
                                    Object[] datosGrupo;

                                    String grupoActual = grupos[ix].toString();

                                    if (!grupoActual.equals("")) {
                                        datosGrupo = instancias.getSql().getDatosGrupo(grupoActual);
                                        impresoraGrupo = datosGrupo[5].toString();
                                    } else {
                                        impresoraGrupo = "Sin_impresora";
                                    }

                                    if ((Boolean) datos[Identidad.combinarProductos] && instancias.getConfiguraciones().isRestaurante()) {
                                        if (grupoActual.equals("")) {
                                            condicion = metodos.sentenciaImpresionFactura("agrupada", " WHERE bdFactura.factura = '" + factura2 + "' and Grupo is Null ");
//                                            condicion = " facturaAgrupada where factura = '" + factura2 + "' and Grupo is Null ";
                                        } else {
                                            condicion = metodos.sentenciaImpresionFactura("agrupada", " WHERE bdFactura.factura = '" + factura2 + "' and Grupo = '" + grupoActual + "' ");
//                                            condicion = " facturaAgrupada where factura = '" + factura2 + "' and Grupo = '" + grupoActual + "'  ";
                                        }
                                    } else {
                                        if (instancias.getConfiguraciones().isRestaurante()) {
                                            if (grupoActual.equals("")) {
                                                condicion = metodos.sentenciaImpresionFactura("agrupada", " WHERE bdFactura.factura = '" + factura2 + "' and Grupo is Null ");
//                                                condicion = " facturaAgrupada where factura = '" + factura2 + "' and Grupo is Null ";
                                            } else {
                                                condicion = metodos.sentenciaImpresionFactura("agrupada", " WHERE bdFactura.factura = '" + factura2 + "' and Grupo = '" + grupoActual + "' ");
//                                                condicion = " facturaAgrupada where factura = '" + factura2 + "' and Grupo = '" + grupoActual + "' ";
                                            }
                                        } else {
                                            if (grupoActual.equals("")) {
                                                condicion = metodos.sentenciaImpresionFactura("", " WHERE bdFactura.factura = '" + factura2 + "' and Grupo is Null ");
//                                                condicion = " factura where factura = '" + factura2 + "' and Grupo is Null ";
                                            } else {
                                                condicion = metodos.sentenciaImpresionFactura("", " WHERE bdFactura.factura = '" + factura2 + "' and Grupo = '" + grupoActual + "' ");
//                                                condicion = " factura where factura = '" + factura2 + "' and Grupo = '" + grupoActual + "' ";
                                            }
                                        }
                                    }

                                    if (instancias.getRegimen().equals("")) {
                                        instancias.getReporte().ver_Factura(factura2, observaciones, instancias.getInformacionEmpresaCompleto(), legal, "Copia " + (i + 1),
                                                pie, tipo, factura2, !(Boolean) datos[68], titulo, impresoraGrupo, impoconsumo, retenciones, condicion, false, false);
                                    } else {
                                        instancias.getReporte().ver_Factura(factura2, observaciones, instancias.getInformacionEmpresaCompleto(), legal, "Copia " + (i + 1),
                                                pie, tipo, factura, !(Boolean) datos[68], titulo, impresoraGrupo, impoconsumo, retenciones, condicion, false, false);
                                    }

                                    try {
                                        Thread.sleep(500);
                                    } catch (Exception e) {
                                        Logs.error(e);
                                    }
                                }
                            } else {
                                if (instancias.getRegimen().equals("")) {
                                    instancias.getReporte().ver_Factura(factura2, observaciones, instancias.getInformacionEmpresaCompleto(), legal, "Copia " + (i + 1),
                                            instancias.getPie(), tipo, factura2, !(Boolean) datos[68], titulo, impresora, impoconsumo, retenciones, condicion, false, false);
                                } else {
                                    instancias.getReporte().ver_Factura(factura2, observaciones, instancias.getInformacionEmpresaCompleto(), legal, "Copia " + (i + 1),
                                            instancias.getPie(), tipo, factura, !(Boolean) datos[68], titulo, impresora, impoconsumo, retenciones, condicion, false, false);
                                }
                            }
                        }
                    }
                }

                if (tipoDomicilio) {
                    this.tipo = "mesa";
                    tipoDomicilio = false;
                }

                break;

            case "cotizacion":

                instancias.getReporte().ver_Cotiza(factura, observaciones, instancias.getInformacionEmpresa(), legal, getTipo(), !(Boolean) datos[70]);

                try {
                    Thread.sleep(500);
                } catch (Exception e) {
                    Logs.error(e);
                }

                if ((Boolean) datos[65]) {
                    String copias = JOptionPane.showInputDialog("Cantidad de copias");
                    try {
                        if (copias != null || !copias.equals("")) {
                            for (int i = 0; i < Integer.parseInt(copias); i++) {
                                instancias.getReporte().ver_Cotiza(factura, observaciones, instancias.getInformacionEmpresa(), legal, getTipo(), !(Boolean) datos[70]);
                            }
                        }
                    } catch (Exception e) {
                        Logs.error(e);
                    }
                } else {
                    int cantidad;

                    try {
                        cantidad = Integer.parseInt(datos[75].toString());
                    } catch (Exception e) {
                        cantidad = 0;
                    }

                    if (cantidad > 0) {
                        for (int i = 0; i < cantidad; i++) {
                            instancias.getReporte().ver_Cotiza(factura, observaciones, instancias.getInformacionEmpresa(), legal, getTipo(), !(Boolean) datos[70]);
                        }
                    }
                }
                break;
            case "orden":

                if (instancias.getConfiguraciones().isServicioAutomotor()) {
                    instancias.getReporte().ver_oServicio(factura, observaciones, !(Boolean) datos[69], txtTipoVehiculo.getText(), "");

                    try {
                        Thread.sleep(500);
                    } catch (Exception e) {
                        Logs.error(e);
                    }

                    if ((Boolean) datos[64]) {
                        String copias = JOptionPane.showInputDialog("Cantidad de copias");

                        try {
                            if (copias != null || !copias.equals("")) {
                                for (int i = 0; i < Integer.parseInt(copias); i++) {
                                    instancias.getReporte().ver_oServicio(factura, observaciones, !(Boolean) datos[69], txtTipoVehiculo.getText(), "");
                                }
                            }
                        } catch (Exception e) {
                            Logs.error(e);
                        }
                    } else {
                        int cantidad;

                        try {
                            cantidad = Integer.parseInt(datos[74].toString());
                        } catch (Exception e) {
                            cantidad = 0;
                        }

                        if (cantidad > 0) {
                            for (int i = 0; i < cantidad; i++) {
                                instancias.getReporte().ver_oServicio(factura, observaciones, !(Boolean) datos[69], txtTipoVehiculo.getText(), "");
                            }
                        }
                    }
                } else {

                    String tipoImp = "";
                    if (rdMediaCarta.isSelected()) {
                        tipoImp = "Normal";
                    } else if (rdCarta.isSelected()) {
                        tipoImp = "NormalCompleta";
                    } else if (rdPos.isSelected()) {
                        tipoImp = "Pos";
                    }

                    instancias.getReporte().ver_oServicio(factura, observaciones, !(Boolean) datos[69], "", tipoImp);

                    try {
                        Thread.sleep(500);
                    } catch (Exception e) {
                        Logs.error(e);
                    }

                    if ((Boolean) datos[64]) {
                        String copias = JOptionPane.showInputDialog("Cantidad de copias");

                        try {
                            if (copias != null || !copias.equals("")) {
                                for (int i = 0; i < Integer.parseInt(copias); i++) {
                                    instancias.getReporte().ver_oServicio(factura, observaciones, !(Boolean) datos[69], "", "Normal");
                                }
                            }
                        } catch (Exception e) {
                            Logs.error(e);
                        }
                    } else {
                        int cantidad;

                        try {
                            cantidad = Integer.parseInt(datos[74].toString());
                        } catch (Exception e) {
                            cantidad = 0;
                        }

                        if (cantidad > 0) {
                            for (int i = 0; i < cantidad; i++) {
                                instancias.getReporte().ver_oServicio(factura, observaciones, !(Boolean) datos[69], "", "Normal");
                            }
                        }
                    }
                }

                break;
            case "pedido":
                String tipo1 = this.getTipo();

                instancias.getReporte().ver_Pedido(factura, observaciones, instancias.getInformacionEmpresaCompleto(), legal, "", instancias.getPie(), this.getTipo(), factura2,
                        !(Boolean) datos[72]);

                try {
                    Thread.sleep(500);
                } catch (Exception e) {
                    Logs.error(e);
                }

                if ((Boolean) datos[67]) {
                    String copias = JOptionPane.showInputDialog("Cantidad de copias");
                    try {
                        if (copias != null || !copias.equals("")) {
                            for (int i = 0; i < Integer.parseInt(copias); i++) {
                                instancias.getReporte().ver_Pedido(factura, observaciones, instancias.getInformacionEmpresaCompleto(), legal, "Copia " + (i + 1), instancias.getPie(),
                                        this.getTipo(), factura2, !(Boolean) datos[72]);
                            }
                        }
                    } catch (Exception e) {
                        Logs.error(e);
                    }
                } else {
                    int cantidad;

                    try {
                        cantidad = Integer.parseInt(datos[77].toString());
                    } catch (Exception e) {
                        cantidad = 0;
                    }

                    if (cantidad > 0) {
                        for (int i = 0; i < cantidad; i++) {
                            instancias.getReporte().ver_Pedido(factura, observaciones, instancias.getInformacionEmpresaCompleto(), legal, "Copia " + (i + 1), instancias.getPie(),
                                    this.getTipo(), factura2, !(Boolean) datos[72]);
                        }
                    }
                }
                break;
            case "separe":
                instancias.getReporte().ver_Separe(factura, observaciones, instancias.getInformacionEmpresaCompleto(), legal, "", instancias.getPie(), this.getTipo(), factura2,
                        !(Boolean) datos[71]);

                if ((Boolean) datos[66]) {
                    String copias = JOptionPane.showInputDialog("Cantidad de copias");
                    try {
                        if (copias != null || !copias.equals("")) {
                            for (int i = 0; i < Integer.parseInt(copias); i++) {
                                instancias.getReporte().ver_Separe(factura, observaciones, instancias.getInformacionEmpresaCompleto(), legal, "", instancias.getPie(), this.getTipo(), factura2,
                                        !(Boolean) datos[71]);
                            }
                        }
                    } catch (Exception e) {
                        Logs.error(e);
                    }
                } else {
                    int cantidad;

                    try {
                        cantidad = Integer.parseInt(datos[76].toString());
                    } catch (Exception e) {
                        cantidad = 0;
                    }

                    if (cantidad > 0) {
                        for (int i = 0; i < cantidad; i++) {
                            instancias.getReporte().ver_Separe(factura, observaciones, instancias.getInformacionEmpresaCompleto(), legal, "", instancias.getPie(), this.getTipo(), factura2,
                                    !(Boolean) datos[71]);
                        }
                    }
                }
                break;
        }
    }

    public void setTipo() {
        if (instancias.getImpresion().equals("pos")) {
            rdPos.setSelected(true);
        } else if (instancias.getImpresion().equals("facturaCompleta")) {
            rdCarta.setSelected(true);
        } else {
            rdMediaCarta.setSelected(true);
        }
    }

    public infFactura getFactura() {
        return factura;
    }

    public void setFactura(infFactura factura) {
        this.factura = factura;
    }

    public int getCantidadProductos() {
        return tblProductos.getRowCount();
    }

    public void anularOrdenServicio(String nota, String orden, String base) {

        if (!instancias.getSql().modificarOServicioFechaAnulacion(metodos.fechaConsulta(metodosGenerales.fecha()), instancias.getUsuario(), orden,
                nota, true, (String) instancias.getSql().getNumConsecutivo("ANULA")[0])) {
            metodos.msgError(null, "Error al agregar la fecha de la anulación");
            return;
        }

        for (int i = 0; i < tblProductos.getRowCount(); i++) {

            ndProducto producto = instancias.getSql().getDatosProducto(tblProductos.getValueAt(i, 32).toString(), base);

            double cantidad;
            double fisicoInventario;

            try {
                cantidad = Double.parseDouble(producto.getOrdenServicio().replace(",", "."));
            } catch (Exception e) {
                cantidad = 0;
            }

            try {
                fisicoInventario = Double.parseDouble(producto.getFisicoInventario().replace(",", "."));
            } catch (Exception e) {
                fisicoInventario = Double.parseDouble(producto.getInventario().replace(",", "."));
            }

            double cantidadTabla = big.getMonedaToDouble(tblProductos.getValueAt(i, 3).toString());
            double total = cantidad - cantidadTabla;
            fisicoInventario = fisicoInventario + cantidadTabla;

            String total1 = String.valueOf(df.format(total)).replace(".", ",");
            String fisicoInventario1 = String.valueOf(df.format(fisicoInventario)).replace(".", ",");

            instancias.getSql().modificarInventario("ordenServicio", total1, tblProductos.getValueAt(i, 32).toString(), base);
            instancias.getSql().modificarInventario("fisicoInventario", fisicoInventario1, tblProductos.getValueAt(i, 32).toString(), base);
        }

        metodos.msgExito(null, "Orden de servicio anulado con éxito");

//        if (!instancias.getSql().aumentarConsecutivo("ANULA", Integer.parseInt((String) instancias.getSql().getNumConsecutivo("ANULA")[0]) + 1)) {
//            metodos.msgError(null, "Hubo un problema al guardar en el consecutivo de la anulación");
//        }

        limpiar(true, "SI");
    }

    public void anularPedido(String nota, String pedido, String base) {

        if (!instancias.getSql().modificarPedidoFechaAnulacion(metodos.fechaConsulta(metodosGenerales.fecha()), instancias.getUsuario(), pedido,
                nota, true, (String) instancias.getSql().getNumConsecutivo("ANULA")[0])) {
            metodos.msgError(null, "Hubo un problema al agregar la fecha de la anulación");
            return;
        }

        for (int i = 0; i < tblProductos.getRowCount(); i++) {

            ndProducto producto = instancias.getSql().getDatosProducto(tblProductos.getValueAt(i, 32).toString(), base);

            if (!producto.getUsuario().equals("ADMIN")) {

                String preparacion = "";
                try {
                    preparacion = tblProductos.getValueAt(i, 21).toString();
                } catch (Exception e) {
                }

                if (preparacion.equals("")) {
                    Object[][] productos = instancias.getSql().getCantidadesDiscosteo(tblProductos.getValueAt(i, 32).toString());
                    for (int k = 0; k < productos.length; k++) {
                     //se valida para que descuente solo los diseños, si es COSTEO es armado 
                     if(!productos[k][2].toString().equals("COSTEO")){ 
                        String codigo = productos[k][0].toString();
                        String cant = productos[k][1].toString();
                        ndProducto insumo = instancias.getSql().getDatosProducto(codigo, base);

                        double cantidad;
                        double fisicoInventario;

                        try {
                            cantidad = Double.parseDouble(insumo.getPedidos().replace(",", "."));
                        } catch (Exception e) {
                            cantidad = 0;
                        }

                        try {
                            fisicoInventario = Double.parseDouble(insumo.getFisicoInventario().replace(",", "."));
                        } catch (Exception e) {
                            fisicoInventario = 0;
                        }

                        double cantidadTabla;
                        try {
                            cantidadTabla = Double.parseDouble(cant);
                        } catch (Exception e) {
                            cantidadTabla = Double.parseDouble(cant.substring(0, cant.length() - 2));
                        }

                        double total = cantidad - cantidadTabla;
                        fisicoInventario = fisicoInventario + cantidadTabla;

                        String total1 = String.valueOf(df.format(total)).replace(".", ",");
                        String fisicoInventario1 = String.valueOf(df.format(fisicoInventario)).replace(".", ",");
                     
                        instancias.getSql().modificarInventario("pedidos", total1, codigo, base);
                        instancias.getSql().modificarInventario("fisicoInventario", fisicoInventario1, codigo, base);
                      }
                    }
                } else {
                    Map preparaciones = new HashMap();
                    preparaciones = (Map) tblProductos.getValueAt(i, 21);
                    
                    ArrayList<Map> ingredientes = new ArrayList<Map>();
                    ArrayList<Map> adiciones = new ArrayList<Map>();
                    ingredientes = (ArrayList<Map>) preparaciones.get("ingredientes"); 
                    adiciones = (ArrayList<Map>) preparaciones.get("adiciones");
                    
                    if (!ingredientes.isEmpty()) {
                        
                        for (Map ingrediente : ingredientes) {
                            if(ingrediente.get("estado").equals("true")){
                                ndProducto insumo = instancias.getSql().getDatosProducto(ingrediente.get("codigo").toString(), base);

                                double cantidad;
                                double fisicoInventario;

                                try {
                                    cantidad = Double.parseDouble(insumo.getPedidos().replace(",", "."));
                                } catch (Exception e) {
                                    cantidad = 0;
                                }

                                try {
                                    fisicoInventario = Double.parseDouble(insumo.getFisicoInventario().replace(",", "."));
                                } catch (Exception e) {
                                    fisicoInventario = Double.parseDouble(insumo.getInventario().replace(",", "."));
                                }

                                double cantidadTabla;
                                try {
                                    cantidadTabla = Double.parseDouble(ingrediente.get("cantidad").toString());
                                } catch (Exception e) {
                                    cantidadTabla = Double.parseDouble(ingrediente.get("codigo").toString().substring(0, ingrediente.get("cantidad").toString().length() - 2));
                                }

                                double total = cantidad - cantidadTabla;
                                fisicoInventario = fisicoInventario + cantidadTabla;

                                String total1 = String.valueOf(df.format(total)).replace(".", ",");
                                String fisicoInventario1 = String.valueOf(df.format(fisicoInventario)).replace(".", ",");
                         
                                instancias.getSql().modificarInventario("pedidos", total1, ingrediente.get("codigo").toString(), base);
                                instancias.getSql().modificarInventario("fisicoInventario", fisicoInventario1, ingrediente.get("codigo").toString(), base);    
                            }
                        }
                    }
                }
            }

            double cantidad;
            double fisicoInventario;

            try {
                cantidad = Double.parseDouble(producto.getPedidos().replace(",", "."));
            } catch (Exception e) {
                cantidad = 0;
            }

            try {
                fisicoInventario = Double.parseDouble(producto.getFisicoInventario().replace(",", "."));
            } catch (Exception e) {
                fisicoInventario = Double.parseDouble(producto.getInventario().replace(",", "."));
            }

            double cantidadTabla = Double.parseDouble(tblProductos.getValueAt(i, 13).toString().replace(",", "."));
            double total = cantidad - cantidadTabla;
            fisicoInventario = fisicoInventario + cantidadTabla;

            String total1 = String.valueOf(df.format(total)).replace(".", ",");
            String fisicoInventario1 = String.valueOf(df.format(fisicoInventario)).replace(".", ",");
           
            instancias.getSql().modificarInventario("pedidos", total1, tblProductos.getValueAt(i, 32).toString(), base);
            instancias.getSql().modificarInventario("fisicoInventario", fisicoInventario1, tblProductos.getValueAt(i, 32).toString(), base);

            String idProd = "";
            try {
                idProd = tblProductos.getValueAt(i, 29).toString();
            } catch (Exception e) {
            }

            String tipo = "";
            if (producto.getTipoProducto() != null) {
                if (producto.getTipoProducto().equals("IMEI")) {
                    tipo = "Imei";
                } else if (producto.getTipoProducto().equals("Fecha/Lote")) {
                    tipo = "Fecha/Lote";
                } else if (producto.getTipoProducto().equals("Color")) {
                    tipo = "Color";
                } else if (producto.getTipoProducto().equals("Serial")) {
                    tipo = "Serial";
                } else if (producto.getTipoProducto().equals("Talla")) {
                    tipo = "Talla";
                } else if (producto.getTipoProducto().equals("ColorTalla")) {
                    tipo = "ColorTalla";
                } else if (producto.getTipoProducto().equals("SerialColor")) {
                    tipo = "SerialColor";
                } else {
                    tipo = "";
                }
            }

            if (!idProd.equals("")) {
                if (tipo.equals("Imei") || tipo.equals("Serial") || tipo.equals("SerialColor")) {
                    instancias.getSql().modificarEstadoDetalleProductos(idProd, "DISPONIBLE");
                } else {
                    Double cantidadActual = Double.parseDouble(instancias.getSql().getCantidadProductos(idProd).replace(",", "."));
                    cantidadActual = cantidadActual + cantidadTabla;
                    String cantidadFinal = String.valueOf(df.format(cantidadActual)).replace(".", ",");
                    instancias.getSql().modificarCantidadesDetalleProductos(idProd, cantidadFinal);
                }

            }
        }

        metodos.msgExito(null, "Pedido anulado con éxito");
//        if (!instancias.getSql().aumentarConsecutivo("ANULA", Integer.parseInt((String) instancias.getSql().getNumConsecutivo("ANULA")[0]) + 1)) {
//            metodos.msgError(null, "Error al guardar en el consecutivo de la anulación");
//        }

        limpiar(true, "SI");
    }
    String codigoMesa="";
    public void cargarCongelada(String mesa, String tipo, String titulo) {
        codigoMesa=mesa;
        tapControl.setSelectedIndex(0);

        cmbCargar.setVisible(false);
        txtCargar.setVisible(false);

        btnReImprimir.setVisible(false);
        pnlCambiarMesa.setVisible(false);

        if (tipo.equals("MESA")) {
            lbFacturaNo.setText("MESA No.");
            lbVendedor.setText("Vendedor:");
            txtDiasPlazo.setEnabled(true);
        } else if (tipo.equals("CONG")) {
            lbFacturaNo.setText("CONGELADA No.");
            lbVendedor.setText("Vendedor:");
            txtDiasPlazo.setEnabled(true);
        } else {
            lbFacturaNo.setText("DOMICILIO No.");
            lbVendedor.setText("Domiciliario");
            txtDiasPlazo.setText("1");
            txtDiasPlazo.setEnabled(false);
        }

        lbNoFactura.setText("");
        limpiar(true, "");
        mesaCongelada = true;
        txtBodega.setEnabled(true);

        if (tipo.equals("MESA")) {
            lbTitulo.setText(titulo);
            instancias.setTitulo(titulo);
        } else if (tipo.equals("CONG")) {
            lbTitulo.setText(titulo);
            instancias.setTitulo(titulo.replace("                    ", ""));
        } else {
            lbTitulo.setText("DOMICILIO");
            instancias.setTitulo("DOMICILIO");
        }

        if (instancias.getTipoImpresion().equals("Pos")) {
            rdPos.setSelected(true);
        }

        instancias.getSql().cambiarEstadoMesa(instancias.getTitulo(), "OCUPADO");

        if (!mesa.equals("")) {
//            btnGuardar.setVisible(false);
//            btnGuardar1.setVisible(false);

            btnGuardar.setText("FACTURAR");
            btnActualizar.setVisible(true);
            btnActualizar.setEnabled(true);

            if (lbTitulo.getText().contains("Mesa.")) {
                pnlCambiarMesa.setVisible(true);
            }

            btnReImprimir.setEnabled(true);
            btnReImprimir.setVisible(true);

            ndCongelada congelada = instancias.getSql().getDatosCongelada1(mesa);

            txtBodega.setText(congelada.getBodega());
            txtBodega.setEnabled(false);

            txtNit.setText(congelada.getCliente());
            cargarCliente(congelada.getCliente());
            cmbVendedor.setSelectedItem(congelada.getVendedor());
            txtTurno.setText(congelada.getTurno());

            Object[][] mat = instancias.getSql().getProductosVenta(congelada.getIdFactura());
            consecutivoMesa = congelada.getIdFactura().replace("CONGELADA-", "");
            productosMovimientos = new Object[mat.length];
            cargandoCongelada = true;
             
            int i = 0;
            for (Object[] reg : mat) {
                cargarProducto((String) reg[0], big.setMonedaExacta(big.getBigDecimal(reg[4])) + "", Integer.parseInt((String) reg[3]),
                        (String) reg[12], "", (String) reg[13], false, "", "", "", "", "",(String) reg[17]);//reg[17]
                tblProductos.setValueAt(big.setMonedaExacta(big.getBigDecimal(reg[4])), i, 3);
                tblProductos.setValueAt(big.setMonedaExacta(big.getBigDecimal(reg[5])), i, 2);
                tblProductos.setValueAt(reg[10], i, 31);
                tblProductos.setValueAt(big.setMonedaExacta(big.getBigDecimal(reg[6])), i, 6);
                tblProductos.setValueAt(reg[11], i, 5);
                tblProductos.setValueAt(reg[17], i, 38);

                tblProductos.setValueAt(reg[15].toString().replace(".", ","), i, 23);
                tblProductos.setValueAt(big.setMonedaExacta(big.getBigDecimal(reg[14].toString())), i, 8);
                Map infDetalleProductosPrincipales = new HashMap();
//                infDetalleProductosPrincipales = (Map) reg[7];
                infDetalleProductosPrincipales = cargarPreparada(congelada.getIdFactura().toString(), reg[17].toString(), reg[0].toString());
                tblProductos.setValueAt(infDetalleProductosPrincipales, i, 21);
                productosMovimientos[i] = reg[0];
                calcularTabla(i, false);
                i++;

            }

            String baseUtilizada = obtenerBase();
            for (int j = 0; j < tblProductos.getRowCount(); j++) {
                tblProductos.setValueAt("PLATO-" + j, j, 30);

                ndProducto nodoProd = instancias.getSql().getDatosProducto(tblProductos.getValueAt(j, 32).toString(), baseUtilizada);
//se comento porque modificaba el inventario y lo dañaba
//                if (nodoProd.getUsuario().equals("FACTURA")) {
//                    String preparacion = "";
//                    try {
//                        preparacion = tblProductos.getValueAt(j, 21).toString();
//                    } catch (Exception e) {
//                    }
//
//                    if (!preparacion.equals("")) {
//
//                        String opciones2[];
//                        String opciones = preparacion.split("; ")[3];
//                        opciones2 = opciones.split(", ");
//                        for (int k = 0; k < opciones2.length; k++) {
//
//                            String principal = opciones2[k].split("/")[0];
//                            String codigo = opciones2[k].split("/")[1];
//                            String cant = opciones2[k].split("/")[2];
//                            String estado = opciones2[k].split("/")[3];
//
//                            if (estado.equals(" true")) {
//                                ndProducto nodo1 = instancias.getSql().getDatosProducto(codigo, baseUtilizada);
//
//                                if (nodo1.getGrupo() != null) {
//                                    if (!nodo1.getGrupo().equals("GRP-02")) {
//                                        Double fisicoInventario = Double.parseDouble(nodo1.getFisicoInventario().replace(",", "."));
//                                        Double congeladas = Double.parseDouble(nodo1.getCongelada().replace(",", "."));
//
//                                        fisicoInventario = fisicoInventario + Double.parseDouble(cant.replace(",", "."));
//                                        congeladas = congeladas - Double.parseDouble(cant.replace(",", "."));
//
//                                        String fisicoInventario1 = String.valueOf(df.format(fisicoInventario)).replace(".", ",");
//                                        String congeladas1 = String.valueOf(df.format(congeladas)).replace(".", ",");
//                                  
//                                        instancias.getSql().modificarInventario("fisicoInventario", fisicoInventario1, codigo, baseUtilizada);
//                                        instancias.getSql().modificarInventario("congelada", congeladas1, codigo, baseUtilizada);
//                                    }
//                                }
//                            }
//                        }
//                    } else {
//                        Object[][] productos = instancias.getSql().getCantidadesDiscosteo(tblProductos.getValueAt(j, 32).toString());
//                        for (int k = 0; k < productos.length; k++) {
//
//                            String codigo = productos[k][0].toString();
//                            String cant = productos[k][1].toString();
//
//                            ndProducto insumo = instancias.getSql().getDatosProducto(codigo, baseUtilizada);
//
//                            Double fisicoInventario = Double.parseDouble(insumo.getFisicoInventario().replace(",", "."));
//                            Double congeladas = Double.parseDouble(insumo.getCongelada().replace(",", "."));
//
//                            fisicoInventario = fisicoInventario + Double.parseDouble(cant.replace(",", "."));
//                            congeladas = congeladas - Double.parseDouble(cant.replace(",", "."));
//
//                            String fisicoInventario1 = String.valueOf(df.format(fisicoInventario)).replace(".", ",");
//                            String congeladas1 = String.valueOf(df.format(congeladas)).replace(".", ",");
//            
//                            instancias.getSql().modificarInventario("fisicoInventario", fisicoInventario1, codigo, baseUtilizada);
//                            instancias.getSql().modificarInventario("congelada", congeladas1, codigo, baseUtilizada);
//                        }
//                    }
//                } else {
                     //se comento porque modificaba el inventario y lo dañaba
                    
//                    Double fisicoInventario = Double.parseDouble(nodoProd.getFisicoInventario().replace(",", "."));
//                    Double congeladas = Double.parseDouble(nodoProd.getCongelada().replace(",", "."));
//
//                    fisicoInventario = fisicoInventario + Double.parseDouble(tblProductos.getValueAt(j, 13).toString().replace(",", "."));
//                    congeladas = congeladas - Double.parseDouble(tblProductos.getValueAt(j, 13).toString().replace(",", "."));
//
//                    String fisicoInventario1 = String.valueOf(df.format(fisicoInventario)).replace(".", ",");
//                    String congeladas1 = String.valueOf(df.format(congeladas)).replace(".", ",");                     
//                    instancias.getSql().modificarInventario("fisicoInventario", fisicoInventario1, tblProductos.getValueAt(j, 32).toString(), baseUtilizada);
//                    instancias.getSql().modificarInventario("congelada", congeladas1, tblProductos.getValueAt(j, 32).toString(), baseUtilizada);
//
//                    tblInventario.setValueAt(big.setNumero(big.getMoneda(fisicoInventario1)), j, 1);
//
//                    BigDecimal num1 = big.getMoneda(tblInventario.getValueAt(j, 1).toString());
//                    BigDecimal num2 = big.getBigDecimal(tblProductos.getValueAt(j, 3).toString().replace(",", "."));
//                    BigDecimal total = num1.subtract(num2);
//                    tblInventario.setValueAt(big.setNumero(total), j, 2);
//                }

                // DESCONTAR DEL INVENTARIO DETALLADO //
                if (instancias.getConfiguraciones().isProductosSerial()) {
                    String cod = "";
                    try {
                        cod = tblProductos.getValueAt(j, 29).toString();
                    } catch (Exception e) {
                    }

                    if (!cod.equals("")) {
                        String tipoProd = "";

                        if (nodoProd.getTipoProducto() != null) {
                            if (nodoProd.getTipoProducto().equals("IMEI")) {
                                tipoProd = "Imei";
                            } else if (nodoProd.getTipoProducto().equals("Fecha/Lote")) {
                                tipoProd = "Fecha/Lote";
                            } else if (nodoProd.getTipoProducto().equals("Color")) {
                                tipoProd = "Color";
                            } else if (nodoProd.getTipoProducto().equals("Serial")) {
                                tipoProd = "Serial";
                            } else if (nodoProd.getTipoProducto().equals("Talla")) {
                                tipoProd = "Talla";
                            } else if (nodoProd.getTipoProducto().equals("ColorTalla")) {
                                tipoProd = "ColorTalla";
                            } else if (nodoProd.getTipoProducto().equals("SerialColor")) {
                                tipoProd = "SerialColor";
                            } else {
                                tipoProd = "";
                            }
                        }

                        if (tipoProd.equals("Imei") || tipoProd.equals("Serial") || tipoProd.equals("SerialColor")) {
                            instancias.getSql().modificarEstadoDetalleProductos(cod, "DISPONIBLE");
                        } else {
                            Double cantidadActual = Double.parseDouble(instancias.getSql().getCantidadProductos(cod).replace(",", "."));
                            cantidadActual = cantidadActual + Double.parseDouble(tblProductos.getValueAt(j, 13).toString().replace(",", "."));
                            String cantidadFinal = String.valueOf(df.format(cantidadActual)).replace(".", ",");
                            instancias.getSql().modificarCantidadesDetalleProductos(cod, cantidadFinal);
                        }
                    }
                }
                // FIN DE DESCONTAR DEL INVENTARIO SEPARADO // 
            }
            //borra la adicion
            borrarAdiciones();
            lbNoFactura.setText(congelada.getIdFactura().replace("CONGELADA-", ""));
            txtObservaciones.setText(congelada.getObservacion());
            cargandoCongelada = false;

            if (!instancias.getUsuario().equals("ADMIN")) {
                if (!(Boolean) datos[107]) {
                    Object[][] vendedores = instancias.getSql().getVendedores1();

                    for (int ix = 0; ix < vendedores.length; ix++) {
                        String asociado = "";
                        try {
                            asociado = vendedores[ix][1].toString();
                        } catch (Exception e) {
                        }

                        if (instancias.getUsuario().equals(asociado)) {
                            btnGuardar.setVisible(false);
                            btnGuardar1.setVisible(false);
                        }
                    }
                }
            }

        } else {
            btnGuardar.setEnabled(true);
            btnGuardar.setVisible(true);
            btnGuardar.setText("GUARDAR");

            if (instancias.getConfiguraciones().isRestaurante()) {
                if (tipo.equals("DOMICILIO")) {
                    btnGuardar1.setVisible(true);
                    btnGuardar1.setText("GUARDAR/IMPRIMIR");
                } else {
                    btnGuardar1.setVisible(false);
                }
            }

            btnReImprimir.setVisible(false);
            btnActualizar.setVisible(false);
        }
    }
    
    public Map cargarPreparada(String congelada, String idCongelada, String codigo){
        ArrayList<Map<String, String>> preparadas = new ArrayList<>();
      
        preparadas = instancias.getSql().getProductosPreparacion(congelada, idCongelada, codigo);
      
        Map infDetalleProductosPrincipales = new HashMap();
        
        ArrayList<Map> infAderezos = new ArrayList<Map>();
        ArrayList<Map> infIngredientes = new ArrayList<Map>();
        ArrayList<Map> infAdiciones = new ArrayList<Map>();
        for (Map preparada : preparadas) {
            if(preparada.get("tipo").equals("principal")){
                    Map infIngrediente = new HashMap();
                    infIngrediente.put("tipo",preparada.get("tipo"));
                    infIngrediente.put("codigo",preparada.get("codigo"));
                    infIngrediente.put("descripcion",preparada.get("descripcion"));
                    infIngrediente.put("estado",preparada.get("estado"));
                    infIngrediente.put("cantidad",preparada.get("cantidad"));
                    infIngrediente.put("posicion",preparada.get("posicion"));
                    infIngrediente.put("producto",preparada.get("principal"));               
                    infIngredientes.add(infIngrediente);
            }else if(preparada.get("tipo").equals("adiciones")){
                    Map infAdicion = new HashMap(); 
                    infAdicion.put("tipo",preparada.get("tipo"));
                    infAdicion.put("codigo",preparada.get("codigo"));
                    infAdicion.put("descripcion",preparada.get("descripcion"));
                    infAdicion.put("estado",preparada.get("estado"));
                    infAdicion.put("cantidad",preparada.get("cantidad"));
                    infAdicion.put("posicion",preparada.get("posicion"));
                    infAdicion.put("producto",preparada.get("principal"));               
                    infAdiciones.add(infAdicion);            
            }else if(preparada.get("tipo").equals("aderezos")){        
                    Map infAderezo = new HashMap();
                    infAderezo.put("tipo",preparada.get("tipo"));
                    infAderezo.put("codigo",preparada.get("codigo"));
                    infAderezo.put("descripcion",preparada.get("descripcion"));
                    infAderezo.put("estado",preparada.get("estado"));
                    infAderezo.put("cantidad",preparada.get("cantidad"));
                    infAderezo.put("posicion",preparada.get("posicion"));
                    infAderezo.put("producto",preparada.get("principal"));               
                    infAderezos.add(infAderezo);
            }else if(preparada.get("tipo").equals("observaciones")){
               infDetalleProductosPrincipales.put("observaciones",preparada.get("descripcion"));
               infDetalleProductosPrincipales.put("producto",preparada.get("principal"));
            }
        }
        infDetalleProductosPrincipales.put("ingredientes",infIngredientes);
        infDetalleProductosPrincipales.put("adiciones",infAdiciones);
        infDetalleProductosPrincipales.put("aderezos",infAderezos);
        return infDetalleProductosPrincipales;
    }
  
    public boolean isPlu() {
        return plu;
    }

    public void setPlu(boolean plu) {
        this.plu = plu;
    }

    public void setCantDias(int dias) {
        cantDias = dias;
    }

    BigDecimal NC = null;

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        popBorrar = new javax.swing.JMenuItem();
        buttonGroup1 = new javax.swing.ButtonGroup();
        grupoTipoFactura = new javax.swing.ButtonGroup();
        grupoTipoImpresion = new javax.swing.ButtonGroup();
        grpCopago = new javax.swing.ButtonGroup();
        jScrollPane2 = new javax.swing.JScrollPane();
        pnlFormulario = new javax.swing.JPanel();
        pnlCredito = new javax.swing.JPanel();
        lbVendedor8 = new javax.swing.JLabel();
        cmbTipoPlazo = new javax.swing.JComboBox();
        lbTelefono3 = new javax.swing.JLabel();
        txtCuotas = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblCuotas = new javax.swing.JTable();
        txtInteres = new javax.swing.JTextField();
        lbDireccion3 = new javax.swing.JLabel();
        txtTotalIntereses = new javax.swing.JTextField();
        lbDireccion4 = new javax.swing.JLabel();
        txtValorCredito = new javax.swing.JTextField();
        lbDireccion5 = new javax.swing.JLabel();
        dtFechaDesenvolso = new datechooser.beans.DateChooserCombo();
        lbCelular1 = new javax.swing.JLabel();
        lbDireccion6 = new javax.swing.JLabel();
        txtCuotaInicial = new javax.swing.JTextField();
        txtTotalCredito = new javax.swing.JTextField();
        lbDireccion7 = new javax.swing.JLabel();
        lbDireccion8 = new javax.swing.JLabel();
        txtValorVenta = new javax.swing.JTextField();
        pnlInformacion = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        lbNit = new javax.swing.JLabel();
        txtNit = new javax.swing.JTextField();
        btnBuscTerceros = new javax.swing.JButton();
        lbNit1 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        btnBuscTerceros1 = new javax.swing.JButton();
        cmbVendedor = new javax.swing.JComboBox();
        lbVendedor = new javax.swing.JLabel();
        lbTipoOperacion = new javax.swing.JLabel();
        cmbTipoOperacion = new javax.swing.JComboBox();
        pnlCambiarMesa = new javax.swing.JPanel();
        lbCambiarMesa = new javax.swing.JLabel();
        btnCambiarMesa = new javax.swing.JButton();
        lbCupo = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        lbFacturaNo = new javax.swing.JTextField();
        lbNoFactura = new javax.swing.JTextField();
        lbDiasPlazo = new javax.swing.JLabel();
        txtDiasPlazo = new javax.swing.JTextField();
        chkSisteCredito = new javax.swing.JCheckBox();
        txtTurno = new javax.swing.JTextField();
        lbOtroConsecutivo = new javax.swing.JTextField();
        lbFechaVencimiento = new javax.swing.JLabel();
        txtVencimiento = new javax.swing.JTextField();
        lbModeloContable = new javax.swing.JTextField();
        txtModeloContable = new javax.swing.JTextField();
        btnPendientes = new javax.swing.JButton();
        pnlComprobante = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        tblComprobantes = new javax.swing.JTable();
        btnCambioMoneda = new javax.swing.JButton();
        jLMoneda = new javax.swing.JLabel();
        tapControl = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        scrProductos1 = new javax.swing.JScrollPane();
        tblProductos = new javax.swing.JTable();
        lbProducto = new javax.swing.JLabel();
        txtCodProducto = new javax.swing.JTextField();
        btnBusProd = new javax.swing.JButton();
        scrInventario = new javax.swing.JScrollPane();
        tblInventario = new javax.swing.JTable();
        lbProducto1 = new javax.swing.JLabel();
        txtCant = new javax.swing.JTextField();
        txtPorcentaje = new javax.swing.JTextField();
        lbVendedor1 = new javax.swing.JLabel();
        lbBodega = new javax.swing.JLabel();
        txtBodega = new javax.swing.JTextField();
        txtCargar = new javax.swing.JTextField();
        cmbCargar = new javax.swing.JComboBox();
        pnlVisor = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblImagenes = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        lbNombre9 = new javax.swing.JLabel();
        txtPlaca = new javax.swing.JTextField();
        lbNombre10 = new javax.swing.JLabel();
        lbNombre5 = new javax.swing.JLabel();
        txtMarca = new javax.swing.JTextField();
        lbNombre6 = new javax.swing.JLabel();
        lbNombre7 = new javax.swing.JLabel();
        txtModelo = new javax.swing.JTextField();
        txtKm = new javax.swing.JTextField();
        lbNombre8 = new javax.swing.JLabel();
        txtMotor = new javax.swing.JTextField();
        txtNumChasis = new javax.swing.JTextField();
        lbNombre11 = new javax.swing.JLabel();
        lbNombre13 = new javax.swing.JLabel();
        txtColor = new javax.swing.JTextField();
        lbNombre14 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtProblema = new javax.swing.JTextArea();
        btnNuevaParte = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblArticulos = new javax.swing.JTable();
        btnNuevaParte1 = new javax.swing.JButton();
        txtTipoVehiculo = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        lbVendedor10 = new javax.swing.JLabel();
        dtHasta = new datechooser.beans.DateChooserCombo();
        chkSinEstablecer = new javax.swing.JCheckBox();
        dtDesde = new datechooser.beans.DateChooserCombo();
        lbVendedor9 = new javax.swing.JLabel();
        lbVendedor7 = new javax.swing.JLabel();
        cmbPeriodicidad = new javax.swing.JComboBox();
        lbVendedor11 = new javax.swing.JLabel();
        lbVendedor12 = new javax.swing.JLabel();
        txtCantIncremento = new javax.swing.JTextField();
        txtCantFacturados = new javax.swing.JTextField();
        lbVendedor13 = new javax.swing.JLabel();
        txtUltimaFacturaFecha = new javax.swing.JTextField();
        pnlOcultar = new javax.swing.JPanel();
        txtIdSistema = new javax.swing.JTextField();
        cmbListas = new javax.swing.JComboBox();
        txtPlaca1 = new javax.swing.JTextField();
        txtCopago = new javax.swing.JTextField();
        lbTitulo = new javax.swing.JLabel();
        txtFechaFactura = new javax.swing.JTextField();
        pnlCuentaCobro = new javax.swing.JPanel();
        cmbMes = new javax.swing.JComboBox();
        txtCupo = new javax.swing.JTextField();
        txtCartera = new javax.swing.JTextField();
        pnlGarantia = new javax.swing.JPanel();
        txtGarantiaSeñal = new javax.swing.JTextField();
        txtGarantiaFuncionamiento = new javax.swing.JTextField();
        cmbSeñal = new javax.swing.JComboBox();
        cmbFuncionamiento = new javax.swing.JComboBox();
        cmbListaPrecio = new javax.swing.JComboBox();
        rdTipoNormal = new javax.swing.JRadioButton();
        rdTipoCopago = new javax.swing.JRadioButton();
        txtDescGeneral = new javax.swing.JTextField();
        btnVolver = new javax.swing.JLabel();
        btnVolver1 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        btnLimpiar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnGuardar1 = new javax.swing.JButton();
        btnReImprimir = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        rdMediaCarta = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        rdCarta = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        rdPos = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtObservaciones = new javax.swing.JTextArea();
        lbObservaciones = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        txtTotal = new javax.swing.JLabel();
        lbSubtotal = new javax.swing.JLabel();
        txtSubTotal = new javax.swing.JLabel();
        txtIva = new javax.swing.JLabel();
        txtTotalIva = new javax.swing.JLabel();
        lbTotalDescuento = new javax.swing.JLabel();
        txtTotalDescuentos = new javax.swing.JLabel();
        lbImpuestoBolsa = new javax.swing.JLabel();
        lbImpoconsumo = new javax.swing.JLabel();
        txtImpuesto = new javax.swing.JLabel();
        txtTotalImpoconsumo = new javax.swing.JLabel();
        cmbRtf = new javax.swing.JComboBox();
        txtRtf = new javax.swing.JLabel();
        chkReteIva = new javax.swing.JCheckBox();
        txtRiva = new javax.swing.JLabel();
        lbTotalDescuento1 = new javax.swing.JLabel();
        txtCantUnidades = new javax.swing.JLabel();
        lbTotalDescuento2 = new javax.swing.JLabel();
        txtCantProductos = new javax.swing.JLabel();
        expFE = new datechooser.beans.DateChooserCombo();
        jLabel1 = new javax.swing.JLabel();
        lbCar = new javax.swing.JLabel();
        btnOcultarInfoCliente = new javax.swing.JButton();

        popBorrar.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        popBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/eliminar-cancelar-icono-4935-16.png"))); // NOI18N
        popBorrar.setText("Borrar");
        popBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popBorrarActionPerformed(evt);
            }
        });
        jPopupMenu1.add(popBorrar);

        setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane2.setBorder(null);

        pnlFormulario.setBackground(new java.awt.Color(255, 255, 255));

        pnlCredito.setBackground(new java.awt.Color(255, 255, 255));
        pnlCredito.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Información del crédito", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 0, 14))); // NOI18N

        lbVendedor8.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lbVendedor8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbVendedor8.setText("Tipo de plazo:");

        cmbTipoPlazo.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        cmbTipoPlazo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " ", "Días", "Semanal", "Quincenal", "Mensual" }));
        cmbTipoPlazo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbTipoPlazoItemStateChanged(evt);
            }
        });
        cmbTipoPlazo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cmbTipoPlazoKeyReleased(evt);
            }
        });

        lbTelefono3.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        lbTelefono3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbTelefono3.setText("Num. Cuotas: *");

        txtCuotas.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtCuotas.setText("0");
        txtCuotas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCuotasKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCuotasKeyTyped(evt);
            }
        });

        tblCuotas.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        tblCuotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.Cuota", "Fecha", "Abono a capital", "Abono a intereses", "Total", "Saldo", "Saldo Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCuotas.setRowHeight(24);
        jScrollPane3.setViewportView(tblCuotas);

        txtInteres.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtInteres.setText("0");
        txtInteres.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtInteresKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtInteresKeyTyped(evt);
            }
        });

        lbDireccion3.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        lbDireccion3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbDireccion3.setText("Porcentaje interés: *");

        txtTotalIntereses.setEditable(false);
        txtTotalIntereses.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtTotalIntereses.setName("Dirección"); // NOI18N
        txtTotalIntereses.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTotalInteresesKeyReleased(evt);
            }
        });

        lbDireccion4.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lbDireccion4.setText("Total intereses:");

        txtValorCredito.setEditable(false);
        txtValorCredito.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtValorCredito.setName("Dirección"); // NOI18N
        txtValorCredito.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtValorCreditoKeyReleased(evt);
            }
        });

        lbDireccion5.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lbDireccion5.setText("Valor Credito:");

        dtFechaDesenvolso.setFieldFont(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 12));
        dtFechaDesenvolso.addCommitListener(new datechooser.events.CommitListener() {
            public void onCommit(datechooser.events.CommitEvent evt) {
                dtFechaDesenvolsoOnCommit(evt);
            }
        });

        lbCelular1.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lbCelular1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbCelular1.setText("Primer Pago: *");

        lbDireccion6.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lbDireccion6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbDireccion6.setText("Cuota Inicial:");

        txtCuotaInicial.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtCuotaInicial.setText("0");
        txtCuotaInicial.setName("Dirección"); // NOI18N
        txtCuotaInicial.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCuotaInicialKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCuotaInicialKeyTyped(evt);
            }
        });

        txtTotalCredito.setEditable(false);
        txtTotalCredito.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtTotalCredito.setName("Dirección"); // NOI18N
        txtTotalCredito.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTotalCreditoKeyReleased(evt);
            }
        });

        lbDireccion7.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lbDireccion7.setText("Total Credito:");

        lbDireccion8.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lbDireccion8.setText("Valor Venta:");
        lbDireccion8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbDireccion8MouseClicked(evt);
            }
        });

        txtValorVenta.setEditable(false);
        txtValorVenta.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtValorVenta.setText("0");
        txtValorVenta.setName("Dirección"); // NOI18N
        txtValorVenta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtValorVentaKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout pnlCreditoLayout = new javax.swing.GroupLayout(pnlCredito);
        pnlCredito.setLayout(pnlCreditoLayout);
        pnlCreditoLayout.setHorizontalGroup(
            pnlCreditoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCreditoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCreditoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3)
                    .addGroup(pnlCreditoLayout.createSequentialGroup()
                        .addGroup(pnlCreditoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCreditoLayout.createSequentialGroup()
                                .addComponent(lbDireccion8, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addGroup(pnlCreditoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtValorVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCuotaInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(253, 253, 253)
                                .addGroup(pnlCreditoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlCreditoLayout.createSequentialGroup()
                                        .addComponent(lbTelefono3, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtCuotas, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(72, 72, 72)
                                        .addGroup(pnlCreditoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lbDireccion7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lbDireccion3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(pnlCreditoLayout.createSequentialGroup()
                                        .addComponent(lbDireccion4, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtTotalIntereses, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(pnlCreditoLayout.createSequentialGroup()
                                .addComponent(lbDireccion6, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(116, 116, 116)
                                .addGroup(pnlCreditoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(pnlCreditoLayout.createSequentialGroup()
                                        .addComponent(lbDireccion5, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtValorCredito, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlCreditoLayout.createSequentialGroup()
                                        .addComponent(lbVendedor8, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbTipoPlazo, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCreditoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtInteres, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTotalCredito, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(pnlCreditoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dtFechaDesenvolso, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(lbCelular1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlCreditoLayout.setVerticalGroup(
            pnlCreditoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCreditoLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(pnlCreditoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbDireccion6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCuotaInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbVendedor8, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbTipoPlazo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbTelefono3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCuotas, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbDireccion3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtInteres, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbCelular1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(pnlCreditoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCreditoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbDireccion8, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtValorVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbDireccion5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtValorCredito, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbDireccion4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtTotalIntereses, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbDireccion7, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtTotalCredito, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dtFechaDesenvolso, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );

        pnlInformacion.setBackground(new java.awt.Color(255, 255, 255));

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));

        lbNit.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        lbNit.setText("CC/Nit");
        lbNit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbNitMouseClicked(evt);
            }
        });
        lbNit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lbNitKeyReleased(evt);
            }
        });

        txtNit.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        txtNit.setName("CC/NIT"); // NOI18N
        txtNit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNitActionPerformed(evt);
            }
        });
        txtNit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNitKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNitKeyTyped(evt);
            }
        });

        btnBuscTerceros.setBackground(new java.awt.Color(204, 204, 204));
        btnBuscTerceros.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        btnBuscTerceros.setForeground(new java.awt.Color(255, 255, 255));
        btnBuscTerceros.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/buscar1.png"))); // NOI18N
        btnBuscTerceros.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btnBuscTerceros.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBuscTerceros.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnBuscTerceros.setMargin(new java.awt.Insets(2, 7, 2, 5));
        btnBuscTerceros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscTercerosActionPerformed(evt);
            }
        });

        lbNit1.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        lbNit1.setText("Razón social");
        lbNit1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lbNit1KeyReleased(evt);
            }
        });

        txtNombre.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        txtNombre.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtNombre.setEnabled(false);
        txtNombre.setName("Cliente"); // NOI18N
        txtNombre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtNombreMouseClicked(evt);
            }
        });

        btnBuscTerceros1.setBackground(new java.awt.Color(255, 255, 255));
        btnBuscTerceros1.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        btnBuscTerceros1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/buscarInfo.png"))); // NOI18N
        btnBuscTerceros1.setBorder(null);
        btnBuscTerceros1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBuscTerceros1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnBuscTerceros1.setMargin(new java.awt.Insets(2, 7, 2, 5));
        btnBuscTerceros1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscTerceros1ActionPerformed(evt);
            }
        });

        cmbVendedor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmbVendedorMouseClicked(evt);
            }
        });

        lbVendedor.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        lbVendedor.setText("Vendedor");

        lbTipoOperacion.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        lbTipoOperacion.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbTipoOperacion.setText("Tipo operacion");

        cmbTipoOperacion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cmbTipoOperacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "COMBUSTIBLE", "EMISOR_AUTORETENEDOR", "EXCLUIDOS_Y_EXENTOS", "EXPORTACION", "GENERICA", "GENERICA_PAGO_ANTICIPADO", "GENERICA_PERIODO_FACTURACION", "CONSORCIO", "SERVICIOS_AIU", "ESTANDAR", "MANDATOS", "MANDATOS_BIENES", "MANDATOS_SERVICIOS", "SS-CUFE", "SS-CUDE", "SS-POS", "SS-SNum", "SS-Recaudo", "TRANSPORTE", "CAMBIARIO" }));

        pnlCambiarMesa.setBackground(new java.awt.Color(255, 255, 255));

        lbCambiarMesa.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        lbCambiarMesa.setText("CAMBIAR MESA");

        btnCambiarMesa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/cambiarMesa.png"))); // NOI18N
        btnCambiarMesa.setToolTipText("Ctrl+M");
        btnCambiarMesa.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnCambiarMesa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCambiarMesaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlCambiarMesaLayout = new javax.swing.GroupLayout(pnlCambiarMesa);
        pnlCambiarMesa.setLayout(pnlCambiarMesaLayout);
        pnlCambiarMesaLayout.setHorizontalGroup(
            pnlCambiarMesaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbCambiarMesa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlCambiarMesaLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(btnCambiarMesa, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlCambiarMesaLayout.setVerticalGroup(
            pnlCambiarMesaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCambiarMesaLayout.createSequentialGroup()
                .addComponent(btnCambiarMesa, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(lbCambiarMesa)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lbCupo.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        lbCupo.setText("EL CLIENTE SUPERA EL CUPO DEL CREDITO");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(lbCupo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(42, 42, 42))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(lbNit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(158, 158, 158))
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(txtNit, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBuscTerceros, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbNit1)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)
                        .addComponent(btnBuscTerceros1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbVendedor, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                                .addComponent(lbVendedor)
                                .addGap(116, 116, 116)))
                        .addGap(17, 17, 17)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(cmbTipoOperacion, 0, 1, Short.MAX_VALUE)
                                .addGap(2, 2, 2))
                            .addComponent(lbTipoOperacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlCambiarMesa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNit)
                            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnBuscTerceros1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnBuscTerceros, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbVendedor)
                                    .addComponent(lbTipoOperacion, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, 0)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cmbVendedor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbTipoOperacion, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(pnlCambiarMesa, javax.swing.GroupLayout.PREFERRED_SIZE, 54, Short.MAX_VALUE)))
                    .addComponent(lbNit, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbNit1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(lbCupo, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
        );

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));

        lbFacturaNo.setEditable(false);
        lbFacturaNo.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        lbFacturaNo.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        lbFacturaNo.setText("Factura de venta No.");
        lbFacturaNo.setBorder(null);
        lbFacturaNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lbFacturaNoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lbFacturaNoKeyTyped(evt);
            }
        });

        lbNoFactura.setEditable(false);
        lbNoFactura.setFont(new java.awt.Font("Century Gothic", 1, 22)); // NOI18N
        lbNoFactura.setForeground(new java.awt.Color(255, 0, 0));
        lbNoFactura.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        lbNoFactura.setText("1");
        lbNoFactura.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lbNoFactura.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lbNoFacturaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lbNoFacturaKeyTyped(evt);
            }
        });

        lbDiasPlazo.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        lbDiasPlazo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbDiasPlazo.setText("D. Plazo:");
        lbDiasPlazo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbDiasPlazoMouseClicked(evt);
            }
        });

        txtDiasPlazo.setBackground(new java.awt.Color(255, 204, 204));
        txtDiasPlazo.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        txtDiasPlazo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtDiasPlazo.setText("0");
        txtDiasPlazo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDiasPlazo.setName("Plazo"); // NOI18N
        txtDiasPlazo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDiasPlazoActionPerformed(evt);
            }
        });
        txtDiasPlazo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDiasPlazoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDiasPlazoKeyTyped(evt);
            }
        });

        chkSisteCredito.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        chkSisteCredito.setText("Siste Credito");

        txtTurno.setFont(new java.awt.Font("Century Gothic", 1, 22)); // NOI18N
        txtTurno.setForeground(new java.awt.Color(255, 0, 0));
        txtTurno.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtTurno.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtTurno.setDisabledTextColor(new java.awt.Color(255, 0, 0));
        txtTurno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTurnoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTurnoKeyTyped(evt);
            }
        });

        lbOtroConsecutivo.setEditable(false);
        lbOtroConsecutivo.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        lbOtroConsecutivo.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        lbOtroConsecutivo.setText("Otro Consecutivo:");
        lbOtroConsecutivo.setBorder(null);
        lbOtroConsecutivo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lbOtroConsecutivoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lbOtroConsecutivoKeyTyped(evt);
            }
        });

        lbFechaVencimiento.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        lbFechaVencimiento.setText("F. Vencimiento:");

        txtVencimiento.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        txtVencimiento.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtVencimiento.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtVencimiento.setEnabled(false);
        txtVencimiento.setName("Plazo"); // NOI18N
        txtVencimiento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtVencimientoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtVencimientoKeyTyped(evt);
            }
        });

        lbModeloContable.setEditable(false);
        lbModeloContable.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        lbModeloContable.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        lbModeloContable.setText("Modelo contable:");
        lbModeloContable.setBorder(null);
        lbModeloContable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lbModeloContableKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lbModeloContableKeyTyped(evt);
            }
        });

        txtModeloContable.setFont(new java.awt.Font("Century Gothic", 1, 22)); // NOI18N
        txtModeloContable.setForeground(new java.awt.Color(255, 0, 0));
        txtModeloContable.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtModeloContable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtModeloContable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtModeloContableKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtModeloContableKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbModeloContable)
                    .addComponent(lbFechaVencimiento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(lbDiasPlazo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDiasPlazo, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lbFacturaNo)
                    .addComponent(lbOtroConsecutivo))
                .addGap(12, 12, 12)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtModeloContable, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbNoFactura, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkSisteCredito, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtTurno, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtVencimiento, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbNoFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbFacturaNo))
                .addGap(1, 1, 1)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtModeloContable, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbModeloContable, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtDiasPlazo, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbDiasPlazo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chkSisteCredito, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(1, 1, 1)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtVencimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(lbFechaVencimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)))
                .addGap(1, 1, 1)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtTurno, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbOtroConsecutivo))
                .addGap(1, 1, 1))
        );

        btnPendientes.setBackground(new java.awt.Color(242, 244, 244));
        btnPendientes.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnPendientes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/listado.png"))); // NOI18N
        btnPendientes.setText("COTIZAS PEND");
        btnPendientes.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPendientes.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnPendientes.setMargin(new java.awt.Insets(2, 7, 2, 5));
        btnPendientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPendientesActionPerformed(evt);
            }
        });

        pnlComprobante.setBackground(new java.awt.Color(255, 255, 255));
        pnlComprobante.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblComprobantes.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        tblComprobantes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Comprobante", "", "Resolucion", "fechaFin", "desde", "hasta", "tipo", "prefijo", "conse", "plantilla", "modeloContable"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, false, false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblComprobantes.setRowHeight(25);
        tblComprobantes.getTableHeader().setResizingAllowed(false);
        tblComprobantes.getTableHeader().setReorderingAllowed(false);
        tblComprobantes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblComprobantesMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tblComprobantesMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tblComprobantesMouseExited(evt);
            }
        });
        jScrollPane12.setViewportView(tblComprobantes);
        if (tblComprobantes.getColumnModel().getColumnCount() > 0) {
            tblComprobantes.getColumnModel().getColumn(0).setMinWidth(0);
            tblComprobantes.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblComprobantes.getColumnModel().getColumn(0).setMaxWidth(0);
            tblComprobantes.getColumnModel().getColumn(2).setMinWidth(20);
            tblComprobantes.getColumnModel().getColumn(2).setPreferredWidth(20);
            tblComprobantes.getColumnModel().getColumn(2).setMaxWidth(20);
            tblComprobantes.getColumnModel().getColumn(3).setMinWidth(0);
            tblComprobantes.getColumnModel().getColumn(3).setPreferredWidth(0);
            tblComprobantes.getColumnModel().getColumn(3).setMaxWidth(0);
            tblComprobantes.getColumnModel().getColumn(4).setMinWidth(0);
            tblComprobantes.getColumnModel().getColumn(4).setPreferredWidth(0);
            tblComprobantes.getColumnModel().getColumn(4).setMaxWidth(0);
            tblComprobantes.getColumnModel().getColumn(5).setMinWidth(0);
            tblComprobantes.getColumnModel().getColumn(5).setPreferredWidth(0);
            tblComprobantes.getColumnModel().getColumn(5).setMaxWidth(0);
            tblComprobantes.getColumnModel().getColumn(6).setMinWidth(0);
            tblComprobantes.getColumnModel().getColumn(6).setPreferredWidth(0);
            tblComprobantes.getColumnModel().getColumn(6).setMaxWidth(0);
            tblComprobantes.getColumnModel().getColumn(7).setMinWidth(0);
            tblComprobantes.getColumnModel().getColumn(7).setPreferredWidth(0);
            tblComprobantes.getColumnModel().getColumn(7).setMaxWidth(0);
            tblComprobantes.getColumnModel().getColumn(8).setMinWidth(0);
            tblComprobantes.getColumnModel().getColumn(8).setPreferredWidth(0);
            tblComprobantes.getColumnModel().getColumn(8).setMaxWidth(0);
            tblComprobantes.getColumnModel().getColumn(9).setMinWidth(0);
            tblComprobantes.getColumnModel().getColumn(9).setPreferredWidth(0);
            tblComprobantes.getColumnModel().getColumn(9).setMaxWidth(0);
            tblComprobantes.getColumnModel().getColumn(10).setMinWidth(0);
            tblComprobantes.getColumnModel().getColumn(10).setPreferredWidth(0);
            tblComprobantes.getColumnModel().getColumn(10).setMaxWidth(0);
            tblComprobantes.getColumnModel().getColumn(11).setMinWidth(0);
            tblComprobantes.getColumnModel().getColumn(11).setPreferredWidth(0);
            tblComprobantes.getColumnModel().getColumn(11).setMaxWidth(0);
        }

        pnlComprobante.add(jScrollPane12, new org.netbeans.lib.awtextra.AbsoluteConstraints(36, 5, 293, 94));

        btnCambioMoneda.setBackground(new java.awt.Color(204, 204, 204));
        btnCambioMoneda.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        btnCambioMoneda.setForeground(new java.awt.Color(255, 255, 255));
        btnCambioMoneda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/DOLAR.png"))); // NOI18N
        btnCambioMoneda.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btnCambioMoneda.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCambioMoneda.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnCambioMoneda.setMargin(new java.awt.Insets(2, 7, 2, 5));
        btnCambioMoneda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCambioMonedaActionPerformed(evt);
            }
        });

        jLMoneda.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        jLMoneda.setText("0");

        javax.swing.GroupLayout pnlInformacionLayout = new javax.swing.GroupLayout(pnlInformacion);
        pnlInformacion.setLayout(pnlInformacionLayout);
        pnlInformacionLayout.setHorizontalGroup(
            pnlInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInformacionLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnlInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlInformacionLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlComprobante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(pnlInformacionLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(btnCambioMoneda)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLMoneda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnPendientes, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)))
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlInformacionLayout.setVerticalGroup(
            pnlInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlInformacionLayout.createSequentialGroup()
                .addGroup(pnlInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlInformacionLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlInformacionLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlInformacionLayout.createSequentialGroup()
                        .addGroup(pnlInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnPendientes, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLMoneda, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCambioMoneda, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                        .addComponent(pnlComprobante, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)))
                .addGap(3, 3, 3))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 1, 18))); // NOI18N

        tblProductos.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        tblProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Descripción", "Valor/Unit", "Cant.", "Subtotal", "Desc %", "Desc", "Iva %", "Impo", "Total", "Ubicación", "Referencia", "plu", "cant2", "ponderado", "Utilidad", "Estado", "Copago", "datoGrupo", "Pago Tercero", "Utilidad1", "Orden/Aviso", "Borrar", "Impo %", "Orden", "Aviso", "F. Entrega", "Detalle", "Lote", "IdProd", "paraComanda", "permisoDesc", "idSistema", "Iva", "Grupo", "Estandar", "Medida", "ControlInv", "Idbdcongelada"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false, true, true, false, true, false, false, false, false, false, false, false, false, true, false, true, true, true, false, true, true, true, true, false, true, false, true, true, true, false, true, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        }
    );
    tblProductos.setComponentPopupMenu(jPopupMenu1);
    tblProductos.setMinimumSize(new java.awt.Dimension(105, 203));
    tblProductos.setRowHeight(31);
    tblProductos.getTableHeader().setReorderingAllowed(false);
    tblProductos.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            tblProductosMouseClicked(evt);
        }
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            tblProductosMouseEntered(evt);
        }
    });
    tblProductos.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            tblProductosKeyPressed(evt);
        }
        public void keyReleased(java.awt.event.KeyEvent evt) {
            tblProductosKeyReleased(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            tblProductosKeyTyped(evt);
        }
    });
    scrProductos1.setViewportView(tblProductos);
    if (tblProductos.getColumnModel().getColumnCount() > 0) {
        tblProductos.getColumnModel().getColumn(0).setMinWidth(50);
        tblProductos.getColumnModel().getColumn(0).setPreferredWidth(100);
        tblProductos.getColumnModel().getColumn(0).setMaxWidth(200);
        tblProductos.getColumnModel().getColumn(1).setMinWidth(200);
        tblProductos.getColumnModel().getColumn(2).setMinWidth(80);
        tblProductos.getColumnModel().getColumn(2).setPreferredWidth(100);
        tblProductos.getColumnModel().getColumn(2).setMaxWidth(150);
        tblProductos.getColumnModel().getColumn(3).setMinWidth(35);
        tblProductos.getColumnModel().getColumn(3).setPreferredWidth(70);
        tblProductos.getColumnModel().getColumn(3).setMaxWidth(150);
        tblProductos.getColumnModel().getColumn(4).setMinWidth(80);
        tblProductos.getColumnModel().getColumn(4).setPreferredWidth(100);
        tblProductos.getColumnModel().getColumn(4).setMaxWidth(150);
        tblProductos.getColumnModel().getColumn(5).setMinWidth(50);
        tblProductos.getColumnModel().getColumn(5).setPreferredWidth(50);
        tblProductos.getColumnModel().getColumn(5).setMaxWidth(50);
        tblProductos.getColumnModel().getColumn(6).setMinWidth(100);
        tblProductos.getColumnModel().getColumn(6).setPreferredWidth(100);
        tblProductos.getColumnModel().getColumn(6).setMaxWidth(100);
        tblProductos.getColumnModel().getColumn(7).setMinWidth(35);
        tblProductos.getColumnModel().getColumn(7).setPreferredWidth(35);
        tblProductos.getColumnModel().getColumn(7).setMaxWidth(35);
        tblProductos.getColumnModel().getColumn(8).setMinWidth(80);
        tblProductos.getColumnModel().getColumn(8).setPreferredWidth(100);
        tblProductos.getColumnModel().getColumn(8).setMaxWidth(140);
        tblProductos.getColumnModel().getColumn(9).setMinWidth(80);
        tblProductos.getColumnModel().getColumn(9).setPreferredWidth(100);
        tblProductos.getColumnModel().getColumn(9).setMaxWidth(150);
        tblProductos.getColumnModel().getColumn(10).setMinWidth(50);
        tblProductos.getColumnModel().getColumn(10).setMaxWidth(125);
        tblProductos.getColumnModel().getColumn(11).setMinWidth(0);
        tblProductos.getColumnModel().getColumn(11).setPreferredWidth(0);
        tblProductos.getColumnModel().getColumn(11).setMaxWidth(0);
        tblProductos.getColumnModel().getColumn(12).setMinWidth(0);
        tblProductos.getColumnModel().getColumn(12).setPreferredWidth(0);
        tblProductos.getColumnModel().getColumn(12).setMaxWidth(0);
        tblProductos.getColumnModel().getColumn(13).setMinWidth(0);
        tblProductos.getColumnModel().getColumn(13).setPreferredWidth(0);
        tblProductos.getColumnModel().getColumn(13).setMaxWidth(0);
        tblProductos.getColumnModel().getColumn(14).setMinWidth(0);
        tblProductos.getColumnModel().getColumn(14).setPreferredWidth(0);
        tblProductos.getColumnModel().getColumn(14).setMaxWidth(0);
        tblProductos.getColumnModel().getColumn(15).setMinWidth(0);
        tblProductos.getColumnModel().getColumn(15).setPreferredWidth(0);
        tblProductos.getColumnModel().getColumn(15).setMaxWidth(0);
        tblProductos.getColumnModel().getColumn(16).setMinWidth(0);
        tblProductos.getColumnModel().getColumn(16).setPreferredWidth(0);
        tblProductos.getColumnModel().getColumn(16).setMaxWidth(0);
        tblProductos.getColumnModel().getColumn(17).setMinWidth(150);
        tblProductos.getColumnModel().getColumn(17).setPreferredWidth(150);
        tblProductos.getColumnModel().getColumn(17).setMaxWidth(150);
        tblProductos.getColumnModel().getColumn(18).setMinWidth(0);
        tblProductos.getColumnModel().getColumn(18).setPreferredWidth(0);
        tblProductos.getColumnModel().getColumn(18).setMaxWidth(0);
        tblProductos.getColumnModel().getColumn(19).setMinWidth(100);
        tblProductos.getColumnModel().getColumn(19).setPreferredWidth(100);
        tblProductos.getColumnModel().getColumn(19).setMaxWidth(100);
        tblProductos.getColumnModel().getColumn(20).setMinWidth(0);
        tblProductos.getColumnModel().getColumn(20).setPreferredWidth(0);
        tblProductos.getColumnModel().getColumn(20).setMaxWidth(0);
        tblProductos.getColumnModel().getColumn(21).setMinWidth(0);
        tblProductos.getColumnModel().getColumn(21).setPreferredWidth(0);
        tblProductos.getColumnModel().getColumn(21).setMaxWidth(0);
        tblProductos.getColumnModel().getColumn(22).setMinWidth(40);
        tblProductos.getColumnModel().getColumn(22).setPreferredWidth(40);
        tblProductos.getColumnModel().getColumn(22).setMaxWidth(0);
        tblProductos.getColumnModel().getColumn(23).setMinWidth(0);
        tblProductos.getColumnModel().getColumn(23).setPreferredWidth(0);
        tblProductos.getColumnModel().getColumn(23).setMaxWidth(0);
        tblProductos.getColumnModel().getColumn(24).setMinWidth(20);
        tblProductos.getColumnModel().getColumn(24).setPreferredWidth(80);
        tblProductos.getColumnModel().getColumn(24).setMaxWidth(120);
        tblProductos.getColumnModel().getColumn(25).setMinWidth(20);
        tblProductos.getColumnModel().getColumn(25).setPreferredWidth(80);
        tblProductos.getColumnModel().getColumn(25).setMaxWidth(120);
        tblProductos.getColumnModel().getColumn(26).setMinWidth(100);
        tblProductos.getColumnModel().getColumn(26).setPreferredWidth(100);
        tblProductos.getColumnModel().getColumn(26).setMaxWidth(100);
        tblProductos.getColumnModel().getColumn(27).setMinWidth(100);
        tblProductos.getColumnModel().getColumn(27).setPreferredWidth(250);
        tblProductos.getColumnModel().getColumn(27).setMaxWidth(300);
        tblProductos.getColumnModel().getColumn(28).setMinWidth(0);
        tblProductos.getColumnModel().getColumn(28).setPreferredWidth(0);
        tblProductos.getColumnModel().getColumn(28).setMaxWidth(0);
        tblProductos.getColumnModel().getColumn(29).setMinWidth(0);
        tblProductos.getColumnModel().getColumn(29).setPreferredWidth(0);
        tblProductos.getColumnModel().getColumn(29).setMaxWidth(0);
        tblProductos.getColumnModel().getColumn(30).setMinWidth(0);
        tblProductos.getColumnModel().getColumn(30).setPreferredWidth(0);
        tblProductos.getColumnModel().getColumn(30).setMaxWidth(0);
        tblProductos.getColumnModel().getColumn(31).setMinWidth(0);
        tblProductos.getColumnModel().getColumn(31).setPreferredWidth(0);
        tblProductos.getColumnModel().getColumn(31).setMaxWidth(0);
        tblProductos.getColumnModel().getColumn(32).setMinWidth(0);
        tblProductos.getColumnModel().getColumn(32).setPreferredWidth(0);
        tblProductos.getColumnModel().getColumn(32).setMaxWidth(0);
        tblProductos.getColumnModel().getColumn(33).setMinWidth(0);
        tblProductos.getColumnModel().getColumn(33).setPreferredWidth(0);
        tblProductos.getColumnModel().getColumn(33).setMaxWidth(0);
        tblProductos.getColumnModel().getColumn(34).setMinWidth(0);
        tblProductos.getColumnModel().getColumn(34).setPreferredWidth(0);
        tblProductos.getColumnModel().getColumn(34).setMaxWidth(0);
        tblProductos.getColumnModel().getColumn(35).setMinWidth(0);
        tblProductos.getColumnModel().getColumn(35).setPreferredWidth(0);
        tblProductos.getColumnModel().getColumn(35).setMaxWidth(0);
        tblProductos.getColumnModel().getColumn(36).setMinWidth(0);
        tblProductos.getColumnModel().getColumn(36).setPreferredWidth(0);
        tblProductos.getColumnModel().getColumn(36).setMaxWidth(0);
        tblProductos.getColumnModel().getColumn(37).setMinWidth(0);
        tblProductos.getColumnModel().getColumn(37).setPreferredWidth(0);
        tblProductos.getColumnModel().getColumn(37).setMaxWidth(0);
        tblProductos.getColumnModel().getColumn(38).setMinWidth(0);
        tblProductos.getColumnModel().getColumn(38).setPreferredWidth(0);
        tblProductos.getColumnModel().getColumn(38).setMaxWidth(0);
    }

    lbProducto.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
    lbProducto.setText("Producto:");
    lbProducto.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            lbProductoMouseClicked(evt);
        }
    });
    lbProducto.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            lbProductoKeyReleased(evt);
        }
    });

    txtCodProducto.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
    txtCodProducto.setName("combo"); // NOI18N
    txtCodProducto.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            txtCodProductoFocusGained(evt);
        }
    });
    txtCodProducto.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtCodProductoActionPerformed(evt);
        }
    });
    txtCodProducto.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            txtCodProductoKeyPressed(evt);
        }
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txtCodProductoKeyReleased(evt);
        }
    });

    btnBusProd.setBackground(new java.awt.Color(204, 204, 204));
    btnBusProd.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
    btnBusProd.setForeground(new java.awt.Color(255, 255, 255));
    btnBusProd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/buscar1.png"))); // NOI18N
    btnBusProd.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    btnBusProd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btnBusProd.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
    btnBusProd.setMargin(new java.awt.Insets(2, 7, 2, 5));
    btnBusProd.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnBusProdActionPerformed(evt);
        }
    });

    tblInventario.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
    tblInventario.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "", "Actual", "Final"
        }
    ) {
        boolean[] canEdit = new boolean [] {
            false, false, false
        };

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    tblInventario.setToolTipText("Doble Click para cambiar la lista");
    tblInventario.setMinimumSize(new java.awt.Dimension(45, 203));
    tblInventario.setRowHeight(31);
    tblInventario.getTableHeader().setReorderingAllowed(false);
    tblInventario.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            tblInventarioFocusGained(evt);
        }
        public void focusLost(java.awt.event.FocusEvent evt) {
            tblInventarioFocusLost(evt);
        }
    });
    tblInventario.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            tblInventarioMouseClicked(evt);
        }
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            tblInventarioMouseEntered(evt);
        }
    });
    scrInventario.setViewportView(tblInventario);
    if (tblInventario.getColumnModel().getColumnCount() > 0) {
        tblInventario.getColumnModel().getColumn(0).setMinWidth(30);
        tblInventario.getColumnModel().getColumn(0).setPreferredWidth(30);
        tblInventario.getColumnModel().getColumn(0).setMaxWidth(30);
    }

    lbProducto1.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
    lbProducto1.setText("Cant:");
    lbProducto1.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            lbProducto1KeyReleased(evt);
        }
    });

    txtCant.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
    txtCant.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    txtCant.setText("1");
    txtCant.setDisabledTextColor(new java.awt.Color(0, 0, 0));
    txtCant.setEnabled(false);
    txtCant.setName("combo"); // NOI18N
    txtCant.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtCantActionPerformed(evt);
        }
    });
    txtCant.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            txtCantFocusGained(evt);
        }
    });
    txtCant.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            txtCantKeyPressed(evt);
        }
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txtCantKeyReleased(evt);
        }
    });

    txtPorcentaje.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
    txtPorcentaje.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    txtPorcentaje.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            txtPorcentajeMouseClicked(evt);
        }
    });
    txtPorcentaje.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtPorcentajeActionPerformed(evt);
        }
    });
    txtPorcentaje.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txtPorcentajeKeyReleased(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            txtPorcentajeKeyTyped(evt);
        }
    });

    lbVendedor1.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
    lbVendedor1.setText("Desc: %");

    lbBodega.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
    lbBodega.setText("Bodega:");
    lbBodega.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            lbBodegaKeyReleased(evt);
        }
    });

    txtBodega.setBackground(new java.awt.Color(255, 204, 204));
    txtBodega.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
    txtBodega.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    txtBodega.setText("123-22");
    txtBodega.setDisabledTextColor(new java.awt.Color(0, 0, 0));
    txtBodega.setName("combo"); // NOI18N
    txtBodega.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            txtBodegaMouseClicked(evt);
        }
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            txtBodegaMouseEntered(evt);
        }
        public void mousePressed(java.awt.event.MouseEvent evt) {
            txtBodegaMousePressed(evt);
        }
        public void mouseReleased(java.awt.event.MouseEvent evt) {
            txtBodegaMouseReleased(evt);
        }
    });
    txtBodega.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtBodegaActionPerformed(evt);
        }
    });
    txtBodega.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            txtBodegaFocusGained(evt);
        }
    });
    txtBodega.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            txtBodegaKeyPressed(evt);
        }
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txtBodegaKeyReleased(evt);
        }
    });

    txtCargar.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
    txtCargar.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    txtCargar.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txtCargarKeyReleased(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            txtCargarKeyTyped(evt);
        }
    });

    cmbCargar.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
    cmbCargar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cargar Cotización", "Cargar Orden", "Cargar Prefactura", "Cargar Pedido", "Cargar Plan Separe", "Cargar Plantilla", "Cargar FE" }));

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addComponent(scrProductos1, javax.swing.GroupLayout.DEFAULT_SIZE, 1026, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(scrInventario, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addComponent(lbProducto1)
                    .addGap(2, 2, 2)
                    .addComponent(txtCant, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(25, 25, 25)
                    .addComponent(lbBodega)
                    .addGap(1, 1, 1)
                    .addComponent(txtBodega, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(25, 25, 25)
                    .addComponent(lbProducto)
                    .addGap(1, 1, 1)
                    .addComponent(txtCodProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(2, 2, 2)
                    .addComponent(btnBusProd, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(116, 116, 116)
                    .addComponent(cmbCargar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(txtCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbVendedor1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(txtPorcentaje, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(5, 5, 5)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lbProducto1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCant, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(lbBodega, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(txtPorcentaje, javax.swing.GroupLayout.Alignment.TRAILING)))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lbVendedor1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtCodProducto, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lbProducto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBusProd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtBodega, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(cmbCargar, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(txtCargar, javax.swing.GroupLayout.Alignment.TRAILING))))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(scrProductos1, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                .addComponent(scrInventario, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE))
            .addContainerGap())
    );

    tapControl.addTab("Facturación", jPanel2);

    pnlVisor.setBackground(new java.awt.Color(255, 255, 255));
    pnlVisor.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 0, 13))); // NOI18N

    tblImagenes.setFont(new java.awt.Font("Century Gothic", 0, 26)); // NOI18N
    tblImagenes.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            " ", " ", " ", "", ""
        }
    ) {
        boolean[] canEdit = new boolean [] {
            false, false, false, false, false
        };

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    tblImagenes.setRowHeight(240);
    tblImagenes.getTableHeader().setResizingAllowed(false);
    tblImagenes.getTableHeader().setReorderingAllowed(false);
    tblImagenes.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            tblImagenesMouseClicked(evt);
        }
    });
    jScrollPane5.setViewportView(tblImagenes);

    javax.swing.GroupLayout pnlVisorLayout = new javax.swing.GroupLayout(pnlVisor);
    pnlVisor.setLayout(pnlVisorLayout);
    pnlVisorLayout.setHorizontalGroup(
        pnlVisorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlVisorLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1212, Short.MAX_VALUE)
            .addContainerGap())
    );
    pnlVisorLayout.setVerticalGroup(
        pnlVisorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlVisorLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
            .addContainerGap())
    );

    tapControl.addTab("Grupos", pnlVisor);

    jPanel6.setBackground(new java.awt.Color(255, 255, 255));
    jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 1, 18))); // NOI18N

    lbNombre9.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
    lbNombre9.setText("Placa:");

    txtPlaca.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
    txtPlaca.setDisabledTextColor(new java.awt.Color(0, 0, 0));
    txtPlaca.setName("Nombre"); // NOI18N
    txtPlaca.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txtPlacaKeyReleased(evt);
        }
    });

    lbNombre10.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
    lbNombre10.setText("Tipo:");

    lbNombre5.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
    lbNombre5.setText("Marca:");

    txtMarca.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
    txtMarca.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    txtMarca.setDisabledTextColor(new java.awt.Color(0, 0, 0));
    txtMarca.setName("Nombre"); // NOI18N

    lbNombre6.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
    lbNombre6.setText("Km:");

    lbNombre7.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
    lbNombre7.setText("Modelo:");

    txtModelo.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
    txtModelo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    txtModelo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
    txtModelo.setName("Nombre"); // NOI18N

    txtKm.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
    txtKm.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    txtKm.setDisabledTextColor(new java.awt.Color(0, 0, 0));
    txtKm.setName("Nombre"); // NOI18N

    lbNombre8.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
    lbNombre8.setText("N° Motor:");

    txtMotor.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
    txtMotor.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    txtMotor.setDisabledTextColor(new java.awt.Color(0, 0, 0));
    txtMotor.setName("Nombre"); // NOI18N

    txtNumChasis.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
    txtNumChasis.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    txtNumChasis.setDisabledTextColor(new java.awt.Color(0, 0, 0));
    txtNumChasis.setName("Nombre"); // NOI18N

    lbNombre11.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
    lbNombre11.setText("N° Chasis:");

    lbNombre13.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
    lbNombre13.setText("Color:");

    txtColor.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
    txtColor.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    txtColor.setDisabledTextColor(new java.awt.Color(0, 0, 0));
    txtColor.setName("Nombre"); // NOI18N

    lbNombre14.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
    lbNombre14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lbNombre14.setText("PROBLEMA GENERAL");

    jScrollPane6.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N

    txtProblema.setColumns(20);
    txtProblema.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
    txtProblema.setLineWrap(true);
    txtProblema.setRows(2);
    jScrollPane6.setViewportView(txtProblema);

    btnNuevaParte.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
    btnNuevaParte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/actualizar pequeño.png"))); // NOI18N
    btnNuevaParte.setToolTipText("Ctrl+M");
    btnNuevaParte.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnNuevaParteActionPerformed(evt);
        }
    });

    tblArticulos.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
    tblArticulos.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "Id", "Parte del vehiculo", "Inv.", "Problemas Derecha", "Problemas Izquierda", "Observaciones"
        }
    ) {
        Class[] types = new Class [] {
            java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
        };
        boolean[] canEdit = new boolean [] {
            false, false, true, false, false, true
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    tblArticulos.setRowHeight(24);
    tblArticulos.getTableHeader().setReorderingAllowed(false);
    tblArticulos.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            tblArticulosMouseClicked(evt);
        }
    });
    tblArticulos.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            tblArticulosKeyPressed(evt);
        }
        public void keyReleased(java.awt.event.KeyEvent evt) {
            tblArticulosKeyReleased(evt);
        }
    });
    jScrollPane4.setViewportView(tblArticulos);
    if (tblArticulos.getColumnModel().getColumnCount() > 0) {
        tblArticulos.getColumnModel().getColumn(0).setMinWidth(0);
        tblArticulos.getColumnModel().getColumn(0).setPreferredWidth(0);
        tblArticulos.getColumnModel().getColumn(0).setMaxWidth(0);
        tblArticulos.getColumnModel().getColumn(2).setMinWidth(40);
        tblArticulos.getColumnModel().getColumn(2).setPreferredWidth(40);
        tblArticulos.getColumnModel().getColumn(2).setMaxWidth(40);
    }

    btnNuevaParte1.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
    btnNuevaParte1.setText("LISTADO DE PARTES");
    btnNuevaParte1.setToolTipText("Ctrl+M");
    btnNuevaParte1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnNuevaParte1ActionPerformed(evt);
        }
    });

    txtTipoVehiculo.setEditable(false);
    txtTipoVehiculo.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
    txtTipoVehiculo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    txtTipoVehiculo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
    txtTipoVehiculo.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            txtTipoVehiculoKeyPressed(evt);
        }
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txtTipoVehiculoKeyReleased(evt);
        }
    });

    javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
    jPanel6.setLayout(jPanel6Layout);
    jPanel6Layout.setHorizontalGroup(
        jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jScrollPane4)
                .addComponent(lbNombre14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel6Layout.createSequentialGroup()
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel6Layout.createSequentialGroup()
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lbNombre10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lbNombre9, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(lbNombre5, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(10, 10, 10)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtMarca, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel6Layout.createSequentialGroup()
                                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtTipoVehiculo, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                                        .addComponent(txtPlaca))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(lbNombre7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lbNombre6, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtKm)
                                        .addComponent(txtModelo, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lbNombre11)
                                        .addComponent(lbNombre8, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtMotor, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel6Layout.createSequentialGroup()
                                            .addComponent(txtNumChasis, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(lbNombre13)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtColor, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel6Layout.createSequentialGroup()
                            .addComponent(btnNuevaParte)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnNuevaParte1)))
                    .addGap(0, 422, Short.MAX_VALUE)))
            .addContainerGap())
    );
    jPanel6Layout.setVerticalGroup(
        jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel6Layout.createSequentialGroup()
            .addGap(5, 5, 5)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lbNombre9, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(txtPlaca, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(3, 3, 3)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(txtNumChasis, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lbNombre7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbNombre10, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtModelo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbNombre11, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbNombre13, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtTipoVehiculo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtColor, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGap(2, 2, 2)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lbNombre5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(txtMarca, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lbNombre6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(txtKm, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lbNombre8, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(txtMotor, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(10, 10, 10)
            .addComponent(lbNombre14)
            .addGap(0, 0, 0)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(10, 10, 10)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(btnNuevaParte, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addComponent(btnNuevaParte1, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
            .addContainerGap())
    );

    tapControl.addTab("Registro Orden", jPanel6);

    jPanel4.setBackground(new java.awt.Color(255, 255, 255));

    jPanel5.setBackground(new java.awt.Color(255, 255, 255));

    jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

    lbVendedor10.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
    lbVendedor10.setText("Hasta:");

    dtHasta.setFieldFont(new java.awt.Font("Century Gothic", java.awt.Font.PLAIN, 12));
    dtHasta.addCommitListener(new datechooser.events.CommitListener() {
        public void onCommit(datechooser.events.CommitEvent evt) {
            dtHastaOnCommit(evt);
        }
    });

    chkSinEstablecer.setText("Sin establecer");

    dtDesde.setFieldFont(new java.awt.Font("Century Gothic", java.awt.Font.PLAIN, 12));
    dtDesde.addCommitListener(new datechooser.events.CommitListener() {
        public void onCommit(datechooser.events.CommitEvent evt) {
            dtDesdeOnCommit(evt);
        }
    });

    lbVendedor9.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
    lbVendedor9.setText("Desde:");

    lbVendedor7.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
    lbVendedor7.setText("Periodicidad:");

    cmbPeriodicidad.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
    cmbPeriodicidad.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Mensual", "Anual" }));

    lbVendedor11.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
    lbVendedor11.setText("Contador de facturas realizadas:");

    lbVendedor12.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
    lbVendedor12.setText("Cant facturas para realizar incremento:");

    txtCantIncremento.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
    txtCantIncremento.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    txtCantIncremento.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtCantIncrementoActionPerformed(evt);
        }
    });

    txtCantFacturados.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
    txtCantFacturados.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    txtCantFacturados.setDisabledTextColor(new java.awt.Color(0, 0, 0));
    txtCantFacturados.setEnabled(false);
    txtCantFacturados.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtCantFacturadosActionPerformed(evt);
        }
    });

    lbVendedor13.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
    lbVendedor13.setText("Fecha ultima factura:");

    txtUltimaFacturaFecha.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
    txtUltimaFacturaFecha.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    txtUltimaFacturaFecha.setDisabledTextColor(new java.awt.Color(0, 0, 0));
    txtUltimaFacturaFecha.setEnabled(false);
    txtUltimaFacturaFecha.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtUltimaFacturaFechaActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
    jPanel5.setLayout(jPanel5Layout);
    jPanel5Layout.setHorizontalGroup(
        jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel5Layout.createSequentialGroup()
            .addGap(10, 10, 10)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(lbVendedor10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbVendedor7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbVendedor9, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(cmbPeriodicidad, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(dtDesde, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addComponent(dtHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(chkSinEstablecer)
            .addGap(32, 32, 32)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addComponent(lbVendedor13, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                    .addComponent(txtUltimaFacturaFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lbVendedor11, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbVendedor12))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtCantFacturados, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtCantIncremento, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addContainerGap(373, Short.MAX_VALUE))
    );
    jPanel5Layout.setVerticalGroup(
        jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel5Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbVendedor7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmbPeriodicidad))
                    .addGap(3, 3, 3)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(dtDesde, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbVendedor9, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(3, 3, 3)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(dtHasta, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                        .addComponent(lbVendedor10, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                        .addComponent(chkSinEstablecer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(82, 82, 82))
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lbVendedor13, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtUltimaFacturaFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(3, 3, 3)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lbVendedor11, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtCantFacturados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(2, 2, 2)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lbVendedor12)
                                .addComponent(txtCantIncremento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
    );

    javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
    jPanel4.setLayout(jPanel4Layout);
    jPanel4Layout.setHorizontalGroup(
        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
    );
    jPanel4Layout.setVerticalGroup(
        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel4Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(106, Short.MAX_VALUE))
    );

    tapControl.addTab("Facturación Automatica", jPanel4);

    txtIdSistema.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
    txtIdSistema.setForeground(new java.awt.Color(255, 51, 51));
    txtIdSistema.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    txtIdSistema.setDisabledTextColor(new java.awt.Color(255, 51, 51));
    txtIdSistema.setEnabled(false);
    txtIdSistema.setName("CC/NIT"); // NOI18N
    txtIdSistema.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtIdSistemaActionPerformed(evt);
        }
    });
    txtIdSistema.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txtIdSistemaKeyReleased(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            txtIdSistemaKeyTyped(evt);
        }
    });

    cmbListas.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "L1", "L2", "L3", "L4", "L5", "L6", "L7", "L8" }));
    cmbListas.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            cmbListasItemStateChanged(evt);
        }
    });
    cmbListas.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            cmbListasMouseClicked(evt);
        }
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            cmbListasMouseEntered(evt);
        }
        public void mousePressed(java.awt.event.MouseEvent evt) {
            cmbListasMousePressed(evt);
        }
        public void mouseReleased(java.awt.event.MouseEvent evt) {
            cmbListasMouseReleased(evt);
        }
    });
    cmbListas.addInputMethodListener(new java.awt.event.InputMethodListener() {
        public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
        }
        public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            cmbListasInputMethodTextChanged(evt);
        }
    });
    cmbListas.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmbListasActionPerformed(evt);
        }
    });
    cmbListas.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
        public void propertyChange(java.beans.PropertyChangeEvent evt) {
            cmbListasPropertyChange(evt);
        }
    });

    txtPlaca1.setFont(new java.awt.Font("Tahoma", 0, 1)); // NOI18N
    txtPlaca1.setForeground(new java.awt.Color(255, 255, 255));

    txtCopago.setEditable(false);
    txtCopago.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
    txtCopago.setText("0");

    lbTitulo.setFont(new java.awt.Font("Century Gothic", 1, 10)); // NOI18N
    lbTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lbTitulo.setText("FACTURACIÓN");

    txtFechaFactura.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
    txtFechaFactura.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    txtFechaFactura.setDisabledTextColor(new java.awt.Color(0, 0, 0));
    txtFechaFactura.setEnabled(false);
    txtFechaFactura.setName("Plazo"); // NOI18N
    txtFechaFactura.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtFechaFacturaActionPerformed(evt);
        }
    });
    txtFechaFactura.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txtFechaFacturaKeyReleased(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            txtFechaFacturaKeyTyped(evt);
        }
    });

    pnlCuentaCobro.setBackground(new java.awt.Color(255, 255, 255));

    cmbMes.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
    cmbMes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " ", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" }));

    javax.swing.GroupLayout pnlCuentaCobroLayout = new javax.swing.GroupLayout(pnlCuentaCobro);
    pnlCuentaCobro.setLayout(pnlCuentaCobroLayout);
    pnlCuentaCobroLayout.setHorizontalGroup(
        pnlCuentaCobroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlCuentaCobroLayout.createSequentialGroup()
            .addContainerGap(123, Short.MAX_VALUE)
            .addComponent(cmbMes, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(24, 24, 24))
    );
    pnlCuentaCobroLayout.setVerticalGroup(
        pnlCuentaCobroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCuentaCobroLayout.createSequentialGroup()
            .addComponent(cmbMes, javax.swing.GroupLayout.PREFERRED_SIZE, 28, Short.MAX_VALUE)
            .addGap(0, 0, 0))
    );

    txtCupo.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
    txtCupo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    txtCupo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
    txtCupo.setEnabled(false);
    txtCupo.setName("Plazo"); // NOI18N
    txtCupo.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtCupoActionPerformed(evt);
        }
    });
    txtCupo.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txtCupoKeyReleased(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            txtCupoKeyTyped(evt);
        }
    });

    txtCartera.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
    txtCartera.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    txtCartera.setDisabledTextColor(new java.awt.Color(0, 0, 0));
    txtCartera.setEnabled(false);
    txtCartera.setName("Plazo"); // NOI18N
    txtCartera.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtCarteraActionPerformed(evt);
        }
    });
    txtCartera.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txtCarteraKeyReleased(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            txtCarteraKeyTyped(evt);
        }
    });

    pnlGarantia.setBackground(new java.awt.Color(255, 255, 255));

    txtGarantiaSeñal.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
    txtGarantiaSeñal.setHorizontalAlignment(javax.swing.JTextField.CENTER);

    txtGarantiaFuncionamiento.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
    txtGarantiaFuncionamiento.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    txtGarantiaFuncionamiento.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtGarantiaFuncionamientoActionPerformed(evt);
        }
    });

    cmbSeñal.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
    cmbSeñal.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "año", "meses" }));

    cmbFuncionamiento.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
    cmbFuncionamiento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "año", "meses" }));
    cmbFuncionamiento.setMinimumSize(new java.awt.Dimension(50, 20));
    cmbFuncionamiento.setPreferredSize(new java.awt.Dimension(50, 20));

    javax.swing.GroupLayout pnlGarantiaLayout = new javax.swing.GroupLayout(pnlGarantia);
    pnlGarantia.setLayout(pnlGarantiaLayout);
    pnlGarantiaLayout.setHorizontalGroup(
        pnlGarantiaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlGarantiaLayout.createSequentialGroup()
            .addGap(52, 52, 52)
            .addComponent(txtGarantiaSeñal, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(2, 2, 2)
            .addComponent(cmbSeñal, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(142, 142, 142)
            .addComponent(txtGarantiaFuncionamiento, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(2, 2, 2)
            .addComponent(cmbFuncionamiento, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    pnlGarantiaLayout.setVerticalGroup(
        pnlGarantiaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlGarantiaLayout.createSequentialGroup()
            .addGap(3, 3, 3)
            .addGroup(pnlGarantiaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(txtGarantiaSeñal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(cmbSeñal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(txtGarantiaFuncionamiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(cmbFuncionamiento, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(3, 3, 3))
    );

    cmbListaPrecio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " ", "L1", "L2", "L3", "L4", "L5", "L6", "L7", "L8" }));

    rdTipoNormal.setBackground(new java.awt.Color(255, 255, 255));
    grpCopago.add(rdTipoNormal);
    rdTipoNormal.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
    rdTipoNormal.setSelected(true);
    rdTipoNormal.setText("Normal");

    rdTipoCopago.setBackground(new java.awt.Color(255, 255, 255));
    grpCopago.add(rdTipoCopago);
    rdTipoCopago.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
    rdTipoCopago.setText("Copago");

    txtDescGeneral.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
    txtDescGeneral.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    txtDescGeneral.setText("0");
    txtDescGeneral.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtDescGeneralActionPerformed(evt);
        }
    });
    txtDescGeneral.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txtDescGeneralKeyReleased(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            txtDescGeneralKeyTyped(evt);
        }
    });

    javax.swing.GroupLayout pnlOcultarLayout = new javax.swing.GroupLayout(pnlOcultar);
    pnlOcultar.setLayout(pnlOcultarLayout);
    pnlOcultarLayout.setHorizontalGroup(
        pnlOcultarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlOcultarLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(pnlOcultarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlOcultarLayout.createSequentialGroup()
                    .addComponent(rdTipoNormal, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(rdTipoCopago)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(txtCopago, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(txtPlaca1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(txtDescGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(lbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(txtIdSistema, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(cmbListas, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(pnlCuentaCobro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlOcultarLayout.createSequentialGroup()
                    .addComponent(txtCupo, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(txtCartera, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(pnlGarantia, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(txtFechaFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(cmbListaPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    pnlOcultarLayout.setVerticalGroup(
        pnlOcultarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlOcultarLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(pnlOcultarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlOcultarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdTipoNormal)
                    .addComponent(rdTipoCopago)
                    .addComponent(txtCopago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPlaca1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlOcultarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlOcultarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtIdSistema, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbListas, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtDescGeneral, javax.swing.GroupLayout.Alignment.LEADING))
                .addComponent(pnlCuentaCobro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(pnlOcultarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlOcultarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCupo, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCartera, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(pnlGarantia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnlOcultarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtFechaFactura, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbListaPrecio, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)))
            .addContainerGap())
    );

    btnVolver.setFont(new java.awt.Font("Century Gothic", 1, 36)); // NOI18N
    btnVolver.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    btnVolver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/anterior.png"))); // NOI18N
    btnVolver.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            btnVolverMouseClicked(evt);
        }
    });

    btnVolver1.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
    btnVolver1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    btnVolver1.setText("VOLVER");
    btnVolver1.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            btnVolver1MouseClicked(evt);
        }
    });

    jPanel11.setBackground(new java.awt.Color(255, 255, 255));
    jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

    jPanel10.setBackground(new java.awt.Color(255, 255, 255));

    btnLimpiar.setBackground(new java.awt.Color(204, 204, 204));
    btnLimpiar.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
    btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/limpiar.png"))); // NOI18N
    btnLimpiar.setText("LIMPIAR");
    btnLimpiar.setToolTipText("Ctrl+L");
    btnLimpiar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    btnLimpiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btnLimpiar.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
    btnLimpiar.setMargin(new java.awt.Insets(2, 14, 2, 5));
    btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnLimpiarActionPerformed(evt);
        }
    });

    btnGuardar.setBackground(new java.awt.Color(46, 204, 113));
    btnGuardar.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
    btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/guardar.png"))); // NOI18N
    btnGuardar.setText("FACTURAR");
    btnGuardar.setToolTipText("Ctrl+G");
    btnGuardar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    btnGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btnGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
    btnGuardar.setMargin(new java.awt.Insets(2, 14, 2, 5));
    btnGuardar.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnGuardarActionPerformed(evt);
        }
    });
    btnGuardar.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            btnGuardarKeyReleased(evt);
        }
    });

    btnGuardar1.setBackground(new java.awt.Color(46, 204, 113));
    btnGuardar1.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
    btnGuardar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imprimir.png"))); // NOI18N
    btnGuardar1.setText("FACTURAR/IMPRIMIR");
    btnGuardar1.setToolTipText("Ctrl+I");
    btnGuardar1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    btnGuardar1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btnGuardar1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
    btnGuardar1.setMargin(new java.awt.Insets(2, 14, 2, 5));
    btnGuardar1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnGuardar1ActionPerformed(evt);
        }
    });
    btnGuardar1.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            btnGuardar1KeyReleased(evt);
        }
    });

    btnReImprimir.setBackground(new java.awt.Color(247, 220, 111));
    btnReImprimir.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
    btnReImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imprimir.png"))); // NOI18N
    btnReImprimir.setText("REIMPRIMIR");
    btnReImprimir.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    btnReImprimir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btnReImprimir.setEnabled(false);
    btnReImprimir.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
    btnReImprimir.setMargin(new java.awt.Insets(2, 7, 2, 5));
    btnReImprimir.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnReImprimirActionPerformed(evt);
        }
    });

    btnActualizar.setBackground(new java.awt.Color(93, 173, 226));
    btnActualizar.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
    btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/actualizar.png"))); // NOI18N
    btnActualizar.setText("MODIFICAR");
    btnActualizar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    btnActualizar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btnActualizar.setEnabled(false);
    btnActualizar.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
    btnActualizar.setMargin(new java.awt.Insets(2, 7, 2, 5));
    btnActualizar.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnActualizarActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
    jPanel10.setLayout(jPanel10Layout);
    jPanel10Layout.setHorizontalGroup(
        jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel10Layout.createSequentialGroup()
            .addGap(0, 0, 0)
            .addComponent(btnGuardar1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(2, 2, 2)
            .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(2, 2, 2)
            .addComponent(btnReImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(2, 2, 2)
            .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(2, 2, 2)
            .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
    );
    jPanel10Layout.setVerticalGroup(
        jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel10Layout.createSequentialGroup()
            .addGap(5, 5, 5)
            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnGuardar1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnReImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(5, 5, 5))
    );

    rdMediaCarta.setBackground(new java.awt.Color(215, 217, 216));
    grupoTipoImpresion.add(rdMediaCarta);
    rdMediaCarta.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
    rdMediaCarta.setText("1/2 CARTA");
    rdMediaCarta.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            rdMediaCartaItemStateChanged(evt);
        }
    });
    rdMediaCarta.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            rdMediaCartaActionPerformed(evt);
        }
    });

    jLabel4.setBackground(new java.awt.Color(215, 217, 216));
    jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/mediaCarta.jpg"))); // NOI18N
    jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jLabel4MouseClicked(evt);
        }
    });

    rdCarta.setBackground(new java.awt.Color(215, 217, 216));
    grupoTipoImpresion.add(rdCarta);
    rdCarta.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
    rdCarta.setText("CARTA");
    rdCarta.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            rdCartaItemStateChanged(evt);
        }
    });

    jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/cartaCompleta.jpg"))); // NOI18N
    jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jLabel2MouseClicked(evt);
        }
    });

    rdPos.setBackground(new java.awt.Color(215, 217, 216));
    grupoTipoImpresion.add(rdPos);
    rdPos.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
    rdPos.setSelected(true);
    rdPos.setText("POS");
    rdPos.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            rdPosItemStateChanged(evt);
        }
    });

    jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/pos.jpg"))); // NOI18N
    jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jLabel5MouseClicked(evt);
        }
    });

    txtObservaciones.setColumns(20);
    txtObservaciones.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
    txtObservaciones.setLineWrap(true);
    txtObservaciones.setRows(2);
    txtObservaciones.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            txtObservacionesKeyReleased(evt);
        }
    });
    jScrollPane1.setViewportView(txtObservaciones);

    lbObservaciones.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
    lbObservaciones.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    lbObservaciones.setText("Observaciones");

    jPanel1.setBackground(new java.awt.Color(255, 255, 255));

    txtTotal.setFont(new java.awt.Font("Century Gothic", 1, 30)); // NOI18N
    txtTotal.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    txtTotal.setText("Total: 0");

    lbSubtotal.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
    lbSubtotal.setText("Subtotal:");

    txtSubTotal.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
    txtSubTotal.setText("0");

    txtIva.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
    txtIva.setText("Iva:");

    txtTotalIva.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
    txtTotalIva.setText("0");

    lbTotalDescuento.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
    lbTotalDescuento.setText("Descuentos:");
    lbTotalDescuento.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            lbTotalDescuentoMouseClicked(evt);
        }
    });

    txtTotalDescuentos.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
    txtTotalDescuentos.setText("0");

    lbImpuestoBolsa.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
    lbImpuestoBolsa.setText("Imp. Bolsa:");

    lbImpoconsumo.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
    lbImpoconsumo.setText("Impoconsumo:");

    txtImpuesto.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
    txtImpuesto.setText("0");

    txtTotalImpoconsumo.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
    txtTotalImpoconsumo.setText("0");

    cmbRtf.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
    cmbRtf.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "RtF", "0,5", "1", "1,5", "2", "2,5", "3", "3,5", "4", "6", "7", "10", "11", "20" }));
    cmbRtf.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            cmbRtfItemStateChanged(evt);
        }
    });
    cmbRtf.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmbRtfActionPerformed(evt);
        }
    });

    txtRtf.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
    txtRtf.setText("0");

    chkReteIva.setBackground(new java.awt.Color(255, 255, 255));
    chkReteIva.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
    chkReteIva.setText("Rete iva");
    chkReteIva.setAlignmentY(0.0F);
    chkReteIva.setBorder(null);
    chkReteIva.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    chkReteIva.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
    chkReteIva.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            chkReteIvaItemStateChanged(evt);
        }
    });
    chkReteIva.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            chkReteIvaActionPerformed(evt);
        }
    });

    txtRiva.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
    txtRiva.setText("0");

    lbTotalDescuento1.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
    lbTotalDescuento1.setText("N° Unit:");
    lbTotalDescuento1.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            lbTotalDescuento1MouseClicked(evt);
        }
    });

    txtCantUnidades.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
    txtCantUnidades.setText("0");
    txtCantUnidades.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            txtCantUnidadesMouseClicked(evt);
        }
    });

    lbTotalDescuento2.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
    lbTotalDescuento2.setText("N° Prod:");
    lbTotalDescuento2.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            lbTotalDescuento2MouseClicked(evt);
        }
    });

    txtCantProductos.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
    txtCantProductos.setText("0");
    txtCantProductos.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            txtCantProductosMouseClicked(evt);
        }
    });

    expFE.setWeekStyle(datechooser.view.WeekDaysStyle.SHORT);
    expFE.setFieldFont(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 12));

    jLabel1.setText("Exp. FE:");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(lbSubtotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtIva, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbTotalDescuento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbTotalDescuento1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbTotalDescuento2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtTotalIva, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtSubTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtTotalDescuentos, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtCantUnidades, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtCantProductos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(38, 38, 38)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(chkReteIva, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lbImpoconsumo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtTotalImpoconsumo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtRiva, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(cmbRtf, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(14, 14, 14))
                                .addComponent(lbImpuestoBolsa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(6, 6, 6)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtImpuesto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtRtf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(expFE, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE))))
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(txtTotal)
                    .addGap(3, 3, 3))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(expFE, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbImpuestoBolsa, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtImpuesto, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(3, 3, 3)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbImpoconsumo)
                        .addComponent(txtTotalImpoconsumo, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(chkReteIva, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtRiva)))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtSubTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbSubtotal, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(3, 3, 3)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtTotalIva)
                        .addComponent(txtIva, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(3, 3, 3)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lbTotalDescuento)
                        .addComponent(txtTotalDescuentos))))
            .addGap(3, 3, 3)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbRtf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRtf, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbTotalDescuento1)
                        .addComponent(txtCantUnidades))
                    .addGap(3, 3, 3)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbTotalDescuento2)
                        .addComponent(txtCantProductos))))
            .addGap(5, 5, 5))
    );

    lbCar.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
    lbCar.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    lbCar.setText("300 ");

    javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
    jPanel11.setLayout(jPanel11Layout);
    jPanel11Layout.setHorizontalGroup(
        jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel11Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel11Layout.createSequentialGroup()
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel11Layout.createSequentialGroup()
                            .addComponent(lbObservaciones)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbCar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel5)
                        .addComponent(rdPos, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(5, 5, 5)
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(rdCarta)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(5, 5, 5)
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(rdMediaCarta)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );
    jPanel11Layout.setVerticalGroup(
        jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel11Layout.createSequentialGroup()
            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel11Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel11Layout.createSequentialGroup()
                            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lbObservaciones, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbCar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(0, 0, 0)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel11Layout.createSequentialGroup()
                            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(0, 0, 0)
                            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(rdPos)
                                .addComponent(rdCarta)
                                .addComponent(rdMediaCarta))))
                    .addGap(5, 5, 5)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(2, 2, 2))
    );

    btnOcultarInfoCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/boton-resta.png"))); // NOI18N
    btnOcultarInfoCliente.setToolTipText("Ctrl+M");
    btnOcultarInfoCliente.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnOcultarInfoClienteActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout pnlFormularioLayout = new javax.swing.GroupLayout(pnlFormulario);
    pnlFormulario.setLayout(pnlFormularioLayout);
    pnlFormularioLayout.setHorizontalGroup(
        pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlFormularioLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlFormularioLayout.createSequentialGroup()
                    .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jPanel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tapControl, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlFormularioLayout.createSequentialGroup()
                            .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnVolver1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(pnlInformacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnOcultarInfoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(pnlCredito, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(10, 10, 10))
                .addGroup(pnlFormularioLayout.createSequentialGroup()
                    .addComponent(pnlOcultar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap())))
    );
    pnlFormularioLayout.setVerticalGroup(
        pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlFormularioLayout.createSequentialGroup()
            .addGap(2, 2, 2)
            .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlFormularioLayout.createSequentialGroup()
                    .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnOcultarInfoCliente)
                        .addComponent(pnlInformacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(3, 3, 3)
                    .addComponent(tapControl))
                .addGroup(pnlFormularioLayout.createSequentialGroup()
                    .addComponent(btnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, 0)
                    .addComponent(btnVolver1)))
            .addGap(3, 3, 3)
            .addComponent(pnlCredito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(3, 3, 3)
            .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, 0)
            .addComponent(pnlOcultar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(5, 5, 5))
    );

    jScrollPane2.setViewportView(pnlFormulario);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(jScrollPane2)
            .addGap(0, 0, 0))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(jScrollPane2)
            .addGap(0, 0, 0))
    );
    }// </editor-fold>//GEN-END:initComponents

    private Object[] calcularDescuento2(int fila, BigDecimal subtotal, boolean mostrarAlerta) {
        BigDecimal descuento = big.getBigDecimal("0");
        BigDecimal porcentaje = big.getBigDecimal("0");
        BigDecimal porcentaje2 = big.getBigDecimal("0");

        switch (instancias.getDescuento()) {
            case "porcentaje":
                if (!tblProductos.getValueAt(fila, 5).toString().equals("0.0") && !tblProductos.getValueAt(fila, 5).toString().equals("0")) {
                    if ((boolean) tblProductos.getValueAt(fila, 18)) {

                        if (tblProductos.getValueAt(fila, 5).toString().equals("")) {
                            porcentaje2 = big.getBigDecimal("0");
                        } else {
                            porcentaje2 = big.getBigDecimal(tblProductos.getValueAt(fila, 5).toString().replace(",", ".")).divide(big.getBigDecimal("100"));
                        }
                        porcentaje = big.getBigDecimal(porcentaje2);
                        descuento = big.getMoneda(big.setNumero(subtotal.multiply(porcentaje)));
                        porcentaje2 = porcentaje2.multiply(big.getBigDecimal("100"));
                    } else {
                        if (mostrarAlerta) {
                            metodos.msgAdvertencia(null, "Este producto no puede generar descuento.");
                        }
                        porcentaje2 = big.getBigDecimal("0");
                        descuento = big.getMoneda("0");
                    }
                } else {
                    porcentaje2 = big.getBigDecimal("0");
                    descuento = big.getMoneda("0");
                }
                break;
            case "peso":
                if (!tblProductos.getValueAt(fila, 6).toString().equals(this.simbolo + " 0")) {
                    if ((boolean) tblProductos.getValueAt(fila, 18)) {
                        descuento = big.getMoneda(tblProductos.getValueAt(fila, 6).toString());
                        porcentaje2 = big.getBigDecimal(descuento.multiply(big.getBigDecimal("100")).divide(subtotal, 2, RoundingMode.DOWN));
                    } else {
                        if (mostrarAlerta) {
                            metodos.msgAdvertencia(null, "Este producto no puede generar descuento.");
                        }
                        porcentaje2 = big.getBigDecimal("0");
                        descuento = big.getMoneda("0");
                    }
                } else {
                    porcentaje2 = big.getBigDecimal("0");
                    descuento = big.getMoneda("0");
                }
                break;
        }

        return new Object[]{descuento, porcentaje2};
    }

    private double[] calcularDescuento(int fila, double subtotal, boolean mostrarAlerta) {
        double descuento = 0;
        double porcentaje = 0;
        double porcentaje2 = 0;
        switch (instancias.getDescuento()) {
            case "porcentaje":
                if (!tblProductos.getValueAt(fila, 5).toString().equals("0.0") && !tblProductos.getValueAt(fila, 5).toString().equals("0")) {
                    if ((boolean) tblProductos.getValueAt(fila, 18)) {

                        if (tblProductos.getValueAt(fila, 5).toString().equals("")) {
                            porcentaje2 = 0;
                        } else {
                            porcentaje2 = big.formatDouble(tblProductos.getValueAt(fila, 5).toString().replace(",", ".")) / 100;
                        }
                        double maximoDescuento;
                        if(instancias.getDescuentoMaximoVentas().equals("")){
                          maximoDescuento=0.0;
                        }
                         maximoDescuento = big.formatDouble(instancias.getDescuentoMaximoVentas());
                        if((maximoDescuento/100) < porcentaje2){
                            porcentaje2 = 0;
                            metodos.msgAdvertencia(null, "El maximo descuento permitido es : "+(maximoDescuento)+"%");
                        }else{
                            porcentaje = porcentaje2;
                            descuento = subtotal * porcentaje;
                            porcentaje2 = porcentaje2 * 100;                            
                        }
                    } else {
                        if (mostrarAlerta) {
                            metodos.msgAdvertencia(null, "Este producto no puede generar descuento.");
                        }
                        porcentaje2 = 0;
                        descuento = 0;
                    }
                } else {
                    porcentaje2 = 0;
                    descuento = 0;
                }
                break;
            case "peso":
                if (!tblProductos.getValueAt(fila, 6).toString().equals(this.simbolo + " 0")) {
                    if ((boolean) tblProductos.getValueAt(fila, 18)) {
                        descuento = big.getMonedaToDouble(tblProductos.getValueAt(fila, 6).toString());
                        porcentaje2 = (descuento * 100) / subtotal;
                    } else {
                        if (mostrarAlerta) {
                            metodos.msgAdvertencia(null, "Este producto no puede generar descuento.");
                        }
                        porcentaje2 = 0;
                        descuento = 0;
                    }
                } else {
                    porcentaje2 = 0;
                    descuento = 0;
                }
                break;
        }

        return new double[]{descuento, porcentaje2};
    }
    
      public String checkedComprobante(){
        for (int i = 0; i < tblComprobantes.getRowCount(); i++) {
            tblComprobantes.setValueAt(false, i, 2);
            if (tblComprobantes.getValueAt(i, 7).equals("Facturación Electronica")) {
                tblComprobantes.setValueAt(true, i, 2);
                actualizarResolucion(i);
            }
        }
        return lbNoFactura.getText().toString();
    }
    
    public void facturarExterno(){
        try{
        cmbVendedor.setSelectedIndex(1);   
        validacionInicialFactura(false);
        }catch(Exception e ){
            Log.error("Error facturarExterno "+e.getMessage());
        }
    }
    
    private String validacionInicialFactura(boolean imprimir) throws Exception{

        //VALIDAMOS QUE LA FACTURA SI TENGA PRODUCTOS 
        if (tblProductos.getRowCount() == 0) {
            if(showMsg){
                metodos.msgAdvertenciaAjustado(null, "No ha agregado ningún producto");
            }else{
                Logs.warn("No ha agregado ningún producto");
            }
            return "";
        }

        //VALIDAMOS QUE LA FACTURA SI TENGA PRODUCTOS 
        if (txtNombre.getText().equals("")) {
            if(showMsg){
                metodos.msgAdvertenciaAjustado(null, "No ha agregado ningún cliente");
            }else{
                Logs.warn("No ha agregado ningún cliente");
            }
            return "";
        }

        //VALIDAMOS QUE TIPO DE COMPROBANTE ESTAN UTILIZANDO
        String comprobante = "";
        for (int i = 0; i < tblComprobantes.getRowCount(); i++) {            
            if ((Boolean) tblComprobantes.getValueAt(i, 2)) {
                if (null == tblComprobantes.getValueAt(i, 7)) {
                    comprobante = "";
                } else {
                    comprobante = tblComprobantes.getValueAt(i, 7).toString();
                }
            }
        }

        //SI ES FACTURA ELECTRONICA DEBE TENER UN CLIENTE ASOCIADO POR OBLIGACIÓN
        if (comprobante.equals("Facturación Electronica") && txtNit.getText().equals("1010")) {
            
            if(showMsg){
                metodos.msgAdvertencia(null, "Debe cargar un cliente para facturar electrónicamente");
            }else{
                Logs.warn("Debe cargar un cliente para facturar electrónicamente");
            }
                      
            return "";
        }
        
        if (comprobante.equals("Facturación Electronica")) {
            ndTercero nodo = instancias.getSql().getDatosTercero(txtIdSistema.getText());
           
            
            if (nodo.getNaturaleza().equals("Persona juridica")) {

            } else {
                if (nodo.getpNombre() == null || nodo.getpNombre().trim() == "") {
                    if (showMsg) {
                        metodos.msgAdvertencia(null, "La persona Natural debe contener el primer nombre");
                    } else {
                        Logs.log("La persona Natural debe contener el primer nombre");
                    }
                    return "";
                }
                if (nodo.getpApellido() == null || nodo.getpApellido().trim() == "") {
                    if (showMsg) {
                        metodos.msgAdvertencia(null, "La persona Natural debe contener el primer apellido");
                    } else {
                        Logs.log("La persona Natural debe contener el primer apellido");
                    }
                    return "";
                }
            }
            
                        
            if (nodo.getCodigoMoneda() != null) {
                if (!nodo.getCodigoMoneda().equals("COP")) {
                    if (getTrmMoneda().trim().equals("")) {
                        if(showMsg){
                           metodos.msgAdvertencia(null, "Debe registrar el Valor Pactado ó TRM!");
                        }else{
                           Logs.log("Debe registrar el Valor Pactado ó TRM!");
                        }
                        return "";
                    }
                    if (getFechaMoneda().trim().equals("")) {
                        if(showMsg){
                           metodos.msgAdvertencia(null, "Debe registrar la fecha del Valor Pactado ó TRM!");
                        }else{
                           Logs.log("Debe registrar la fecha del Valor Pactado ó TRM!");
                        }
                        return "";
                    }
                }
            }
        
            try {
                Socket s = new Socket(Propiedades.getInstancia().getHostSFTP(), Propiedades.getInstancia().getPuertoSFTP());
                if (s.isConnected()) {
                    Logs.log("Factuando electronicamente");
                }
            } catch (Exception e) {
                Logs.error(e);
                if(showMsg){
                     metodos.msgAdvertencia(null, "No se puede facturar electrónicamente sin conexión a internet !");
                }else{
                     Logs.warn("No se puede facturar electrónicamente sin conexión a internet !");
                }
                return null;
            }
                     
    
            if (nodo.getCategoria() != null) {
                if (nodo.getCategoria().equals("")) {
                    if(showMsg){
                         metodos.msgAdvertenciaAjustado(null, "El cliente debe tener codigo postal");
                    }else{
                         Logs.warn("El cliente debe tener codigo postal");
                    }

                   return "";
                }
            }

            if (nodo.getDireccion() != null) {
                if (nodo.getDireccion().trim().equals("")) {
                   
                    if(showMsg){
                         metodos.msgAdvertenciaAjustado(null, "El cliente debe tener una dirección");
                    }else{
                         Logs.warn("El cliente debe tener una dirección");
                    }
                    return "";
                }
            }
            
            if (nodo.getEmail() != null) {
                if (nodo.getEmail().trim().equals("")) {
                   
                    if(showMsg){
                         metodos.msgAdvertenciaAjustado(null, "El cliente debe tener una email");
                    }else{
                         Logs.warn("El cliente debe tener una email");
                    }
                    return "";
                }
            }

            if (nodo.getId() != null && nodo.getNaturaleza().equals("Persona juridica")) {
                
                if(!nodo.getTipo().equals("Nit") && !nodo.getTipo().equals("NIT") && !nodo.getTipo().equals("NIT de otro país")){
                  if(showMsg){  
                  metodos.msgAdvertencia(null, "El cliente debe tener como tipo de identificacion Nit");
                  }else{
                    Logs.warn("El cliente debe tener como tipo de identificacion Nit");
                  }
                  return "";
                }
                
                if (nodo.getId().contains("-")) {
                    if (null == nodo.getId().split("-")[1]) {
                          if(showMsg){
                               metodos.msgAdvertencia(null, "El cliente debe tener dígito de verificación");
                          }else{
                               Logs.warn("El cliente debe tener dígito de verificación");
                          }    
                        return "";
                    }
                }else {
                    if(showMsg){
                      metodos.msgAdvertencia(factura, "El cliente debe tener dígito de verificación");
                    }else{
                      Logs.warn("El cliente debe tener dígito de verificación");
                    }
                    return "";
                }
            }

            String vendedor = "";
            try {
                vendedor = cmbVendedor.getSelectedItem().toString();
            } catch (Exception e) {
            }

            if (vendedor != null) {
                if (vendedor.equals("") || vendedor.equals(" ")) {
                   if(showMsg){
                        metodos.msgAdvertencia(null, "Debe seleccionar un vendedor");
                   }else{
                        Logs.warn("Debe seleccionar un vendedor");
                   }   
                    return "";
                }
            } else {
                   if(showMsg){
                        metodos.msgAdvertenciaAjustado(null, "Debe seleccionar un vendedor");
                   }else{
                        Logs.warn("Debe seleccionar un vendedor");
                   } 
                return "";
            }
        }

        //VALIDAMOS LAS DESCRIPCIONES DE LOS PRODUCTOS
        
        if (tblProductos.getRowCount() > 0) {
              //RECORRER TODO LOS PRODUCTOS MESA - RESTAURANTE 
            for (int i = 0; i < tblProductos.getRowCount(); i++) {
                String name = tblProductos.getValueAt(i, 1).toString();
              
                if (name.length() > 255) {
                   if(showMsg){
                        metodos.msgAdvertencia(null, "La descripción del producto supera los 255 caracteres!");
                   }else{
                        Logs.warn("La descripción del producto supera los 255 caracteres!");
                   } 
                    return "";
                }

                if (tblProductos.getValueAt(i, 2).toString().equals(this.simbolo + " 0")) {
                   if(showMsg){
                        metodos.msgAdvertenciaAjustado(null, "El valor debe ser mayor a " + this.simbolo + " 0");
                   }else{
                        Logs.warn("El valor debe ser mayor a " + this.simbolo + " 0");
                   } 
                    return "";
                }
                
                if (tblProductos.getValueAt(i, 3).toString().equals("0") || tblProductos.getValueAt(i, 3).toString().trim().equals("")) {
                   if(showMsg){
                        metodos.msgAdvertenciaAjustado(null, "El valor debe ser mayor a 0");
                   }else{
                        Logs.warn("El valor debe ser mayor a 0");
                   } 
                    return "";
                }
                
                if (Double.parseDouble(tblProductos.getValueAt(i, 3).toString().replace(".", "").replace(",", ".")) < 0) {
                   if(showMsg){
                        metodos.msgAdvertenciaAjustado(null, "El valor debe ser mayor a 0");
                   }else{
                        Logs.warn("El valor debe ser mayor a 0");
                   } 
                    return "";
                }

                if (comprobante.equals("Facturación Electronica")) {

                    String paisFact = instancias.getConfiguraciones().getPais();

                    if (paisFact.equals("Panama")) {
                        if (!tblProductos.getValueAt(i, 7).toString().equals("0")
                                && !tblProductos.getValueAt(i, 7).toString().equals("7")
                                && !tblProductos.getValueAt(i, 7).toString().equals("10")
                                && !tblProductos.getValueAt(i, 7).toString().equals("15")) {
                            
                               if(showMsg){
                                    metodos.msgAdvertencia(null, "El tax del producto '" + tblProductos.getValueAt(i, 1) + "' debe ser 0,5,7,10 ó 15");
                               }else{
                                    Logs.warn("El tax del producto '" + tblProductos.getValueAt(i, 1) + "' debe ser 0,5,7,10 ó 15");
                               } 
                            
                            return "";
                        }
                    }

                    if (tblProductos.getValueAt(i, 1).toString().length() < 5) {
                        if(showMsg){
                            metodos.msgAdvertencia(factura, "El producto '" + tblProductos.getValueAt(i, 1) + "' debe tener una descripción mas larga");
                        }else{
                             Logs.warn("El producto '" + tblProductos.getValueAt(i, 1) + "' debe tener una descripción mas larga");
                        } 
                        
                        return "";
                    }

                    if (tblProductos.getValueAt(i, 36).toString().equals("")) {
                        if(showMsg){
                            metodos.msgAdvertencia(factura, "El producto '" + tblProductos.getValueAt(i, 1) + "' no tiene unidad de medida");
                        }else{
                             Logs.warn("El producto '" + tblProductos.getValueAt(i, 1) + "' no tiene unidad de medida");
                        } 
                        
                        return "";
                    }
                }

                calcularTabla(i, true);
            }
        }

        //SI ES DOMICILIO: VALIDA QUE HALLAN RELACIONADO UN USUARIO AL DOMICILIO
        if (tipo.equals("mesa") && lbTitulo.getText().equals("DOMICILIO")) {
            if (txtNit.getText().equals("") || txtNit.getText().equals("1010")) {
                 if(showMsg){
                   metodos.msgAdvertenciaAjustado(factura, "¡Debe asociar un cliente!");
                }else{
                     Logs.warn("¡Debe asociar un cliente!");
                } 
                
                return "";
            }

            //SE ASIGNA AUTOMÁTICAMENTE 1 DIA DE PLAZO PARA EL DOMICILIO
            txtDiasPlazo.setText("1");
            calcularDiasPlazo(null);
        }

        //SI ES CUENTA COBRO: VALIDA QUE HALLAN RELACIONADO UN USUARIO A LA CUENTA DE COBRO
        if (tipo.equals("cuentaCobro")) {
            if (txtNit.getText().equals("") || txtNit.getText().equals("1010")) {
                if(showMsg){
                     metodos.msgAdvertenciaAjustado(factura, "¡Debe asociar un cliente!");
                }else{
                    Logs.warn("¡Debe asociar un cliente!");
                } 
                
                return null;
            }

            //VALIDA QUE HALLAN INGRESADO LA CANTIDAD DE INCREMENTO
            if (txtCantIncremento.getText().equals("")) {
                if(showMsg){
                    metodos.msgAdvertenciaAjustado(null, "Falta la cantidad para el incremento");
                }else{
                    Logs.warn("Falta la cantidad para el incremento");
                }
                
                return null;
            }
        }

        //SI ES UNA FACTURA A CREDITO, SE VALIDA QUE EL CLIENTE TENGA CUPO DE CREDITO
        if (!saltarPasosFactura) {
            if ((Boolean) datos[42]) {
                if (tipo.equals("facturacion")) {
                    if (txtDiasPlazo.getText().equals("0") || txtDiasPlazo.getText().equals("")) {
                    } else {
                        if (big.getMoneda(txtCupo.getText()).compareTo(BigDecimal.ZERO) <= 0) {
                            if(showMsg){
                                 metodos.msgAdvertenciaAjustado(null, "No tiene cupo de credito");
                                if (metodos.msgPregunta(factura, "¿Desea seguir con la factura?") != 0) {
                                    return null;
                                }
                            }else{
                                Logs.warn("No tiene cupo de credito");
                            }
                           
                        }
                    }
                }
            }
        }

        //DÍAS DE PLAZO OBLIGATORIO SI ES UN PLAN SEPARE
        if (tipo.equals("separe")) {
            if (txtDiasPlazo.getText().equals("0") || txtDiasPlazo.getText().equals("")) {
                if(showMsg){
                    metodos.msgAdvertencia(null, "No ha ingresado días de plazo");
                }else{
                    Logs.warn("No ha ingresado días de plazo");
                }
                
                return null;
            }
        }

        //SI EL SISTEMA ESTA EN MODO DE PRUEBA, SE HACE LA VALIDACION DE CUANTOS MOVIMIENTOS TIENE DISPONIBLES
        if (instancias.getConfiguraciones().isPeriodo()) {
            int consecutivo = 0;
            int numFacturas = Integer.parseInt(instancias.getConfiguraciones().getNumFacturas());
            int aviso = numFacturas - Integer.parseInt(instancias.getConfiguraciones().getAviso());
            Object[] conse;

            
            
            
            //pendiente validar ya que estos consecutivos no existen en la tabla de erroresdetalle
            if (tipo.equals("facturacion")) {
//                conse = instancias.getSql().getNumConsecutivoFact("FACT");
//                consecutivo = Integer.parseInt(conse[0].toString());
                consecutivo = instancias.getSql().getProximoConsecutivoFactura("FACT");
            } else if (tipo.equals("orden")) {
//                conse = instancias.getSql().getNumConsecutivoFact("OSERV");
//                consecutivo = Integer.parseInt(conse[0].toString());
                consecutivo = instancias.getSql().getProximoConsecutivoFactura("OSERV");
            } else if (tipo.equals("cotizacion")) {
//                conse = instancias.getSql().getNumConsecutivoFact("COTI");
//                consecutivo = Integer.parseInt(conse[0].toString());
                  consecutivo = instancias.getSql().getProximoConsecutivoFactura("COTI");
            } else if (tipo.equals("pedido")) {
//                conse = instancias.getSql().getNumConsecutivoFact("PEDIDO");
//                consecutivo = Integer.parseInt(conse[0].toString());
                  consecutivo = instancias.getSql().getProximoConsecutivoFactura("PEDIDO");
            } else if (tipo.equals("separe")) {
//                conse = instancias.getSql().getNumConsecutivoFact("SEPARE");
//                consecutivo = Integer.parseInt(conse[0].toString());
                  consecutivo = instancias.getSql().getProximoConsecutivoFactura("SEPARE");
            } else if (tipo.equals("mesa")) {
//                conse = instancias.getSql().getNumConsecutivoFact("CONGELADA");
//                consecutivo = Integer.parseInt(conse[0].toString());
                  consecutivo = instancias.getSql().getProximoConsecutivoFactura("CONGELADA");
            }

            if (consecutivo >= numFacturas) {
                if(showMsg){
                    metodos.msgError(factura, "Ya llego al límite de facturas");
                }else{
                    Logs.warn("Ya llego al límite de facturas");
                }
                
                return null;
            }
            if (consecutivo > aviso) {
                if(showMsg){
                    metodos.msgAdvertencia(factura, "Su período de prueba esta pronto a vencerce, Comuniquese al 322 32 59 para activar la licencia.");
                }else{
                    Logs.warn("Su período de prueba esta pronto a vencerce, Comuniquese al 322 32 59 para activar la licencia.");
                }
                
            }
        }
        //FIN DE VALIDACION PRUEBA

        tblProductos.removeEditor();
        tblInventario.removeEditor();

        Boolean bolsa = false;
        Boolean facturarSinInventario = (Boolean) datos[79];

        int cantProdFact = 0;
        String baseUtilizada = obtenerBase();
     
        if (!saltarPasosFactura) {
            //HACEMOS CONTEO DE LOS ITEMS DE LOS PRODUCTOS PREPARADOS
            for (int i = 0; i < tblProductos.getRowCount(); i++) {
                ndProducto nodo = instancias.getSql().getDatosProducto(tblProductos.getValueAt(i, 32).toString(), baseUtilizada);
                if (nodo.getUsuario().equals("FACTURA")) {
                    String opciones = "";
                    Map preparacion = new HashMap();
                    ArrayList<Map> ingredientes = new ArrayList<Map>();
                    ArrayList<Map> adiciones = new ArrayList<Map>();
                    try {
                     
                        if(!tblProductos.getValueAt(i, 21).toString().equals("")){
                             preparacion = (Map) tblProductos.getValueAt(i, 21);
                             ingredientes = (ArrayList<Map>) preparacion.get("ingredientes"); 
                             adiciones = (ArrayList<Map>) preparacion.get("adiciones"); 
                             
                        }
                    } catch (Exception e) {
                    }
                   
                    if (preparacion.isEmpty()) {
                        Object[][] productos = instancias.getSql().getCantidadesDiscosteo(tblProductos.getValueAt(i, 32).toString());
                        cantProdFact = cantProdFact + productos.length;
                    } else {
//                        cantProdFact = cantProdFact + opciones.split(", ").length;
                        cantProdFact = cantProdFact + ingredientes.size()+ adiciones.size();
                    }
                }
            }

            //CREAMOS LOS OBJETOS
            Object[][] productosSinInventario = new Object[tblProductos.getRowCount()][4];
            Object[][] productosUtilidades = new Object[tblProductos.getRowCount()][3];
            Object[][] productosSinInventarioDis = new Object[cantProdFact][5];

            Boolean entro = false, entroUtilidad = false;
            int ser = 0, ser1 = 0, contadorUtilidades = 0;

            //INICIAMOS CON LA VALIDACIÓN DEL INVENTARIO
            for (int i = 0; i < tblProductos.getRowCount(); i++) {

                //VALIDAMOS QUE LA FACTURA INCLUYA LA BOLSA
                if (tblProductos.getValueAt(i, 32).equals("PROD-000000032")) {
                    bolsa = true;
                }

                ndProducto nodo = instancias.getSql().getDatosProducto(tblProductos.getValueAt(i, 32).toString(), baseUtilizada);

                if (nodo.getManejaInventario()) {
                    
                    BigDecimal num = BigDecimal.ZERO;
                    try {
                        num = big.getBigDecimal(tblInventario.getValueAt(i, 2).toString().replace(",", "."));
                    } catch (Exception e) {
                    }

                    //SI ES UN PRODUCTO CON DISEÑO
                    if (nodo.getUsuario().equals("FACTURA")) {
                        String opciones = "";

                        try {
                           
                            opciones = tblProductos.getValueAt(i, 21).toString().split("; ")[3];
                        } catch (Exception e) {
                        }

                        String opciones2[];
                        if (!opciones.equals("")) {
                            opciones2 = opciones.split(", ");
                            for (int k = 0; k < opciones2.length; k++) {
                                String codigo = opciones2[k].split("/")[1];
                                String cant = opciones2[k].split("/")[2];
                                String estado = opciones2[k].split("/")[3];

                                if (estado.equals(" true")) {
                                    ndProducto nodo1 = instancias.getSql().getDatosProducto(codigo, baseUtilizada);
                                    Double cant1 = Double.parseDouble(nodo1.getFisicoInventario().replace(",", "."));
                                    Double total = cant1 - Double.parseDouble(cant.replace(",", "."));

                                    if (total < 0) {
                                        productosSinInventarioDis[ser1][0] = nodo1.getIdSistema();
                                        productosSinInventarioDis[ser1][1] = nodo1.getDescripcion();
                                        productosSinInventarioDis[ser1][2] = cant1;
                                        productosSinInventarioDis[ser1][3] = total;
                                        productosSinInventarioDis[ser1][4] = cant;
                                        entro = true;
                                        ser1++;
                                    }
                                }
                            }
                        } else {
                            Object[][] productos = instancias.getSql().getCantidadesDiscosteo(tblProductos.getValueAt(i, 32).toString());
                            for (int k = 0; k < productos.length; k++) {
                                String codigo = productos[k][0].toString();
                                String cant = productos[k][1].toString();

                                ndProducto insumo = instancias.getSql().getDatosProducto(codigo, baseUtilizada);
                                Double cant1 = Double.parseDouble(insumo.getFisicoInventario().replace(",", "."));
                                Double total = cant1 - Double.parseDouble(cant.replace(",", "."));

                                if (total < 0) {
                                    productosSinInventarioDis[ser1][0] = insumo.getIdSistema();
                                    productosSinInventarioDis[ser1][1] = insumo.getDescripcion();
                                    productosSinInventarioDis[ser1][2] = cant1;
                                    productosSinInventarioDis[ser1][3] = total;
                                    productosSinInventarioDis[ser1][4] = cant;
                                    entro = true;
                                    ser1++;
                                }
                            }
                        }
                    } else {
                        //SI ES UN PRODUCTO NORMAL
                        if (num.compareTo(BigDecimal.ZERO) < 0) {
                            if (nodo.getManejaInventario()) {
                                productosSinInventario[ser][0] = nodo.getIdSistema();
                                productosSinInventario[ser][1] = nodo.getDescripcion();
                                productosSinInventario[ser][2] = tblInventario.getValueAt(i, 1);
                                productosSinInventario[ser][3] = tblInventario.getValueAt(i, 2);
                                entro = true;
                                ser++;
                            } else {
                                Logs.log("Este producto no maneja inventario.");
                            }
                        }
                    }

                    //VALIDAMOS LAS UTILIDADES DE LOS PRODUCTOS
                    if (tblProductos.getValueAt(i, 15).equals("ERROR1")) {
                        productosUtilidades[contadorUtilidades][0] = tblProductos.getValueAt(i, 32);
                        productosUtilidades[contadorUtilidades][1] = tblProductos.getValueAt(i, 1);
                        productosUtilidades[contadorUtilidades][2] = "Utilidad minima sobrepasada";
                        contadorUtilidades++;
                        entroUtilidad = true;
                    } else if (tblProductos.getValueAt(i, 15).equals("ERROR2")) {
                        productosUtilidades[contadorUtilidades][0] = tblProductos.getValueAt(i, 32);
                        productosUtilidades[contadorUtilidades][1] = tblProductos.getValueAt(i, 1);
                        productosUtilidades[contadorUtilidades][2] = "Utilidad maxima sobrepasada";
                        contadorUtilidades++;
                        entroUtilidad = true;
                    }
                }
            }
            //FIN DE VALIDACIÓN DEL INVENTARIO

            //VALIDAMOS SI LOS PRODUCTOS PREPARADOS TIENE ALGUNA ADICCIÓN PARA AGREGARLOS A LA FACTURA
            if (instancias.getConfiguraciones().isRestaurante()) {
                agregarAdicionesATabla(baseUtilizada);
            }

            //VALIDAMOS SI TIENE ALGUNA ALERTA DE UTILIDAD PARA MOSTRARLO
            if (entroUtilidad) {
                if (instancias.isMensajeUtilidad()) {
                    dlgProductosSinUtilidad prodSinUtilidad = new dlgProductosSinUtilidad(null, true, productosUtilidades, instancias.isUtilidad());
                    prodSinUtilidad.setVisible(true);

                    if (instancias.getCancelarFactura()) {
                        borrarAdiciones();
                        facturandoPedidos = false;
                        instancias.setCancelarFactura(false);
                        return "";
                    }
                }
            }

            //VALIDAMOS SI TIENE ALGUNA ALERTA DE PRODUCTOS SIN INVENTARIO PARA MOSTRARLO
            if (!this.tipo.equals("cotizacion")) {
                if (entro) {
                    if (!facturarSinInventario) {
                        if(showMsg){
                            metodos.msgError(factura, "---No tiene inventario suficiente..");
                        }else{
                            Logs.warn("---No tiene inventario suficiente.");
                        }
                        
                        return "";
                    } else {
                        dlgProductosSinInventario prodSinInventario = new dlgProductosSinInventario(null, true, productosSinInventario,
                                productosSinInventarioDis);
                        prodSinInventario.setVisible(true);

                        if (instancias.getCancelarFactura()) {
                            borrarAdiciones();
                            facturandoPedidos = false;
                            instancias.setCancelarFactura(false);
                            return "";
                        }
                    }
                }
            }

            //SI ES UNA FACTURA Y ES REGIMEN COMÚN, SE VALIDA EL NUMERO DE BOLSAS A FACTURAR
            if (instancias.getRegimen().equals("")) {
                if (tipo.equals("facturacion") || (tipo.equals("mesa") && lbTitulo.getText().equals("DOMICILIO"))) {

                    if (!bolsa) {

                        if (!instancias.getConfiguraciones().isParqueadero()) {
                            if ((Boolean) datos[52]) {
                                int num = 0;
                                try {
                                    num = Integer.parseInt(metodos.msgIngresarEnter(null, "Ingrese # de bolsas"));
                                } catch (Exception e) {
                                    Logs.error(e);
                                    borrarAdiciones();
                                    if(showMsg){
                                        metodos.msgError(factura, "Número no válido");
                                    }else{
                                        Logs.warn("Número no válido");
                                    }
                                    
                                    return "";
                                }

                                if (num > 0) {
                                    cargarProducto("IMP01", String.valueOf(num), 1, "", "", "", true, "", "", "", "", "", "");
                                }
                            }
                        }
                    }
                    entro = false;
                }
            }
        }

        //SI ES MESA, SE SALTAN LOS PASOS DE LA FACTURA
        if (tipo.equals("mesa")) {
            saltarPasosFactura = true;
        }

        //VALIDAMOS SI HACE PAGO A TERCEROS EN LA FACTURA
        int contador = 0;
        for (int i = 0; i < tblProductos.getRowCount(); i++) {
            BigDecimal pago = big.getMoneda(tblProductos.getValueAt(i, 19).toString());
            if (pago.compareTo(BigDecimal.ZERO) > 0) {
                BigDecimal venta = big.getMoneda(tblProductos.getValueAt(i, 9).toString());
                BigDecimal pago1 = big.getMoneda(tblProductos.getValueAt(i, 19).toString());

                BigDecimal resta = venta.subtract(pago1);

                tblProductos.setValueAt(resta, i, 20);
                if (resta.compareTo(BigDecimal.ZERO) < 0) {
                    contador = contador + 1;
                }
            }
        }

        if (contador > 0) {
            if(showMsg){
                metodos.msgAdvertencia(factura, "¡Hay algunos productos que no tienen utilidad!");
            }else{
                Logs.warn("¡Hay algunos productos que no tienen utilidad!");
            }
            
        }
        //FIN DE VALIDACION DE PAGO A TERCEROS

        //SE VALIDA EL INVENTARIO INGRESADO EN LA ORDEN DE SERVICIO
        if (tipo.equals("orden")) {
            if (instancias.getConfiguraciones().isServicioAutomotor()) {
                Boolean entro = false;
                for (int i = 0; i < tblArticulos.getRowCount(); i++) {
                    if ((Boolean) tblArticulos.getValueAt(i, 2)) {
                        entro = true;
                    }
                }
                if (!entro) {
                    if(showMsg){
                        metodos.msgError(factura, "No ha ingresado el inventario");
                    }else{
                        Logs.warn("No ha ingresado el inventario");
                    }
                    
                    return null;
                }
            }
        }

        //SE VALIDA SI ES UNA FACTURA A CREDITO, Y EL PORCENTAJE DE INTERES ESTA EN 0%
        if (facturaCredito) {
            int interes = Integer.parseInt(txtInteres.getText());
            if (interes == 0) {
                if(showMsg){
                    if (metodos.msgPregunta(null, "Interes del 0%. ¿Desea continuar?") != 0) {
                        return "";
                    }
                }else{
                    Logs.warn("Interes del 0%");
                }
                
            }
        }

        //OBTENEMOS LOS DÍAS DE PLAZO DE LA FACTURA
        int diasPlazo = 0;
        try {
            diasPlazo = Integer.parseInt(txtDiasPlazo.getText());
        } catch (Exception e) {
            diasPlazo = 0;
        }

        //SI LA OPCIÓN DE SISTECREDITO ESTA SELECCIONADA, SE VÁLIDA QUE LOS DIAS DE PLAZO SEA MAYOR A 0
        if (chkSisteCredito.isSelected() && diasPlazo <= 0) {
            if(showMsg){
                metodos.msgAdvertencia(null, "Debe ingresar los días de plazo para facturar por Sistecredito");
            }else{
                Logs.warn("Debe ingresar los días de plazo para facturar por Sistecredito");
            }
            
            return "";
        }

        //VALIDACIONES SI ES UNA FACTURA A CREDITO
        if (facturaCredito) {
            if (txtCuotas.getText().equals("0") || txtCuotas.getText().equals("")) {
                if(showMsg){
                    metodos.msgError(null, "No ha ingresado el número de cuotas");
                }else{
                    Logs.error("No ha ingresado el número de cuotas");
                }
                
                return null;
            }
            if (cmbTipoPlazo.getSelectedIndex() == 0) {
                if(showMsg){
                    metodos.msgError(null, "No ha seleccionado el tipo de plazo");
                }else{
                    Logs.error("No ha seleccionado el tipo de plazo");
                }
                
                return null;
            }

            if (metodos.fecha(metodos.desdeDate(dtFechaDesenvolso.getCurrent())).equals(metodosGenerales.fecha())) {
                if(showMsg){
                    metodos.msgError(null, "Seleccione la fecha de pago");
                }else{
                    Logs.error("Seleccione la fecha de pago");
                }
                
                return null;
            }

            int x = tblCuotas.getRowCount();
            if (x <= 0) {
                if(showMsg){
                    metodos.msgError(null, "No ha ingresado cuotas");
                }else{
                    Logs.error("No ha ingresado cuotas");
                }
                
                return null;
            }
        }

        return facturar(null, imprimir, "");
    }

    public String obtenerBase() {
        String baseUtilizada = txtBodega.getText();
        if (instancias.getConfiguraciones().isInventarioBodegas()) {
            if (baseUtilizada.equals("123-22")) {
                baseUtilizada = "bdProductos";
            } else if (baseUtilizada.equals("BODEGA-1")) {
                baseUtilizada = "bdProductosBodega1";
            } else if (baseUtilizada.equals("BODEGA-2")) {
                baseUtilizada = "bdProductosBodega2";
            } else if (baseUtilizada.equals("BODEGA-3")) {
                baseUtilizada = "bdProductosBodega3";
            } else if (baseUtilizada.equals("BODEGA-4")) {
                baseUtilizada = "bdProductosBodega4";
            }
        } else {
            baseUtilizada = "bdProductos";
        }
        return baseUtilizada;
    }

    public void modificarPedido(String pedido, Object[][] productos) throws Exception{

        this.setTipo("pedido");
        cmbCargar.setSelectedIndex(3);
        txtCargar.setText(pedido);
        cargarMovimiento();

        for (int i = 0; i < productos.length; i++) {
            Boolean entro = false;
            for (int j = 0; j < tblProductos.getRowCount(); j++) {
                if (productos[i][0].equals(tblProductos.getValueAt(j, 32))) {
                    entro = true;
                    tblProductos.setValueAt(productos[i][1].toString(), j, 3);
                    KeyEvent x = new KeyEvent(this, WIDTH, WIDTH, WIDTH, KeyEvent.VK_ENTER);
                    tblProductosKeyReleased(x);
                    break;
                }
            }

            if (!entro) {
                cargarProducto(productos[i][0].toString(), productos[i][1].toString(), 1, "", "", "", true, "", "", "", "", "", "");
            }
            entro = false;
        }

        saltarPasosFactura = true;
        btnActualizarActionPerformed(null);
    }
    
    public void setMinimoDias(int diasAtras) {
        LocalDate date = LocalDate.now().minusDays(diasAtras);
        Calendar calendar = Calendar.getInstance();
        calendar.clear();
        calendar.set(date.getYear(), date.getMonthValue() - 1, date.getDayOfMonth());
        expFE.setMinDate(calendar);
    }
    
    public void setRestablecerCalendario() {
        LocalDate date = LocalDate.now();
        Calendar calendar = Calendar.getInstance();
        calendar.clear();
        calendar.set(date.getYear(), date.getMonthValue() - 1, date.getDayOfMonth());
        expFE.setSelectedDate(calendar);
    }

    public void limpiar(boolean actualizar, String accion) {

        if (tipo.equals("cuentaCobro")) {
            btnActualizar.setVisible(false);
        }
     
        setRestablecerCalendario();
        boolean ingresaUnaVez= true;
        fechaFacturaAutomatica = "";
        loteCuentasCobro = "";
        instancias.setCancelarFactura(false);
        jLMoneda.setText("");
        setFechaMoneda("");
        setTrmMoneda("");
        cmbTipoOperacion.setSelectedIndex(9);
        chkSinEstablecer.setSelected(false);
        txtCantIncremento.setText("");
        txtCantFacturados.setText("");

        dtDesde.setSelectedDate(metodos.haciaDate(metodos.fecha3(metodosGenerales.fecha())));
        dtHasta.setSelectedDate(metodos.haciaDate(metodos.fecha3(metodosGenerales.fecha())));

        chkSisteCredito.setEnabled(false);
        chkSisteCredito.setSelected(false);

        facturandoPedidos = false;
        lbCupo.setVisible(false);
        txtGarantiaFuncionamiento.setText("");
        txtGarantiaSeñal.setText("");

        txtCant.setText(datos[87].toString());
        tblProductos.setEnabled(true);

        setTipo();
        txtNombre.setEnabled(false);
        txtNombre.setEditable(false);

        if (tipo.equals("mesa")) {
            instancias.getSql().cambiarEstadoMesa(instancias.getTitulo(), "DISPONIBLE");
        }
 
        if (accion.equals("SI")) {
            if (tipo.equals("mesa")) {
                instancias.getSql().eliminar_registro("bdCongelada", " idFactura = '" + "CONGELADA-" + lbNoFactura.getText() + "' ");

                String baseUtilizada = obtenerBase();
                if (productosMovimientos != null) {
                    if (productosMovimientos.length > 0) {
                        for (int k = 0; k < productosMovimientos.length; k++) {
                            String sql1 = " where codigo = '" + productosMovimientos[k] + "' ";

                            String cong = "";
                            if (baseUtilizada.equals("bdProductos")) {
                                cong = "totalizadoCongelada";
                            } else if (baseUtilizada.equals("bdProductosBodega1")) {
                                cong = "totalizadoCongelada1";
                            } else if (baseUtilizada.equals("bdProductosBodega2")) {
                                cong = "totalizadoCongelada2";
                            } else if (baseUtilizada.equals("bdProductosBodega3")) {
                                cong = "totalizadoCongelada3";
                            } else if (baseUtilizada.equals("bdProductosBodega4")) {
                                cong = "totalizadoCongelada4";
                            }
                            
                                
                                 Object data[];
                                 data = instancias.getSql().getDocumentoAnuladoArmado("bdCosteo", "Where Id='" + productosMovimientos[k] + "' "); 
                                 
                                 if(data[0] != null ){
                                  ingresaUnaVez = false;
                                 }
                                 
                                String codigoPreparacion = instancias.getSql().tipoProductoPreparacion(productosMovimientos[k].toString(),"COSTEO");
                                if(!codigoPreparacion.equals("COSTEO")){
                                 if (ingresaUnaVez == true) {
                                     Map preparacion = new HashMap();
                                        ingresaUnaVez = false;
                                        for (int d = 0; d < tblProductos.getRowCount(); d++) {
                                           String codigoPrep = instancias.getSql().tipoProductoPreparacion(tblProductos.getValueAt(d, 32).toString(),"COSTEO");
                                            if(!codigoPrep.equals("COSTEO")){
                                                if (!tblProductos.getValueAt(d, 21).toString().equals("")) {
                                                    preparacion = (Map) tblProductos.getValueAt(d, 21);
                                                    eliminarAdicional(preparacion, baseUtilizada);
                                                }
                                            }
                                            
                                        }
                                    }
                                }
                            Object[][] congelada = instancias.getSql().getTotalizadoCongelada(sql1, cong);

                            double total = 0;
                            try {
                                total = Double.parseDouble(congelada[0][1].toString().replace(",", "."));
                            } catch (Exception e) {
                            }

                            String total1 = String.valueOf(df.format(total)).replace(".", ",");
                            instancias.getSql().modificarInventario("congelada", total1, productosMovimientos[k].toString(), baseUtilizada);

                            ndProducto nodo = instancias.getSql().getDatosProducto(productosMovimientos[k].toString(), baseUtilizada);
                            actualizarFisicoInventario(nodo, productosMovimientos[k].toString(), baseUtilizada);
                        }
                    }
                }
            }
        }

        btnGuardar.setEnabled(true);
        btnGuardar.setVisible(true);

        btnGuardar1.setVisible(true);
        btnGuardar1.setEnabled(true);

//        if (tipo.equals("pedido") || tipo.equals("orden")) {
//            btnGuardar1.setText("GUARDAR/IMPRIMIR");
//            btnGuardar.setText("GUARDAR");
//        } else {
//
//            if (tipo.equals("separe")) {
//                btnGuardar1.setText("FACT/IMPRIMIR");
//                btnGuardar.setText("FACTURAR");
//            }
//
//            btnGuardar1.setText("FACT/IMPRIMIR");
//            btnGuardar.setText("FACTURAR");
//        }
        String turno = "";
        if (txtTurno.isVisible() && instancias.getConfiguraciones().isRestaurante()) {
            turno = instancias.getSql().getTurno();
            txtTurno.setText(turno);
        } else {
            txtTurno.setText("");
        }

        instancias.getMaestra().setTurno(turno);
        instancias.getMaestra().actualizarTurno();

//        lbNombre2.setForeground(Color.red);
        txtPlaca.setEnabled(true);
        txtModelo.setEnabled(true);
        txtTipoVehiculo.setEnabled(true);
        txtNumChasis.setEnabled(true);
        txtMarca.setEnabled(true);
        txtKm.setEnabled(true);
        txtMotor.setEnabled(true);
        txtColor.setEnabled(true);
        txtPlaca.setText("");
        txtModelo.setText("");
        txtTipoVehiculo.setText("");
        txtNumChasis.setText("");
        txtMarca.setText("");
        txtKm.setText("");
        txtMotor.setText("");
        txtColor.setText("");

        cotizaciones = null;
        txtRtf.setText(this.simbolo + " 0");
        txtDescGeneral.setText(this.simbolo + " 0");
        txtRiva.setText(this.simbolo + " 0");
        cmbRtf.setSelectedIndex(0);
        chkReteIva.setSelected(false);
        txtObservaciones.setText("");
        txtPorcentaje.setText("");
        txtCargar.setText("");
        txtProblema.setText("");
        tblArticulos.setEnabled(true);
        txtCantProductos.setText("0");
        txtCantUnidades.setText("0");
        focusDiasPlazo = false;

        //PANEL DE CREDITO
        if (facturaCredito) {
            txtCuotas.setText("");
            txtInteres.setText("");
            txtValorCredito.setText("");
            txtTotalIntereses.setText("");
            txtCuotaInicial.setText(this.simbolo + " 0");
            txtValorVenta.setText(this.simbolo + " 0");
            txtTotalCredito.setText(this.simbolo + " 0");
            txtValorCredito.setText(this.simbolo + " 0");
            txtTotalIntereses.setText(this.simbolo + " 0");
            cmbTipoPlazo.setSelectedIndex(0);
            dtFechaDesenvolso.setSelectedDate(metodos.haciaDate2(metodosGenerales.fecha()));
            DefaultTableModel c = (DefaultTableModel) tblCuotas.getModel();
            int h = tblCuotas.getRowCount();
            for (int m = 0; m < h; m++) {
                c.removeRow(0);
            }
        }

        txtMarca.setText("");
        txtKm.setText("");
        txtModelo.setText("");
        txtMotor.setText("");
        txtPlaca.setText("");
        txtNumChasis.setText("");
        txtColor.setText("");
        txtMotor.setText("");

        nodoCotizacion = null;
        nodoOrdenServicio = null;
        ndSepare = null;
        ndPedido = null;
        ndPeluqueria = "";
        ndGuarderia = "";
        ndHospitalizacion = "";
        diasHospitalizacion = "";
        horasHospitalizacion = "";

        if (tipo.equals("mesa")) {
            btnReImprimir.setEnabled(true);
        } else {
            btnReImprimir.setEnabled(false);
        }

        btnActualizar.setEnabled(false);

        tblInventario.removeEditor();
        modeloInventario = (DefaultTableModel) tblInventario.getModel();

        while (tblProductos.getRowCount() > 0) {
            modeloPro.removeRow(0);
        }

        while (tblInventario.getRowCount() > 0) {
            modeloInventario.removeRow(0);
        }

        txtSubTotal.setText(this.simbolo + " 0");
        txtTotal.setText("Total: " + this.simbolo + " 0");
        txtTotalIva.setText(this.simbolo + " 0");
        txtTotalImpoconsumo.setText(this.simbolo + " 0");
        txtTotalDescuentos.setText(this.simbolo + " 0");

//        try {
//            this.setPlazo("0", big.getBigDecimal("0"));
//        } catch (Exception e) {
//        }
        if (actualizar) {
            txtNit.setText("");
            txtNombre.setText("");
            btnCambioMoneda.setVisible(false);
            jLMoneda.setVisible(false);
            txtDiasPlazo.setText("0");
            txtVencimiento.setText(txtFechaFactura.getText());

            int fila = 0;
            for (int i = 0; i < tblComprobantes.getRowCount(); i++) {
                if ((Boolean) tblComprobantes.getValueAt(i, 2)) {
                    fila = i;
                }
            }

            actualizarConsecutivo(fila);

            if (instancias.isVentasPredeterminado() && !tipo.equals("pedido") && !tipo.equals("separe")) {
                cargar1010();
            }
        }

        activarCampos(true);
        cantProductosOrden = 0;
        
        instancias.setDevuelta(BigDecimal.ZERO);
        instancias.setEfectivoDevuelta(big.getBigDecimal("0"));
        instancias.setFranquisia("");
        instancias.setComision("");
        instancias.setValorComision(big.getBigDecimal("0"));
        instancias.setTotalFacturaComision(big.getBigDecimal("0"));
        instancias.setNcDevuelta(big.getBigDecimal("0"));
        instancias.setTarjetaDevuelta(big.getBigDecimal("0"));
        instancias.setChequeDevuelta(big.getBigDecimal("0"));
        instancias.setTarjetaCredito(big.getBigDecimal("0"));
        instancias.setPropina(big.getBigDecimal("0"));
        instancias.setPorcPropina("0");

        DefaultTableModel modelo = (DefaultTableModel) tblArticulos.getModel();
        while (tblArticulos.getRowCount() > 0) {
            modelo.removeRow(0);
        }

        productosMovimientos = null;
        productosMovimientos1 = null;

        actualizarInventario = true;

        if (accion.equals("SI")) {
            if (tipo.equals("mesa")) {
                if (instancias.getConfiguraciones().isRestaurante()) {
                    instancias.getMesas().cargarRegistrosMesas();
                    instancias.getMesas().cargarRegistros();
                    instancias.getMesas().setSelected(true);
                    instancias.getMenu().cambiarTitulo("MESAS");
                } else {
                    instancias.getMesas1().cargarRegistros();
                    instancias.getMesas1().setSelected(true);
                }

                if (!instancias.getMenu().getSeVeElMenu()) {
                    instancias.getMenu().expandirMenu();
                }
            }
        }

        if (tipo.equals("facturacion") || (tipo.equals("mesa") && lbTitulo.getText().equals("DOMICILIO"))) {
            instancias.setTitulo("");
        }

        tblProductos.removeEditor();
        tblInventario.removeEditor();
    }
    
    public void eliminarAdicional(Map preparacion,String baseUtilizada){
          ArrayList<Map> ingredientes = (ArrayList<Map>) preparacion.get("ingredientes");
          ArrayList<Map> adiciones = (ArrayList<Map>) preparacion.get("adiciones");
          if(!ingredientes.isEmpty()){
              for (Map ingrediente : ingredientes) {
                  if(ingrediente.get("estado").equals("true")){
                    double total = Double.parseDouble(ingrediente.get("cantidad").toString());
                    instancias.getSql().modificarInventarioSuma("fisicoInventario", total+"", ingrediente.get("codigo").toString(), baseUtilizada);
                    total = total*-1;
                    instancias.getSql().modificarInventarioSuma("congelada",total+"", ingrediente.get("codigo").toString(), baseUtilizada);
//                    instancias.getSql().modificarInventarioSuma("armado",total+"", ingrediente.get("codigo").toString(), baseUtilizada);
                  }
                }
              for (Map adicion : adiciones) {
                  if(adicion.get("estado").equals("true")){
                    double total = Double.parseDouble(adicion.get("cantidad").toString());
                    instancias.getSql().modificarInventarioSuma("fisicoInventario", total+"", adicion.get("codigo").toString(), baseUtilizada);
                    total = total*-1;
                    instancias.getSql().modificarInventarioSuma("congelada",total+"", adicion.get("codigo").toString(), baseUtilizada);
//                    instancias.getSql().modificarInventarioSuma("armado",total+"", adicion.get("codigo").toString(), baseUtilizada);
                  }
                }
          }
    }

    public void cargar1010() {
        txtNit.setText("1010");
        cargarCliente("1010");
    }

    public void cambiarListaCliente() {
        if (tblInventario.getSelectedRow() != -1) {
            String baseUtilizada = obtenerBase();
            ndProducto codigo = instancias.getSql().getDatosProducto(tblProductos.getValueAt(tblInventario.getSelectedRow(), 32).toString(), baseUtilizada);
            String valor = "";
            switch ((String) tblInventario.getValueAt(tblInventario.getSelectedRow(), 0)) {
                case "L1":
                    valor = big.setMonedaExacta(big.getBigDecimal(codigo.getL1()));
                    break;
                case "L2":
                    valor = big.setMonedaExacta(big.getBigDecimal(codigo.getL2()));
                    break;
                case "L3":
                    valor = big.setMonedaExacta(big.getBigDecimal(codigo.getL3()));
                    break;
                case "L4":
                    valor = big.setMonedaExacta(big.getBigDecimal(codigo.getL4()));
                    break;
                case "L5":
                    valor = big.setMonedaExacta(big.getBigDecimal(codigo.getL5()));
                    break;
                case "L6":
                    valor = big.setMonedaExacta(big.getBigDecimal(codigo.getL6()));
                    break;
                case "L7":
                    valor = big.setMonedaExacta(big.getBigDecimal(codigo.getL7()));
                    break;
                case "L8":
                    valor = big.setMonedaExacta(big.getBigDecimal(codigo.getL8()));
                    break;
            }
            int focusIn=0;
            if (codigo.getTipoProducto() != null && codigo.getTipoProducto() != "") {
                this.dinamico = false;
                focusIn = 1;
            } else {
                this.dinamico = true;
            }
            tblProductos.setColumnSelectionInterval(3, 3+focusIn);
            tblProductos.setRowSelectionInterval(tblInventario.getSelectedRow(), tblInventario.getSelectedRow());
            tblProductos.setValueAt(valor, tblInventario.getSelectedRow(), 2);
            tblProductos.transferFocus();

            //simulando enter sobre el producto
            KeyEvent evento = new KeyEvent(tblInventario, 0, 0, 0, 0);
            evento.setKeyCode(KeyEvent.VK_ENTER);
            tblProductosKeyReleased(evento);
        }
    }

    private void calcularDiasPlazo(java.awt.event.KeyEvent evt) {

        if (txtNombre.getText().equals("")) {
            metodos.msgAdvertenciaAjustado(null, "Debe ingresar un cliente2");
            txtDiasPlazo.setText("0");
            chkSisteCredito.setEnabled(false);
            chkSisteCredito.setSelected(false);
            txtNit.requestFocus();
        }

        if (txtNit.getText().equals("1010")) {
            txtNit.requestFocus();
            focusDiasPlazo = true;
            txtDiasPlazo.setText("0");
            return;
        }

//        ndTercero nodo = sql.getDatosTercero(txtNit.getText());
        try {
            txtVencimiento.setText(metodos.sumarFecha(txtFechaFactura.getText(), Integer.parseInt(txtDiasPlazo.getText())));
        } catch (NumberFormatException exep) {
            txtVencimiento.setText(metodos.sumarFecha(txtFechaFactura.getText(), 0));
        }

        chkSisteCredito.setEnabled(true);

        if (!txtDiasPlazo.getText().equals("") && !txtDiasPlazo.getText().equals("0")) {

        } else {
            calcularEfectivo();
        }

        if (evt != null) {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                txtCodProducto.requestFocus();
            }
        }
    }

    private void popBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popBorrarActionPerformed
        
        if (tblProductos.getSelectedRow() > -1) {

            if (!(Boolean) datos[62]) {
                if (tipo.equals("mesa") && !instancias.getUsuario().equals("ADMIN")) {
                    if (metodos.msgPregunta(null, "No se puede borrar ¿Pedir permiso?") == 0) {
                        dlgPedirPermiso permiso = new dlgPedirPermiso(null, true, "mesa");
                        permiso.setLocationRelativeTo(null);
                        permiso.setVisible(true);
                        return;
                    } else {
                        return;
                    }
                }
            }

        int opc = cmbCargar.getSelectedIndex();   
        if(cmbCargar.getItemAt(opc).equals("Cargar FE")){
          metodos.msgAdvertencia(null, "Esta accion no es permitida porque se esta modificando una factura!");
          return;
        }            
            eliminarFila();

        } else {
            metodos.msgAdvertencia(null, "Seleccione un producto");
        }
    }//GEN-LAST:event_popBorrarActionPerformed

    private void cmbListasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbListasItemStateChanged
      
    }//GEN-LAST:event_cmbListasItemStateChanged

    private void cmbListasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbListasActionPerformed

    }//GEN-LAST:event_cmbListasActionPerformed

    private void txtPorcentajeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPorcentajeKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            if (topeDescuento) {
                 double maximoDescuento = big.formatDouble(instancias.getDescuentoMaximoVentas());
                if (Double.parseDouble(txtPorcentaje.getText()) > maximoDescuento) {
                    txtPorcentaje.setText("0");
                    metodos.msgAdvertencia(null, "El maximo descuento permitido es : "+(maximoDescuento)+"%");
                    return;
                }
            }

            tblProductos.removeEditor();

            int xyz = tblProductos.getRowCount();

            if (xyz > 0) {
                for (int y = 0; y < xyz; y++) {
                    tblProductos.setValueAt("0", y, 5);
                    tblProductos.setValueAt(this.simbolo + " 0", y, 6);
                    calcularTabla(y, false);
                }
            }

            if (xyz > 0) {
                BigDecimal porcentaje = big.getBigDecimal(txtPorcentaje.getText());
                for (int y = 0; y < xyz; y++) {
                    tblProductos.setValueAt(porcentaje, y, 5);
                    tblProductos.setValueAt(big.setMoneda(porcentaje.multiply(big.getMoneda(tblProductos.getValueAt(y, 2).toString()).divide(big.getBigDecimal("100")))), y, 6);
                    calcularTabla(y, false);
                }
            }

            txtPorcentaje.setBackground(Color.WHITE);
            txtPorcentaje.setForeground(Color.BLACK);

            cargarTotales();
            txtPorcentaje.requestFocus();
        } else {
            txtPorcentaje.setBackground(new Color(251, 238, 152));
            txtPorcentaje.setForeground(new Color(146, 137, 77));
        }

    }//GEN-LAST:event_txtPorcentajeKeyReleased

    private void txtPorcentajeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPorcentajeKeyTyped
        metodos.soloNum(evt);
    }//GEN-LAST:event_txtPorcentajeKeyTyped

    private void txtCargarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCargarKeyReleased
        
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                bloquearTodo(true);
                cargarMovimiento();
            } else {
                bloquearTodo(true);
                String cargar = txtCargar.getText();
                limpiar(true, "");
                txtCargar.setText(cargar);
                txtNit.setText("");
                txtNombre.setText("");
                btnCambioMoneda.setVisible(false);
                jLMoneda.setVisible(false);
                txtObservaciones.setText("");
    //            this.setNit("", "0", "0");
                NC = null;
                txtCargar.requestFocus();
            }
        
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_txtCargarKeyReleased

    private void txtCargarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCargarKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCargarKeyTyped

    private void txtFechaFacturaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFechaFacturaKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFechaFacturaKeyReleased

    private void txtFechaFacturaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFechaFacturaKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFechaFacturaKeyTyped

    private void txtVencimientoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtVencimientoKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtVencimientoKeyReleased

    private void txtVencimientoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtVencimientoKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtVencimientoKeyTyped

    private void txtDiasPlazoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiasPlazoKeyReleased
        calcularDiasPlazo(evt);
    }//GEN-LAST:event_txtDiasPlazoKeyReleased

    private void txtDiasPlazoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiasPlazoKeyTyped
        metodos.soloNum(evt);
    }//GEN-LAST:event_txtDiasPlazoKeyTyped

    private void cmbRtfItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbRtfItemStateChanged
        cargarTotales();
    }//GEN-LAST:event_cmbRtfItemStateChanged

    private void cmbRtfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbRtfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbRtfActionPerformed

    private void chkReteIvaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkReteIvaItemStateChanged
        cargarTotales();
    }//GEN-LAST:event_chkReteIvaItemStateChanged

    private void chkReteIvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkReteIvaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkReteIvaActionPerformed

    private void txtNitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNitActionPerformed

    private void txtNitKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNitKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cargarCliente(txtNit.getText());
        } else if (!txtNombre.getText().equals("")) {
            txtIdSistema.setText("");
            txtDiasPlazo.setText("0");
            chkSisteCredito.setEnabled(false);
            chkSisteCredito.setSelected(false);
            txtNombre.setText("");
            txtObservaciones.setText("");
            txtCargar.setText("");
            lbCupo.setVisible(false);
            NC = null;
        }
    }//GEN-LAST:event_txtNitKeyReleased

    private void txtNitKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNitKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNitKeyTyped

    private void lbNitKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lbNitKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_lbNitKeyReleased

    private void txtCodProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodProductoActionPerformed

    }//GEN-LAST:event_txtCodProductoActionPerformed

    private void txtCodProductoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodProductoFocusGained
        cargarTotales();
    }//GEN-LAST:event_txtCodProductoFocusGained

    private void txtCodProductoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodProductoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            popBorrarActionPerformed(null);
            return;
        }
        
        int fila = tblProductos.getSelectedRow(), i = 2, j = 0;
            
        try {
            if (tblProductos.getValueAt(fila, 16).equals("REALIZADO") && valorFila != null) {
                tblProductos.setValueAt(valorFila, fila, tblProductos.getSelectedColumn());
                valorFila = null;
                return;
            }
        } catch (Exception e) {
            Logs.error(e);
            return;
        }

        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                if (instancias.isLector()) {

                    if (tblProductos.getSelectedColumn() == 2) {
                        if (tblProductos.getValueAt(fila, 2).toString().equalsIgnoreCase("")) {
                            tblProductos.setValueAt("0", fila, 3);
                        }
                    } else if (tblProductos.getSelectedColumn() == 3) {
                        if (tblProductos.getValueAt(fila, 3).toString().equalsIgnoreCase("") || tblProductos.getValueAt(fila, 3).toString().equalsIgnoreCase("0")) {
                            tblProductos.setValueAt("1", fila, 3);
                        }
                        i = 3;
                    }

                    txtCodProducto.requestFocus();

                } else {
                    if (tblProductos.getSelectedColumn() == 0) {

                        try {
                            int r = tblProductos.getSelectedRow();
                            tblProductos.changeSelection(r, 0, false, false);
                            tblProductos.removeEditor();
                            tblInventario.removeEditor();
                            tblProductos.editCellAt(r, 3);
                            tblProductos.setColumnSelectionInterval(3, 3);
                            tblProductos.transferFocus();
                        } catch (Exception e) {
                            Logs.error(e);
                        }

                    } else if (tblProductos.getSelectedColumn() == 2) {
                        if (tblProductos.getValueAt(fila, 2).toString().equalsIgnoreCase("")) {
                            tblProductos.setValueAt("0", fila, 3);
                        }
                        tblProductos.editCellAt(tblProductos.getSelectedRow(), 3);
                        tblProductos.setColumnSelectionInterval(3, 3);
                        tblProductos.transferFocus();

                    } else if (tblProductos.getSelectedColumn() == 3) {
                        if (tblProductos.getValueAt(fila, 3).toString().equalsIgnoreCase("") || tblProductos.getValueAt(fila, 3).toString().equalsIgnoreCase("0")) {
//                            tblProductos.setValueAt("1", fila, 3);
                        }
                        tblProductos.editCellAt(tblProductos.getSelectedRow(), 5);
                        tblProductos.setColumnSelectionInterval(5, 5);
                        tblProductos.transferFocus();

                        i = 3;

                    } else if (tblProductos.getSelectedColumn() == 5) {
                        // Si se esta cambiando el campo de descuento
                        txtCodProducto.requestFocus();
                        i = 5;
                        j = 0;
                    }

                }

                if (tblProductos.getSelectedColumn() == 17) {

                    tblProductos.editCellAt(tblProductos.getSelectedRow(), 17);
                    tblProductos.setColumnSelectionInterval(17, 17);
                    try {
                        tblProductos.setValueAt(big.setMoneda(big.getMoneda(tblProductos.getValueAt(fila, 17).toString())), fila, 17);
                    } catch (Exception e) {
                        tblProductos.setValueAt(big.setMoneda(big.getBigDecimal("0")), fila, 17);
                    }
                    tblProductos.transferFocus();

                }

                if (tblProductos.getSelectedColumn() == 19) {
                    try {
                        tblProductos.setValueAt(big.setMoneda(big.getMoneda(tblProductos.getValueAt(fila, 19).toString())), fila, 19);
                        BigDecimal resta = big.getMoneda(tblProductos.getValueAt(fila, 9).toString()).subtract(big.getMoneda(tblProductos.getValueAt(fila, 19).toString()));
                        tblProductos.setValueAt(resta, fila, 20);

                        if (resta.compareTo(BigDecimal.ZERO) < 0) {
                            metodos.msgAdvertencia(factura, "No tiene ninguna utilidad!");
                        }
                    } catch (Exception e) {
                        Logs.error(e);
                        tblProductos.setValueAt(big.setMoneda(big.getBigDecimal("0")), fila, 19);
                    }
                    tblProductos.transferFocus();
                }

                int res = big.getBigDecimal(big.getMoneda(tblProductos.getValueAt(fila, i).toString().replace(".", ","))).compareTo(big.getBigDecimal("0"));
                if (res == -1 || String.valueOf(tblProductos.getValueAt(fila, i)).equals("")) {
                    tblProductos.setValueAt(j, tblProductos.getSelectedRow(), i);
                }

                calcularTabla(fila, true);
            }
        } catch (Exception e) {
            Logs.error(e);
            try {
                BigDecimal auxx = big.getBigDecimal(big.getMoneda(tblProductos.getValueAt(fila, 2).toString()));
                tblProductos.setValueAt(big.setMoneda(auxx), fila, 2);
            } catch (Exception ex) {
                Logs.error(ex);
                tblProductos.setValueAt(this.simbolo + " 0", fila, 2);
            }

            try {
                BigDecimal auxx = big.getBigDecimal(tblProductos.getValueAt(fila, 3).toString().replace(",", "."));
                tblProductos.setValueAt(auxx.toString().replace(".", ","), fila, 3);
            } catch (Exception ex) {
                Logs.error(e);
                tblProductos.setValueAt(1, fila, 3);
            }

            tblProductos.setValueAt(this.simbolo + " 0", fila, 6);
            tblProductos.setValueAt("0", fila, 5);

            calcularTabla(fila, true);
        }
        if ((Boolean) tblProductos.getValueAt(fila, 37) == true) {
            
            BigDecimal num1 = big.getMoneda(tblInventario.getValueAt(fila, 1).toString());
            BigDecimal num2 = big.getBigDecimal(tblProductos.getValueAt(fila, 3).toString().replace(",", "."));
            BigDecimal total = num1.subtract(num2);
            Boolean facturarSinInventario = (Boolean) datos[Identidad.facturarSinInventario];
            String factura = tipo() + "-" + consecutivoMesa;
            Object[] existenciaCongelada = new Object[0];
            existenciaCongelada = instancias.getSql().consultarExistenciaCongeladaId(tblProductos.getValueAt(fila, 38).toString());
           
             if (!facturarSinInventario) {
                  if(total.signum()>0){
                      tblInventario.setValueAt(0.0, fila, 2);
                  }else{
                      tblInventario.setValueAt(big.setNumero(total), fila, 2);
                  }
             }else{
              tblInventario.setValueAt(big.setNumero(total), fila, 2);
             }
                         
        } else {
            tblInventario.setValueAt("N/A", fila, 1);
            tblInventario.setValueAt("N/A", fila, 2);
        }
    }//GEN-LAST:event_txtCodProductoKeyPressed

    private void txtCodProductoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodProductoKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String codigo = txtCodProducto.getText().replace("'", "//");
            plu = true;
            
            int pluCli=1;
            if (!txtNit.getText().isEmpty()) {
                ndTercero tercero = instancias.getSql().getDatosTercero(txtNit.getText());
                if (tercero != null && tercero.getLista() != null && !tercero.getLista().trim().isEmpty()) {
                   this.plu = false;
                   pluCli = Integer.valueOf(tercero.getLista().substring(1, 2));
                }
            }
            String cant = txtCant.getText();
            cargarProducto(codigo, cant, pluCli, "", "", "", true, "", "", "", "", "", "");

            if (pnlCredito.isVisible()) {
                calcularCuotasCredito();
            }
        } else if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            btnGuardar.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_MULTIPLY) {
            double cantidad = 1;
            try {
                cantidad = Double.parseDouble(txtCodProducto.getText().replace("*", ""));
            } catch (Exception e) {
            }
            txtCant.setText(String.valueOf(cantidad));
            if (txtCant.getText().substring(txtCant.getText().length() - 1, txtCant.getText().length()).equals("0")) {
                txtCant.setText(txtCant.getText().substring(0, txtCant.getText().length() - 2));
            }
            txtCodProducto.setText("");
        }
    }//GEN-LAST:event_txtCodProductoKeyReleased

    private void lbProductoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lbProductoKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtCodProducto.requestFocus();
        }
    }//GEN-LAST:event_lbProductoKeyReleased

    private void tblArticulosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblArticulosMouseClicked
        if (tblArticulos.getSelectedColumn() == 3) {
            ventanaProblemas();
        } else if (tblArticulos.getSelectedColumn() == 4) {
            ventanaProblemas1();
        }
    }//GEN-LAST:event_tblArticulosMouseClicked

    private void tblArticulosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblArticulosKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tblArticulosKeyPressed

    private void tblArticulosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblArticulosKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (tblArticulos.getSelectedColumn() == 3) {
                ventanaProblemas();
            } else if (tblArticulos.getSelectedColumn() == 4) {
                ventanaProblemas1();
            }
        }
    }//GEN-LAST:event_tblArticulosKeyReleased

    private void btnNuevaParteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevaParteActionPerformed
        try {
            String tipo = txtTipoVehiculo.getText();
            cargarArticulos(tipo);
        } catch (Exception e) {
            Logs.error(e);
        }
    }//GEN-LAST:event_btnNuevaParteActionPerformed

    private void txtPlacaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPlacaKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            Object[][] name = instancias.getSql().getUsuarioPlaca(txtPlaca.getText());

            if (name.length > 0) {
                if (name[0][2] != null) {
                    txtTipoVehiculo.setText(name[0][2].toString());
                }

                if (name[0][4] != null) {
                    txtModelo.setText(name[0][4].toString());
                }

                if (name[0][6] != null) {
                    txtNumChasis.setText(name[0][6].toString());
                }

                if (name[0][3] != null) {
                    txtMarca.setText(name[0][3].toString());
                }

                if (name[0][7] != null) {
                    txtMotor.setText(name[0][7].toString());
                }

                if (name[0][5] != null) {
                    txtColor.setText(name[0][5].toString());
                }

                cargarArticulos(txtTipoVehiculo.getText());

                txtNit.setText(name[0][0].toString());
                cargarCliente(name[0][0].toString());
                btnBuscTerceros.requestFocus();
            } else {
                ventanaPlacas1(txtPlaca.getText(), txtIdSistema.getText());
            }
        } else {
            txtModelo.setText("");
            txtNumChasis.setText("");
            txtMarca.setText("");
            txtMotor.setText("");
            txtColor.setText("");
            txtTipoVehiculo.setText("");
        }
    }//GEN-LAST:event_txtPlacaKeyReleased

    private void cmbTipoPlazoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbTipoPlazoItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbTipoPlazoItemStateChanged

    private void cmbTipoPlazoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbTipoPlazoKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            validarClienteParaCredito();
            calcularCuotasCredito();
        }
    }//GEN-LAST:event_cmbTipoPlazoKeyReleased

    private void txtCuotasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCuotasKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            ndTercero nodo = instancias.getSql().getDatosTercero(txtNit.getText());

//            this.setNit(txtNit.getText(), nodo.getCupo(), nodo.getPlazo());
            validarClienteParaCredito();
            calcularCuotasCredito();
        }
    }//GEN-LAST:event_txtCuotasKeyReleased

    private void txtCuotasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCuotasKeyTyped
        metodos.soloNum(evt);
    }//GEN-LAST:event_txtCuotasKeyTyped

    private void txtInteresKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInteresKeyReleased
        txtInteres.setText(txtInteres.getText().replace(".", ","));
        //txtInteres.setText(big.setNumero2(big.getMoneda(txtInteres.getText())));
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            calcularCuotasCredito();
        }
    }//GEN-LAST:event_txtInteresKeyReleased

    private void txtInteresKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInteresKeyTyped
        metodos.soloNum(evt);
    }//GEN-LAST:event_txtInteresKeyTyped

    private void txtTotalInteresesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTotalInteresesKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalInteresesKeyReleased

    private void txtValorCreditoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtValorCreditoKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtValorCreditoKeyReleased

    private void dtFechaDesenvolsoOnCommit(datechooser.events.CommitEvent evt) {//GEN-FIRST:event_dtFechaDesenvolsoOnCommit
        calcularCuotasCredito();
    }//GEN-LAST:event_dtFechaDesenvolsoOnCommit

    private void txtCuotaInicialKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCuotaInicialKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            ndTercero nodo = instancias.getSql().getDatosTercero(txtNit.getText());
//            this.setNit(txtNit.getText(), nodo.getCupo(), nodo.getPlazo());

            validarClienteParaCredito();
            calcularCuotasCredito();
        } else {
            txtCuotaInicial.setText(big.setMoneda(big.getMoneda(txtCuotaInicial.getText())));
        }
    }//GEN-LAST:event_txtCuotaInicialKeyReleased

    private void txtCuotaInicialKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCuotaInicialKeyTyped
        metodos.soloNum(evt);
    }//GEN-LAST:event_txtCuotaInicialKeyTyped

    private void txtTotalCreditoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTotalCreditoKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalCreditoKeyReleased

    private void txtValorVentaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtValorVentaKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtValorVentaKeyReleased

    private void lbNoFacturaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lbNoFacturaKeyReleased

    }//GEN-LAST:event_lbNoFacturaKeyReleased

    private void lbNoFacturaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lbNoFacturaKeyTyped

    }//GEN-LAST:event_lbNoFacturaKeyTyped

    private void btnReImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReImprimirActionPerformed
        String legal = "";

        try {
            legal = instancias.getLegal();
        } catch (Exception e) {
        }

        if (tipo.equals("orden")) {
            if (instancias.getConfiguraciones().isServicioAutomotor()) {
                instancias.getReporte().ver_oServicio("OSERV-" + txtCargar.getText(), txtObservaciones.getText(), false, txtTipoVehiculo.getText(), "");
            } else {
                String tipoImpr = "";
                if (rdMediaCarta.isSelected()) {
                    tipoImpr = "Normal";
                } else if (rdPos.isSelected()) {
                    tipoImpr = "Pos";
                } else {
                    tipoImpr = "NormalCompleta";
                }

                instancias.getReporte().ver_oServicio("OSERV-" + txtCargar.getText(), txtObservaciones.getText(), false, txtTipoVehiculo.getText(), tipoImpr);
            }

        } else if (tipo.equals("cotizacion")) {

            String tipoImpr = "";
            if (rdMediaCarta.isSelected()) {
                tipoImpr = "cotiza";
            } else if (rdPos.isSelected()) {
                tipoImpr = "cotizaPos";
            } else {
                tipoImpr = "cotizaCompleta";
            }

            try {
                instancias.getReporte().ver_Cotiza("COTI-" + txtCargar.getText(), txtObservaciones.getText(), instancias.getInformacionEmpresa(),
                        legal, tipoImpr, !(Boolean) datos[70]);
            } catch (Exception e) {
                Logs.error(e);
                instancias.getReporte().ver_Cotiza("COTI-" + txtCargar.getText(), txtObservaciones.getText(), instancias.getInformacionEmpresa(),
                        "", tipoImpr, !(Boolean) datos[70]);
            }

        } else if (tipo.equals("mesa")) {

            Boolean comanda1 = false;
            Boolean prefactura1 = false;

            if (instancias.getConfiguraciones().isRestaurante()) {
                if (metodos.msgPregunta(null, "¿Quiere imprimir COMANDA?") == 0) {
                    comanda1 = true;
                }
            }

            if (metodos.msgPregunta(null, "¿Quiere imprimir PREFACTURA?") == 0) {
                prefactura1 = true;
            }

            if (comanda1) {
                impresionComanda comanda = new impresionComanda(null, true, txtObservaciones.getText(),
                        datos, cmbVendedor.getSelectedItem().toString(),"REIMPRESION");
                comanda.setInstancias(instancias, lbNoFactura.getText(), true, null);
                comanda.setLocationRelativeTo(null);
                comanda.setVisible(true);
            }

            if (prefactura1) {
                BigDecimal totalFactura = big.getMoneda(txtTotal.getText().replace("Total: ", ""));
                BigDecimal subFacturaPr = big.getMoneda(txtSubTotal.getText());
                BigDecimal porcPropina = BigDecimal.ZERO, totalPropina = BigDecimal.ZERO;

                try {
                    porcPropina = big.getBigDecimal(datos[90].toString());
                } catch (Exception e) {
                }

                totalPropina = subFacturaPr.multiply(porcPropina).divide(big.getBigDecimal("100"));

                if (metodos.msgPregunta(null, "¿Desea incluir propina?") != 0) {
//                    totalPropina = BigDecimal.ZERO;
                      porcPropina = BigDecimal.ZERO;
                }

                String impresoraPrefactura = "";
                try {
                    impresoraPrefactura = datos[106].toString();
                } catch (Exception e) {
                }

                instancias.getReporte().ver_PrefacturaVenta("where idFactura = '" + "CONGELADA-" + lbNoFactura.getText() + "' ", lbNoFactura.getText(),
                        txtObservaciones.getText(), lbNoFactura.getText(), "", instancias.getInformacionEmpresa(), porcPropina, (Boolean) datos[104], impresoraPrefactura);

                String copias = "";
                try {
                    copias = datos[102].toString();
                } catch (Exception e) {
                }

                try {
                    if (copias != null || !copias.equals("")) {
                        for (int i = 0; i < Integer.parseInt(copias); i++) {
                            instancias.getReporte().ver_PrefacturaVenta("where idFactura = '" + "CONGELADA-" + lbNoFactura.getText() + "';", lbNoFactura.getText(),
                                    txtObservaciones.getText(), lbNoFactura.getText(), "", instancias.getInformacionEmpresa(), porcPropina, (Boolean) datos[104],
                                    impresoraPrefactura);
                        }
                    }
                } catch (Exception e) {
                    Logs.error(e);
                }
            }
        } else if (tipo.equals("pedido")) {

            String tipoImpr = "";
            if (rdMediaCarta.isSelected()) {
                tipoImpr = "pedido";
            } else if (rdPos.isSelected()) {
                tipoImpr = "pedidoPos";
            } else {
                tipoImpr = "pedidoCompleta";
            }

            String formaImp = instancias.getConfiguraciones().getTipoImpresion();
            if (formaImp.equals("Con-Codigo")) {
            } else if (formaImp.equals("Sin-Codigo")) {
                tipoImpr = tipoImpr + "1";
            }

            instancias.getReporte().ver_Pedido("PEDIDO-" + lbNoFactura.getText(), txtObservaciones.getText(),
                    instancias.getInformacionEmpresaCompleto(), legal, "", instancias.getPie(), tipoImpr, lbNoFactura.getText(),
                    !(Boolean) datos[72]);

        } else if (tipo.equals("separe")) {
            instancias.getReporte().ver_Separe("SEPARE-" + txtCargar.getText(), txtObservaciones.getText(),
                    instancias.getInformacionEmpresaCompleto(), legal, "", instancias.getPie(), this.getTipo(), "",
                    !(Boolean) datos[71]);
        }
    }//GEN-LAST:event_btnReImprimirActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        if (!(Boolean) datos[109]) {
            if (this.tipo.equals("mesa") && !instancias.getUsuario().equals("ADMIN")) {
                if (metodos.msgPregunta(null, "No se puede borrar ¿Pedir permiso?") == 0) {

                    dlgSolicitarPermisos permisos = new dlgSolicitarPermisos(null, true, "No se puede limpiar la mesa.", "LIMPIAR",
                            instancias.getTitulo(), "borrarMesa");
                    permisos.setLocationRelativeTo(null);
                    permisos.setVisible(true);
//                    dlgPedirPermiso permiso = new dlgPedirPermiso(null, true, "mesa");
//                    permiso.setLocationRelativeTo(null);
//                    permiso.setVisible(true);
                    return;
                } else {
                    return;
                }
            }
        }

        if (tipo.equals("facturacion") || tipo.equals("mesa")) {
            if (metodos.msgPregunta(null, "¿Desea limpiar la factura?") == 0) {
                cmbCargar.setSelectedIndex(1);
                setNumeroFacturaRenvio("0");
                setNumeroIdFacturaRenvio("0");
                cmbCargar.setSelectedItem("Cargar Cotización");
                txtCargar.setText("");
                limpiar(true, "SI");
                bloquearTodo(true);
            }
        } else {
            limpiar(true, "SI");
            bloquearTodo(true);
        }
    }//GEN-LAST:event_btnLimpiarActionPerformed


    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        try {
         //UARDAR MESA - RESTAURANTE   
         datosFacElectVerificar = instancias.getSql().getResolucionTerminales("FE");
         
        /* int valorHasta = Integer.parseInt(datosFacElectVerificar[6].toString());
         int valorCosecutivo = Integer.parseInt(datosFacElectVerificar[7].toString());
         int diferenciaNumero = valorHasta - valorCosecutivo;
         long fechaCulminacion = validarFechaCulminacion(datosFacElectVerificar[3].toString(),"yyyy-MM-dd");
         
         String tipoComprobante = tblComprobantes.getValueAt(tblComprobantes.getSelectedRow(), 7).toString();
         
         if (tipoComprobante.equals("Facturación Electronica") && (diferenciaNumero == 50 || diferenciaNumero == 40 || diferenciaNumero == 30)){  
            metodos.msgAdvertenciaAjustado(null, "Su resolución esta proxíma a vencer, tiene " + diferenciaNumero + " facturas disponibles");
         }
         if (tipoComprobante.equals("Facturación Electronica") && fechaCulminacion >= 0 && fechaCulminacion <= 10 && banderaFecha == 0){  
            metodos.msgAdvertenciaAjustado(null, "Su resolución esta proxíma a vencer, tiene " + Math.abs(fechaCulminacion) + " días para renovar");
            banderaFecha = 1;
         }
         if (tipoComprobante.equals("Facturación Electronica") && fechaCulminacion < 0){  
            metodos.msgAdvertenciaAjustado(null, "Su resolución esta vencida, tiene " + Math.abs(fechaCulminacion) + " días de vencimiento");
         }else if (tipoComprobante.equals("Facturación Electronica") && diferenciaNumero <= 0){  
            metodos.msgAdvertenciaAjustado(null, "Debe generar nueva Resolución, no tiene disponibilidad de números de factura");
         }else{
            Boolean facturarSinInventarios = (Boolean) datos[Identidad.facturarSinInventario];
            if (!facturarSinInventarios) {
              for (int fila = 0; fila < tblInventario.getRowCount(); fila++) {
                 //VALIDA EXISTENCIA
                if(!validaInventario(fila)){
                  return;
                }
             }
            }   */      
            //instancias.getSql().getMysql().getConnection().setAutoCommit(false);
            if (tipo.equals("pedido") && btnGuardar.getText().equals("FACTURAR")) {
                this.tipo = "facturacion";
                tipoActual = "pedidoActual";
            }
            Logs.log("btnGuardar.getText() ******** " + btnGuardar.getText());
            if (btnGuardar.getText().equals("GUARDAR")) {
                validacionInicialFactura(false);
            } else if (btnGuardar.getText().equals("FACTURAR") && (lbTitulo.getText().contains("CONG") || lbTitulo.getText().contains("Mesa."))) {
                facturarCongelada(false);
            } else {
                validacionInicialFactura(false);
            }
            
         //}
            //instancias.getSql().getMysql().getConnection().commit();
            //instancias.getSql().getMysql().getConnection().setAutoCommit(true);
        } catch (Exception ex) {
            ex.printStackTrace();
            try {
                //instancias.getSql().getMysql().getConnection().rollback();
                //instancias.getSql().getMysql().getConnection().setAutoCommit(true);
                Logs.error(ex);
            } catch (Exception ex1) {
                Logs.error(ex1);
            }
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

      public long validarFechaCulminacion(String fechaCambiar, String formato) throws ParseException
    {     
        SimpleDateFormat sdf = new SimpleDateFormat(formato, Locale.ENGLISH);
        Date fechaActual = new Date();
        Date fechaCulminacion = sdf.parse(fechaCambiar);
      
        long diasRestantes = fechaCulminacion.getTime() - fechaActual.getTime(); 
        TimeUnit time = TimeUnit.DAYS; 
        long diferenciaFechas = time.convert(diasRestantes, TimeUnit.MILLISECONDS);
        
        return diferenciaFechas;
    }
    
    
    private void btnGuardarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnGuardarKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnGuardarActionPerformed(null);
        }
    }//GEN-LAST:event_btnGuardarKeyReleased

    private void btnGuardar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardar1ActionPerformed
        try {
           
             Boolean facturarSinInventarios = (Boolean) datos[Identidad.facturarSinInventario];
                if (!facturarSinInventarios) {
                    for (int fila = 0; fila < tblInventario.getRowCount(); fila++) {
                       if(!validaInventario(fila)){
                         return;
                       }
                    }
                }
//            instancias.getSql().getMysql().getConnection().setAutoCommit(false);

            if (tipo.equals("pedido") && btnGuardar.getText().equals("FACTURAR")) {
                this.tipo = "facturacion";
                tipoActual = "pedidoActual";
            }

            if (lbTitulo.getText().contains("CONG") || lbTitulo.getText().contains("Mesa.")) {
                facturarCongelada(true);
            } else {
                validacionInicialFactura(true);
            }
//            instancias.getSql().getMysql().getConnection().commit();
//            instancias.getSql().getMysql().getConnection().setAutoCommit(true);
        } catch (Exception ex) {
            try {
//                instancias.getSql().getMysql().getConnection().rollback();
//                instancias.getSql().getMysql().getConnection().setAutoCommit(true);
                Logs.error(ex);
            } catch (Exception ex1) {
                Logs.error(ex1);
            }
        }
    }//GEN-LAST:event_btnGuardar1ActionPerformed

    private void btnGuardar1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnGuardar1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_btnGuardar1KeyReleased

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        try {
            actualizar();
        } catch (Exception ex) {
            Logs.error(ex);
            metodos.msgError(null, "*Ocurrio un error "+ex.getMessage());
        }
    }//GEN-LAST:event_btnActualizarActionPerformed
  
    public void actualizar() throws Exception{
         //ENTRA EN EL EDITAR DE MESA      
         Boolean facturarSinInventarios = (Boolean) datos[Identidad.facturarSinInventario];
        
         if (!facturarSinInventarios) {
             for (int fila = 0; fila < tblInventario.getRowCount(); fila++) {
                if(!validaInventario(fila)){
                  return;
                }
             }
         }
         
         try {
            
            if (tblProductos.getRowCount() == 0) {
                metodos.msgError(null, "No ha añadido ningun producto...°°");
                instancias.setCancelarFactura(true);
                return;
            }

            if (txtNombre.getText().equals("")) {
                metodos.msgAdvertenciaAjustado(factura, "Debe cargar un cliente");
                return;
            }

            int xyz = tblProductos.getRowCount();
            if (xyz > 0) {
                for (int i = 0; i < xyz; i++) {
                    calcularTabla(i, true);
                }
            }

            Boolean facturarSinInventario = (Boolean) datos[Identidad.facturarSinInventario];//79

            String baseUtilizada = obtenerBase();

            if (this.tipo.equals("mesa")) {
                if (instancias.getConfiguraciones().isRestaurante()) {
                    //ENTRA AL EDITAR MESA 
                    agregarAdicionesATabla(baseUtilizada);
                }
            }
            
            if (this.tipo.equals("mesa")) {
                int cantProdFact = 0;
                if (instancias.getConfiguraciones().isRestaurante()) {
                    for (int i = 0; i < tblProductos.getRowCount(); i++) {
                        ndProducto nodo = instancias.getSql().getDatosProducto(tblProductos.getValueAt(i, 32).toString(), baseUtilizada);                      
                        if (nodo.getUsuario().equals("FACTURA")) {
                            //se valida que la preparacion para obtener el numero de adiciones y ingredientes posibles
                            Map preparacion = new HashMap();
                            ArrayList<Map> ingredientes = new ArrayList<Map>();
                            ArrayList<Map> adiciones = new ArrayList<Map>();
                            String opciones = "";
                            try {
                                //CAMBIAR A MAP
                                
                                Object[][] codigoPreparacionValida = instancias.getSql().getCantidadesDiscosteo(tblProductos.getValueAt(i, 32).toString());
                                if(codigoPreparacionValida.length > 0){
                                String cadenaPreparacion = tblProductos.getValueAt(i, 21).toString();
                                 
                                 if(!cadenaPreparacion.equals("")){ 
//                                opciones = tblProductos.getValueAt(i, 21).toString().split("; ")[3];
                                    preparacion = (Map) tblProductos.getValueAt(i, 21);
                                    ingredientes = (ArrayList<Map>) preparacion.get("ingredientes"); 
                                    adiciones = (ArrayList<Map>) preparacion.get("adiciones");                                 
                                   }else{
                                     preparacion.put("codigo",tblProductos.getValueAt(i, 32).toString());
                                  }
                                }
                                
                               
                            } catch (Exception e) {
                                Log.error("Error preparacion "+e.getMessage());
                            }
                            
                            
                           //se obtiene el numero de productos que se deben validar si tienen o no inventario 
                            if (!preparacion.isEmpty()) {
                                Object[][] productos = instancias.getSql().getCantidadesDiscosteo(tblProductos.getValueAt(i, 32).toString());
                                cantProdFact = cantProdFact + productos.length;
                                try{
                                    if(ingredientes.size() > 0 || adiciones.size() > 0){
                                       cantProdFact = cantProdFact + ingredientes.size()+ adiciones.size(); 
                                    }
                                }catch(Exception e){}
                            } else {
                                cantProdFact = cantProdFact + ingredientes.size()+ adiciones.size();
                            }
                        }
                    }
                }

                Object[][] productosSinInventario = new Object[tblProductos.getRowCount()][4];
                Object[][] productosSinInventarioDis = new Object[cantProdFact][5];
                
                Boolean entro = false;
                int ser = 0, ser1 = 0;

                for (int i = 0; i < tblProductos.getRowCount(); i++) {
                    ndProducto nodo = instancias.getSql().getDatosProducto(tblProductos.getValueAt(i, 32).toString(), baseUtilizada);

                    BigDecimal num = BigDecimal.ZERO;
                    try {
                        num = big.getBigDecimal(tblInventario.getValueAt(i, 2).toString().replace(",", "."));
                    } catch (Exception e) {
                    }
                    
                    if (nodo.getUsuario().equals("FACTURA")) {
                        //ENTRA CUNADO SE ESTA MODIFICANDO LA MESA
                        String opciones = "";
                        Map preparacion = new HashMap();
                        ArrayList<Map> ingredientes = new ArrayList<Map>();
                        ArrayList<Map> adiciones = new ArrayList<Map>();
                        try {
                            if(!tblProductos.getValueAt(i, 21).toString().equals("")){ 
//                            opciones = tblProductos.getValueAt(i, 21).toString().split("; ")[3];
                              preparacion = (Map) tblProductos.getValueAt(i, 21);
                              ingredientes = (ArrayList<Map>) preparacion.get("ingredientes"); 
                              adiciones = (ArrayList<Map>) preparacion.get("adiciones"); 
                            }
                        } catch (Exception e) {
                            Log.error("Error preparacion  "+e.getMessage());
                        }

                        String opciones2[];
                        if (!adiciones.isEmpty()) {
//                            opciones2 = opciones.split(", ");
                            //aqui voy
                            for (Map adicion : adiciones) {
                                if (adicion.get("estado").equals("true")) {
                                    ndProducto nodo1 = instancias.getSql().getDatosProducto(adicion.get("codigo").toString(), baseUtilizada);
                                    Double cant1 = Double.parseDouble(nodo1.getFisicoInventario().replace(",", "."));
                                    Double total = cant1 - Double.parseDouble(adicion.get("cantidad").toString().replace(",", "."));
                                    if (total < 0) {
                                      
                                        productosSinInventarioDis[ser1][0] = nodo1.getIdSistema();
                                        productosSinInventarioDis[ser1][1] = nodo1.getDescripcion();
                                        productosSinInventarioDis[ser1][2] = cant1;
                                        productosSinInventarioDis[ser1][3] = total;
                                        productosSinInventarioDis[ser1][4] = adicion.get("cantidad").toString();
                                        entro = true;
                                        ser1++;
                                    }
                                }
                            }
                
                            for (Map ingrediente : ingredientes) {
                                if (ingrediente.get("estado").equals("true")) {
                                    ndProducto nodo1 = instancias.getSql().getDatosProducto(ingrediente.get("codigo").toString(), baseUtilizada);
                                    Double cant1 = Double.parseDouble(nodo1.getFisicoInventario().replace(",", "."));
                                    Double total = cant1 - Double.parseDouble(ingrediente.get("cantidad").toString().replace(",", "."));
                                    if (total < 0) {
                                        productosSinInventarioDis[ser1][0] = nodo1.getIdSistema();
                                        productosSinInventarioDis[ser1][1] = nodo1.getDescripcion();
                                        productosSinInventarioDis[ser1][2] = cant1;
                                        productosSinInventarioDis[ser1][3] = total;
                                        productosSinInventarioDis[ser1][4] = ingrediente.get("cantidad").toString();
                                        entro = true;
                                        ser1++;
                                    }
                                }
                            }
//                            for (int k = 0; k < opciones2.length; k++) {
//
//                                String principal = opciones2[k].split("/")[0];
//                                String codigo = opciones2[k].split("/")[1];
//                                String cant = opciones2[k].split("/")[2];
//                                String estado = opciones2[k].split("/")[3];
//
//                                if (estado.equals(" true")) {
//                                    ndProducto nodo1 = instancias.getSql().getDatosProducto(codigo, baseUtilizada);
//                                    Double cant1 = Double.parseDouble(nodo1.getFisicoInventario().replace(",", "."));
//                                    Double total = cant1 - Double.parseDouble(cant.replace(",", "."));
//
//                                    if (total < 0) {
//                                        productosSinInventarioDis[ser1][0] = nodo1.getIdSistema();
//                                        productosSinInventarioDis[ser1][1] = nodo1.getDescripcion();
//                                        productosSinInventarioDis[ser1][2] = cant1;
//                                        productosSinInventarioDis[ser1][3] = total;
//                                        productosSinInventarioDis[ser1][4] = cant;
//                                        entro = true;
//                                        ser1++;
//                                    }
//                                }
//                            }
                        } else {
                            Object[][] productos = instancias.getSql().getCantidadesDiscosteo(tblProductos.getValueAt(i, 32).toString());

                            for (int k = 0; k < productos.length; k++) {
                                String codigo = productos[k][0].toString();
                                String cant = productos[k][1].toString();
                                ndProducto insumo = instancias.getSql().getDatosProducto(codigo, baseUtilizada);
                                Double cant1 = Double.parseDouble(insumo.getFisicoInventario().replace(",", "."));
                                Double total = cant1 - Double.parseDouble(cant.replace(",", "."));

                                if (total < 0 && insumo.getManejaInventario()) {
                                    productosSinInventarioDis[ser1][0] = insumo.getIdSistema();
                                    productosSinInventarioDis[ser1][1] = insumo.getDescripcion();
                                    productosSinInventarioDis[ser1][2] = cant1;
                                    productosSinInventarioDis[ser1][3] = total;
                                    productosSinInventarioDis[ser1][4] = cant;
                                    entro = true;
                                    ser1++;
                                }
                            }
                        }
                    } else {
                        if (num.compareTo(BigDecimal.ZERO) < 0) {
                            if (nodo.getManejaInventario()) {
                                productosSinInventario[ser][0] = nodo.getIdSistema();
                                productosSinInventario[ser][1] = nodo.getDescripcion();
                                productosSinInventario[ser][2] = tblInventario.getValueAt(i, 1);
                                productosSinInventario[ser][3] = tblInventario.getValueAt(i, 2);
                                entro = true;
                                ser++;
                            } else {
                                Logs.log("Este producto no maneja inventario.");
                            }
                        }
                    }
                }

                if (entro) {
                    if (!facturarSinInventario) {
                        metodos.msgError(factura, "--No tiene inventario suficiente");
                        return;
                    } else {

                        if (!cambioMesa) {
                            dlgProductosSinInventario prodSinInventario = new dlgProductosSinInventario(null, true, productosSinInventario, productosSinInventarioDis);
                            prodSinInventario.setVisible(true);
                        }

                        if (instancias.getCancelarFactura()) {
                            borrarAdiciones();
    //                        instancias.setCancelarFactura(false);
                            return;
                        } else {
                        }
                    }
                }
            }
            

            if (!saltarPasosFactura) {
                if (metodos.msgPregunta(null, "¿Desea continuar?") != 0) {
                    borrarAdiciones();
                    Logs.log("DEVOLVIO LA FACTURA");
                    facturandoPedidos = false;
                    return;
                }
            }

            String tip = tipo();
            String factura = tipo() + "-" + lbNoFactura.getText();
            String por = "";

            if (instancias.getConfiguraciones().isEmbarcaciones() && modificarPedidoActivo == false) {
                if (tipo.equals("pedido")) {
                    dlgModificarPedido modificarPedido = new dlgModificarPedido(null, true, factura);
                    modificarPedido.setVisible(true);
                }
            } else {
                if (cmbRtf.getSelectedIndex() == 0) {
                    por = "0";
                } else {
                    por = cmbRtf.getSelectedItem().toString();
                }

                String vendedor;
                try {
                    vendedor = cmbVendedor.getSelectedItem().toString();
                } catch (Exception e) {
                    vendedor = "";
                }

                String ter = instancias.getTerminal();

                if (tipo.equals("pedido")) {
                    Object[][] mat = null;
                     //consulta pedidos por factura
                    mat = instancias.getSql().getRegistrosPrePedidos(factura);
                    
                    for (int i = 0; i < mat.length; i++) {
                        String codigoPreparacion = instancias.getSql().tipoProductoPreparacion(tblProductos.getValueAt(i, 32).toString(), "COSTEO");
                        if (!codigoPreparacion.equals("COSTEO")) {

                            String codProd = mat[i][0].toString();
                            ndProducto informacionProducto = instancias.getSql().getDatosProducto(codProd, baseUtilizada);

                            if (informacionProducto.getUsuario().equals("ADMIN")) {

                            } else {
                                String opciones2[];
                                String opciones = "";
                                try {
                                    opciones = mat[i][15].toString().split("; ")[3];
                                } catch (Exception e) {
                                }

                                if (!opciones.equals("")) {
                                    opciones2 = opciones.split(", ");
                                    for (int k = 0; k < opciones2.length; k++) {

                                        String principal = opciones2[k].split("/")[0];
                                        String codigo = opciones2[k].split("/")[1];
                                        String cant = opciones2[k].split("/")[2];
                                        String estado = opciones2[k].split("/")[3];

                                        if (estado.equals(" true")) {
                                            ndProducto nodo1 = instancias.getSql().getDatosProducto(codigo, baseUtilizada);

                                            Double fisicoInventario = Double.parseDouble(nodo1.getFisicoInventario().replace(",", "."));
                                            Double pedidos = Double.parseDouble(nodo1.getPedidos().replace(",", "."));

                                            fisicoInventario = fisicoInventario + Double.parseDouble(cant.replace(",", "."));
                                            pedidos = pedidos - Double.parseDouble(cant.replace(",", "."));

                                            String fisicoInventario1 = String.valueOf(df.format(fisicoInventario)).replace(".", ",");
                                            String pedidos1 = String.valueOf(df.format(pedidos)).replace(".", ",");
                                            instancias.getSql().modificarInventario("fisicoInventario", fisicoInventario1, codigo, baseUtilizada);
                                            instancias.getSql().modificarInventario("pedidos", pedidos1, codigo, baseUtilizada);
                                        }
                                    }
                                } else {
                                    Object[][] productos = instancias.getSql().getCantidadesDiscosteo(codProd);

                                    for (int k = 0; k < productos.length; k++) {
                                        String codigo = productos[k][0].toString();
                                        String cant = productos[k][1].toString();

                                        ndProducto insumo = instancias.getSql().getDatosProducto(codigo, baseUtilizada);
                                        Double fisicoInventario = Double.parseDouble(insumo.getFisicoInventario().replace(",", "."));
                                        Double pedidos = Double.parseDouble(insumo.getPedidos().replace(",", "."));

                                        fisicoInventario = fisicoInventario + Double.parseDouble(cant.replace(",", "."));
                                        pedidos = pedidos - Double.parseDouble(cant.replace(",", "."));

                                        String fisicoInventario1 = String.valueOf(df.format(fisicoInventario)).replace(".", ",");
                                        String pedidos1 = String.valueOf(df.format(pedidos)).replace(".", ",");

                                        instancias.getSql().modificarInventario("fisicoInventario", fisicoInventario1, codigo, baseUtilizada);
                                        instancias.getSql().modificarInventario("pedidos", pedidos1, codigo, baseUtilizada);
                                    }
                                }
                            }
                        }
                    }
                    
                    String pedido = instancias.getSql().pedidoExistente(factura);
                    instancias.getSql().eliminarComanda(pedido, "pedido");
                    instancias.getSql().eliminarPedido(pedido);
                    instancias.getSql().deletePreparacionCongelada(pedido);

                    for (int i = 0; i < tblProductos.getRowCount(); i++) {
                        String preparacion = "";
                        try {
                            preparacion = tblProductos.getValueAt(i, 21).toString();
                        } catch (Exception e) {
                            Log.error("Error preparacion "+e.getMessage());
                        }

                        Object[] vector = {factura, txtIdSistema.getText(), vendedor, "", metodos.fechaConsulta(metodosGenerales.fechaHora()),
                            metodos.fechaConsulta(txtVencimiento.getText()), instancias.getEfectivoDevuelta(), instancias.getNcDevuelta(),
                            instancias.getChequeDevuelta(), instancias.getTarjetaDevuelta(), big.getMoneda(txtTotal.getText().replace("Total: ", "")),
                            big.getMoneda(txtTotalDescuentos.getText()), big.getMoneda(txtTotalIva.getText()), big.getMoneda(txtSubTotal.getText()), "",
                            factura.replace(tip + "-", ""), false, "", !txtFechaFactura.getText().equals(txtVencimiento.getText()),
                            "", instancias.getUsuario(), big.getMoneda(txtRiva.getText()), big.getMoneda("0"), big.getMoneda(txtRtf.getText()), big.getMonedaToDouble(por),
                            txtObservaciones.getText(), false, "", false, "", "", metodos.fechaConsulta(metodos.sumarFecha(txtVencimiento.getText(), cantDias)), ter,
                            "PENDIENTE", "", instancias.getDevuelta(), factura, instancias.getResolucion(), metodos.fechaConsulta(metodosGenerales.fecha()), "", "",
                            BigDecimal.ZERO, txtPlaca1.getText(), txtNombre.getText(), "", "", "",
                            "", "", tblProductos.getValueAt(i, 32), big.getMoneda((String) tblProductos.getValueAt(i, 2)),
                            tblProductos.getValueAt(i, 13).toString().replace(",", "."), big.getMoneda((String) tblProductos.getValueAt(i, 6)),
                            big.getMoneda((String) tblProductos.getValueAt(i, 9)), big.getMoneda((String) tblProductos.getValueAt(i, 33)),
                            big.getMoneda((String) tblProductos.getValueAt(i, 4)), "", big.getMoneda((String) tblProductos.getValueAt(i, 14)), "",
                            big.getBigDecimal(tblProductos.getValueAt(i, 5).toString().replace(",", ".")).setScale(2, RoundingMode.DOWN) + "",
                            tblProductos.getValueAt(i, 1), tblProductos.getValueAt(i, 12) + "", formatVal(big.formatDouble(big.getMonedaToDouble(tblProductos.getValueAt(i, 3).toString().replace(".", "")))),//tblProductos.getValueAt(i, 3).toString().replace(",", "."),
                            "PENDIENTE", tblProductos.getValueAt(i, 7), tblProductos.getValueAt(i, 19), big.getMoneda(tblProductos.getValueAt(i, 20).toString()),
                            preparacion, txtBodega.getText(), tblProductos.getValueAt(i, 29), tblProductos.getValueAt(i, 27)
                        };

                        ndPedido nodo = metodos.llenarPedido(vector);
                            //inserta en bdPedido
                        if (!instancias.getSql().agregarPedido(nodo)) {
                            boolean noPuedaGuardar = false;

                            instancias.getSql().eliminarOServicio(factura);
                            while (!noPuedaGuardar) {
                                noPuedaGuardar = instancias.getSql().eliminarOServicio(factura);
                            }

                            metodos.msgError(null, "Error al modificar el pedido");
                            return;
                        }

                        Map cadena = new HashMap();
                        try {
                            
                            cadena = (Map) tblProductos.getValueAt(i, 21);
                        } catch (Exception e) {
                            Log.error("Error actualizar "+e.getMessage());
                        }

                        if (instancias.getSql().getDatosProducto(tblProductos.getValueAt(i, 32).toString(), baseUtilizada).getUsuario().equalsIgnoreCase("FACTURA")) {
                            String bodega = txtBodega.getText();
                            if (!instancias.getConfiguraciones().isInventarioBodegas()) {
                                bodega = "123-22";
                            }
                            
                            instancias.getArmado().facturarPlato(tblProductos.getValueAt(i, 32).toString(), tblProductos.getValueAt(i, 3).toString(),
                                    cadena, "fisicoInventarioPedido", bodega,"","");
                        }

                        agregarRegistrosComandas(i, "", baseUtilizada, "", factura, "", "");
                    }

                    String cong = "";
                    if (baseUtilizada.equals("bdProductos")) {
                        cong = "totalizadoPedidos";
                    } else if (baseUtilizada.equals("bdProductosBodega1")) {
                        cong = "totalizadoPedidos1";
                    } else if (baseUtilizada.equals("bdProductosBodega2")) {
                        cong = "totalizadoPedidos2";
                    } else if (baseUtilizada.equals("bdProductosBodega3")) {
                        cong = "totalizadoPedidos3";
                    } else if (baseUtilizada.equals("bdProductosBodega4")) {
                        cong = "totalizadoPedidos4";
                    }

                    for (int i = 0; i < productosMovimientos1.length; i++) {
                        String sql1 = " where codigo = '" + productosMovimientos1[i][0] + "' ";
                        Object[][] pedidos = instancias.getSql().getTotalizadoPedidos(sql1, cong);

                        double total = 0;
                        try {
                            total = Double.parseDouble(pedidos[0][1].toString().replace(",", "."));
                        } catch (Exception e) {
                            Logs.error(e);
                            Logs.log("fallo");
                        }

                        String total1 = String.valueOf(df.format(total)).replace(".", ",");
                        instancias.getSql().modificarInventario("pedidos", total1, productosMovimientos1[i][0].toString(), baseUtilizada);

                        ndProducto nodo = instancias.getSql().getDatosProducto(productosMovimientos1[i][0].toString(), baseUtilizada);
                        actualizarFisicoInventario(nodo, productosMovimientos1[i][0].toString(), baseUtilizada);

                        if (productosMovimientos1[i][2] != null) {
                            String tipo = "";
                            if (nodo.getTipoProducto() != null) {
                                if (nodo.getTipoProducto().equals("IMEI")) {
                                    tipo = "Imei";
                                } else if (nodo.getTipoProducto().equals("Fecha/Lote")) {
                                    tipo = "Fecha/Lote";
                                } else if (nodo.getTipoProducto().equals("Color")) {
                                    tipo = "Color";
                                } else if (nodo.getTipoProducto().equals("Serial")) {
                                    tipo = "Serial";
                                } else if (nodo.getTipoProducto().equals("Talla")) {
                                    tipo = "Talla";
                                } else if (nodo.getTipoProducto().equals("ColorTalla")) {
                                    tipo = "ColorTalla";
                                } else if (nodo.getTipoProducto().equals("SerialColor")) {
                                    tipo = "SerialColor";
                                } else {
                                    tipo = "";
                                }
                            }

                            if (tipo.equals("")) {
                            } else if (tipo.equals("Imei") || tipo.equals("Serial") || tipo.equals("SerialColor")) {
                                instancias.getSql().modificarEstadoDetalleProductos(productosMovimientos1[i][2].toString(), "DISPONIBLE");
                            } else {
                                Double cantidadActual = Double.parseDouble(instancias.getSql().getCantidadProductos(productosMovimientos1[i][2].toString()).replace(",", "."));
                                cantidadActual = cantidadActual + Double.parseDouble(productosMovimientos1[i][1].toString());
                                String cantidadFinal = String.valueOf(df.format(cantidadActual)).replace(".", ",");
                                instancias.getSql().modificarCantidadesDetalleProductos(productosMovimientos1[i][2].toString(), cantidadFinal);
                            }
                        }
                    }

                    for (int i = 0; i < tblProductos.getRowCount(); i++) {

                        Boolean entro = false;
                        for (int j = 0; j < productosMovimientos1.length; j++) {
                            if (tblProductos.getValueAt(i, 32).equals(productosMovimientos1[j][0])) {
                                entro = true;
                                break;
                            }
                        }

                        if (!entro) {
                            String sql1 = " where codigo = '" + tblProductos.getValueAt(i, 32) + "' ";
                            Object[][] pedidos = instancias.getSql().getTotalizadoPedidos(sql1, cong);

                            double total = 0;
                            try {
                                total = Double.parseDouble(pedidos[0][1].toString().replace(",", "."));
                            } catch (Exception e) {
                                Logs.error(e);
                                Logs.log("fallo");
                            }

                            String total1 = String.valueOf(df.format(total)).replace(".", ",");
                            instancias.getSql().modificarInventario("pedidos", total1, pedidos[0][0].toString(), baseUtilizada);

                            ndProducto nodo = instancias.getSql().getDatosProducto(pedidos[0][0].toString(), baseUtilizada);
                            actualizarFisicoInventario(nodo, pedidos[0][0].toString(), baseUtilizada);
                        }

                        String codProd = tblProductos.getValueAt(i, 29).toString(), tipo = "";

                        if (!codProd.equals("")) {

                            ndProducto nodo = instancias.getSql().getDatosProducto(tblProductos.getValueAt(i, 32).toString(), baseUtilizada);

                            if (nodo.getTipoProducto() != null) {
                                if (nodo.getTipoProducto().equals("IMEI")) {
                                    tipo = "Imei";
                                } else if (nodo.getTipoProducto().equals("Fecha/Lote")) {
                                    tipo = "Fecha/Lote";
                                } else if (nodo.getTipoProducto().equals("Color")) {
                                    tipo = "Color";
                                } else if (nodo.getTipoProducto().equals("Serial")) {
                                    tipo = "Serial";
                                } else if (nodo.getTipoProducto().equals("Talla")) {
                                    tipo = "Talla";
                                } else if (nodo.getTipoProducto().equals("ColorTalla")) {
                                    tipo = "ColorTalla";
                                } else if (nodo.getTipoProducto().equals("SerialColor")) {
                                    tipo = "SerialColor";
                                } else {
                                    tipo = "";
                                }
                            }

                            if (tipo.equals("Imei") || tipo.equals("Serial") || tipo.equals("SerialColor")) {
                                instancias.getSql().modificarEstadoDetalleProductos(codProd, "PRESTADO");
                            } else {
                                Double cantidadActual = Double.parseDouble(instancias.getSql().getCantidadProductos(codProd).replace(",", "."));
                                cantidadActual = cantidadActual - Double.parseDouble(tblProductos.getValueAt(i, 13).toString());
                                String cantidadFinal = String.valueOf(df.format(cantidadActual)).replace(".", ",");
                                instancias.getSql().modificarCantidadesDetalleProductos(codProd, cantidadFinal);
                            }
                        }
                    }

                    productosMovimientos1 = null;

                    if (!saltarPasosFactura) {
                        metodos.msgExito(null, "Pedido modificado con éxito");
                    }

                    limpiar(true, "SI");

                } else if (tipo.equals("orden")) {

                    String pedido = instancias.getSql().ordenExistente(factura);
                    instancias.getSql().eliminarOServicio(pedido);

                    for (int i = 0; i < tblProductos.getRowCount(); i++) {
                        Object[] vector = {factura, txtIdSistema.getText(), vendedor, "", metodos.fechaConsulta(metodosGenerales.fecha()), metodos.fechaConsulta(txtVencimiento.getText()),
                            instancias.getEfectivoDevuelta(), instancias.getNcDevuelta(), instancias.getChequeDevuelta(), instancias.getTarjetaDevuelta(),
                            big.getMoneda(txtTotal.getText().replace("Total: ", "")), big.getMoneda(txtTotalDescuentos.getText()),
                            big.getMoneda(txtTotalIva.getText()), big.getMoneda(txtSubTotal.getText()), "",
                            factura.replace(tip + "-", ""), false, "", !txtFechaFactura.getText().equals(txtVencimiento.getText()),
                            "", instancias.getUsuario(), big.getMoneda(txtRiva.getText()), big.getMoneda("0"), big.getMoneda(txtRtf.getText()), big.getMonedaToDouble(por),
                            txtObservaciones.getText(), false, "", false, "", "", metodos.fechaConsulta(metodos.sumarFecha(txtVencimiento.getText(), cantDias)), ter,
                            "PENDIENTE", "", instancias.getDevuelta(), factura, instancias.getResolucion(), metodos.fechaConsulta(metodosGenerales.fecha()), "", "",
                            BigDecimal.ZERO, txtPlaca1.getText(), "", "", "", "",
                            "", "", tblProductos.getValueAt(i, 32), big.getMoneda((String) tblProductos.getValueAt(i, 2)),
                            tblProductos.getValueAt(i, 13).toString().replace(",", "."), big.getMoneda((String) tblProductos.getValueAt(i, 6)),
                            big.getMoneda((String) tblProductos.getValueAt(i, 9)), big.getMoneda((String) tblProductos.getValueAt(i, 33)),
                            big.getMoneda((String) tblProductos.getValueAt(i, 4)), "", big.getMoneda((String) tblProductos.getValueAt(i, 14)), "",
                            big.getBigDecimal(tblProductos.getValueAt(i, 5).toString().replace(",", ".")).setScale(2, RoundingMode.DOWN) + "",
                            tblProductos.getValueAt(i, 1), tblProductos.getValueAt(i, 12) + "", formatVal(big.formatDouble(big.getMonedaToDouble(tblProductos.getValueAt(i, 3).toString().replace(".", "")))),//tblProductos.getValueAt(i, 3).toString().replace(",", "."),
                            "PENDIENTE", tblProductos.getValueAt(i, 7), tblProductos.getValueAt(i, 19), big.getMoneda(tblProductos.getValueAt(i, 20).toString()),
                            tblProductos.getValueAt(i, 21).toString(), txtBodega.getText()
                        };

                        ndOServicio1 nodo = metodos.llenarOServicio1(vector);

                        if (!instancias.getSql().agregarOServicio1(nodo)) {
                            boolean noPuedaGuardar = false;

                            instancias.getSql().eliminarOServicio(factura);
                            while (!noPuedaGuardar) {
                                noPuedaGuardar = instancias.getSql().eliminarOServicio(factura);
                            }
                            if(showMsg){
                                metodos.msgError(null, "Hubo un problema al modificar la orden");
                            }else{
                                Logs.error("Hubo un problema al modificar la orden");
                            }

                            return;
                        }
                    }

                    String baseOrden = "";
                    if (baseUtilizada.equals("bdProductos")) {
                        baseOrden = "totalizadooservicio";
                    } else if (baseUtilizada.equals("bdProductosBodega1")) {
                        baseOrden = "totalizadooservicio1";
                    } else if (baseUtilizada.equals("bdProductosBodega2")) {
                        baseOrden = "totalizadooservicio2";
                    } else if (baseUtilizada.equals("bdProductosBodega3")) {
                        baseOrden = "totalizadooservicio3";
                    } else if (baseUtilizada.equals("bdProductosBodega4")) {
                        baseOrden = "totalizadooservicio4";
                    }

                    for (int i = 0; i < productosMovimientos.length; i++) {
                        String sql1 = " where codigo = '" + productosMovimientos[i] + "' ";

                        Object[][] oServicio = instancias.getSql().getTotalizadoOServicio(sql1, baseOrden);
                        double total = 0;
                        try {
                            total = Double.parseDouble(oServicio[0][1].toString().replace(",", "."));
                        } catch (Exception e) {
                            Logs.log("fallo");
                        }

                        String total1 = String.valueOf(df.format(total)).replace(".", ",");
                        instancias.getSql().modificarInventario("ordenServicio", total1, productosMovimientos[i].toString(), baseUtilizada);
                        ndProducto nodo = instancias.getSql().getDatosProducto(productosMovimientos[i].toString(), baseUtilizada);
                        actualizarFisicoInventario(nodo, productosMovimientos[i].toString(), baseUtilizada);
                    }

                    for (int i = 0; i < tblProductos.getRowCount(); i++) {

                        Boolean entro = false;
                        for (int j = 0; j < productosMovimientos.length; j++) {
                            if (tblProductos.getValueAt(i, 32).equals(productosMovimientos[j])) {
                                entro = true;
                                break;
                            }
                        }

                        if (!entro) {
                            String sql1 = " where codigo = '" + tblProductos.getValueAt(i, 32) + "' ";

                            Object[][] oServicio = instancias.getSql().getTotalizadoOServicio(sql1, baseOrden);

                            double total = 0;
                            try {
                                total = Double.parseDouble(oServicio[0][1].toString().replace(",", "."));
                            } catch (Exception e) {
                                Logs.log("fallo");
                            }

                            String total1 = String.valueOf(df.format(total)).replace(".", ",");
                            instancias.getSql().modificarInventario("ordenServicio", total1, oServicio[0][0].toString(), baseUtilizada);

                            ndProducto nodo = instancias.getSql().getDatosProducto(oServicio[0][0].toString(), baseUtilizada);
                            actualizarFisicoInventario(nodo, oServicio[0][0].toString(), baseUtilizada);
                        }
                    }

                    productosMovimientos = null;
                    metodos.msgExito(null, "Orden modificada con éxito");
                    limpiar(true, "SI");

                } else if (tipo.equals("cuentaCobro")) {

                    instancias.getSql().eliminarCuentaCobro(factura);

                    String hasta = "";
                    if (chkSinEstablecer.isSelected()) {
                        hasta = metodos.desdeDate(dtDesde.getCurrent());
                    } else {
                        hasta = metodos.desdeDate(dtHasta.getCurrent());
                    }

                    for (int i = 0; i < tblProductos.getRowCount(); i++) {
                        Object[] vector = {
                            factura,
                            txtIdSistema.getText(),
                            vendedor,
                            "",
                            metodos.fechaConsulta(metodosGenerales.fechaHora()),
                            metodos.fechaConsulta(txtVencimiento.getText()),
                            instancias.getEfectivoDevuelta(),
                            instancias.getNcDevuelta(),
                            instancias.getChequeDevuelta(),
                            instancias.getTarjetaDevuelta(),
                            big.getMoneda(txtTotal.getText().replace("Total: ", "")),
                            big.getMoneda(txtTotalDescuentos.getText()),
                            big.getMoneda(txtTotalIva.getText()),
                            big.getMoneda(txtSubTotal.getText()),
                            "",
                            factura.replace(tip + "-", ""),
                            false,
                            "", 
                            !txtFechaFactura.getText().equals(txtVencimiento.getText()),
                            "",
                            instancias.getUsuario(),
                            big.getMoneda(txtRiva.getText()),
                            big.getMoneda("0"),
                            big.getMoneda(txtRtf.getText()),
                            big.getMonedaToDouble(por),
                            txtObservaciones.getText(),
                            false,
                            "",
                            false,
                            "",
                            "",
                            metodos.fechaConsulta(metodos.sumarFecha(txtVencimiento.getText(), cantDias)),
                            ter,
                            "PENDIENTE",
                            "",
                            instancias.getDevuelta(),
                            factura,
                            instancias.getResolucion(),
                            metodos.fechaConsulta(metodosGenerales.fecha()),
                            "",
                            "",
                            BigDecimal.ZERO,
                            txtPlaca1.getText(),
                            "",
                            "",
                            tblProductos.getValueAt(i, 31),
                            "",
                            "",
                            "",
                            tblProductos.getValueAt(i, 32),
                            big.getMoneda((String) tblProductos.getValueAt(i, 2)),
                            tblProductos.getValueAt(i, 13).toString().replace(",", "."), 
                            big.getMoneda((String) tblProductos.getValueAt(i, 6)),
                            big.getMoneda((String) tblProductos.getValueAt(i, 9)),
                            big.getMoneda((String) tblProductos.getValueAt(i, 33)),
                            big.getMoneda((String) tblProductos.getValueAt(i, 4)),
                            "",
                            big.getMoneda((String) tblProductos.getValueAt(i, 14)),
                            "",
                            big.getBigDecimal(tblProductos.getValueAt(i, 5).toString().replace(",", ".")).setScale(2, RoundingMode.DOWN) + "",
                            tblProductos.getValueAt(i, 1),
                            tblProductos.getValueAt(i, 12) + "",
                            formatVal(big.formatDouble(big.getMonedaToDouble(tblProductos.getValueAt(i, 3).toString().replace(".", "")))),//tblProductos.getValueAt(i, 3).toString().replace(",", "."),
                            "PENDIENTE",
                            tblProductos.getValueAt(i, 7),
                            tblProductos.getValueAt(i, 19),
                            big.getMoneda(tblProductos.getValueAt(i, 20).toString()),
                            cmbPeriodicidad.getSelectedItem(),
                            metodos.desdeDate(dtDesde.getCurrent()),
                            hasta,
                            txtCantIncremento.getText(),
                            big.getMoneda(txtTotalImpoconsumo.getText()),
                            tblProductos.getValueAt(i, 23).toString().replace(".", "").replace(",", "."),
                            big.getMoneda((String) tblProductos.getValueAt(i, 8)),
                            txtBodega.getText(),
                            tblProductos.getValueAt(i, 38).toString(),
                            tblProductos.getValueAt(i, Identidad.Cant).toString().replace(",", ".")
                        };

                        ndCongelada nodo = metodos.llenarCongelada(vector);

                        if (!instancias.getSql().agregarCuentaCobro(nodo)) {
                            metodos.msgError(null, "Error al modificar la plantilla cobro");
                            return;
                        }
                    }

                    if (txtUltimaFacturaFecha.getText().equals("")) {
                        if (!instancias.getSql().modificarFechaUltimoPago(factura, txtCantFacturados.getText())) {
                            if(showMsg){
                                metodos.msgError(null, "Error al agregar la fecha de pago");
                            }else{
                                Logs.error("Error al agregar la fecha de pago");
                            }

                            return;
                        }
                    } else {
                        if (!instancias.getSql().modificarFechaUltimoPago(factura, txtUltimaFacturaFecha.getText(), txtCantFacturados.getText())) {
                            if(showMsg){
                                metodos.msgError(null, "Error al agregar la fecha de pago");
                            }else{
                                Logs.error("Error al agregar la fecha de pago");
                            }

                            return;
                        }
                    }

                    if(showMsg){
                        metodos.msgExito(null, "Plantilla modificada con éxito");
                    }else{
                        Logs.log("Plantilla modificada con éxito");
                    }
                    limpiar(true, "SI");

                } else if (tipo.equals("mesa")) {
                    //ENTRA POR AQUI CUANDO SE ESTA MODIFICANDO RESTAURANTE
                    ndCongelada nodo1 = instancias.getSql().getDatosCongelada(factura);
                                   
                    String ConseMes=nodo1.getConseMesa();
                    if(nodo1.getConseMesa()== null){
                        ConseMes=instancias.getTitulo();
                        nodo1.setConseMesa(ConseMes);
                    }
                    
                    //ENTRA AQUI CUANDO SE ESTA MODIFICANDO EN RESTAURANTE
                    for (int i = 0; i < tblProductos.getRowCount(); i++) {
                           
                        Object[] vector = {factura, txtIdSistema.getText(), vendedor, "", metodos.fechaConsulta(metodosGenerales.fecha()), metodos.fechaConsulta(txtVencimiento.getText()),
                            instancias.getEfectivoDevuelta(), instancias.getNcDevuelta(), instancias.getChequeDevuelta(), instancias.getTarjetaDevuelta(),
                            big.getMoneda(txtTotal.getText().replace("Total: ", "")), big.getMoneda(txtTotalDescuentos.getText()),
                            big.getMoneda(txtTotalIva.getText()), big.getMoneda(txtSubTotal.getText()), "",
                            factura.replace(tip + "-", ""), false, "", !txtFechaFactura.getText().equals(txtVencimiento.getText()),
                            "", instancias.getUsuario(), big.getMoneda(txtRiva.getText()), big.getMoneda("0"), big.getMoneda(txtRtf.getText()), big.getMonedaToDouble(por),
                            txtObservaciones.getText(), false, "", false, "", "", metodos.fechaConsulta(metodos.sumarFecha(txtVencimiento.getText(), cantDias)), ter,
                            "PENDIENTE", "", instancias.getDevuelta(), factura, instancias.getResolucion(), metodos.fechaConsulta(metodosGenerales.fecha()), "", "",
                            BigDecimal.ZERO, txtPlaca1.getText(), "", "", tblProductos.getValueAt(i, 31), "",
                            "PLATO-" + i, ConseMes, tblProductos.getValueAt(i, 32), big.getMoneda((String) tblProductos.getValueAt(i, 2)),
                            tblProductos.getValueAt(i, 13).toString().replace(",", "."), big.getMoneda((String) tblProductos.getValueAt(i, 6)),
                            big.getMoneda((String) tblProductos.getValueAt(i, 9)), big.getMoneda((String) tblProductos.getValueAt(i, 33)),
                            big.getMoneda((String) tblProductos.getValueAt(i, 4)), "", big.getMoneda((String) tblProductos.getValueAt(i, 14)), "",
                            big.getBigDecimal(tblProductos.getValueAt(i, 5).toString().replace(",", ".")).setScale(2, RoundingMode.DOWN) + "",
                            tblProductos.getValueAt(i, 1), tblProductos.getValueAt(i, 12) + "",  formatVal(big.formatDouble(big.getMonedaToDouble(tblProductos.getValueAt(i, 3).toString().replace(".", "")))),         // tblProductos.getValueAt(i, 3).toString().replace(",", "."),
                            "PENDIENTE", tblProductos.getValueAt(i, 7), tblProductos.getValueAt(i, 19), big.getMoneda(tblProductos.getValueAt(i, 20).toString()),
                            tblProductos.getValueAt(i, 21).toString(), nodo1.getTurno(), tblProductos.getValueAt(i, 27), tblProductos.getValueAt(i, 29),
                            big.getMoneda(txtTotalImpoconsumo.getText()), tblProductos.getValueAt(i, 23).toString().replace(".", "").replace(",", "."),
                            big.getMoneda((String) tblProductos.getValueAt(i, 8)), txtBodega.getText(), tblProductos.getValueAt(i, 38).toString(),formatVal(big.formatDouble(big.getMonedaToDouble(tblProductos.getValueAt(i, 3).toString().replace(".", ""))))
                        };
                       
                        nodo1 = metodos.llenarCongelada(vector);
                    //valida si el registro de la congelada existe y lo modifica sino lo crea
                   //ingreso a crear una nueva congelada
                        String idCongelada = manejoInsertUpdateCongelada(nodo1);
                        if (idCongelada.equals("null")) {
//                            SE COMENTA PORQUE EN CASO DE OCURRIR UN ERROR SE BORRA TODA LA MESA Y SE PERDERAN LOS REGISTROS
//                            06/01/2021
//                            boolean noPuedaGuardar = false;
//                            instancias.getSql().eliminarOServicio(factura);
//                            while (!noPuedaGuardar) {
//                                noPuedaGuardar = instancias.getSql().eliminarMesa(factura);
//                            }

                            metodos.msgError(null, "Error al modificar la congelada");
                            return;
                        }
                        tblProductos.setValueAt(idCongelada, i, 38);
                         String congeladaVerificada="";
                        Map preparacion = new HashMap();
                        String cadena = "";
                        try {
            //AQUI DEBO DE HACER EL INGRESO DEL NUEV0 DISEÑO                 
                            if (!tblProductos.getValueAt(i, 31).toString().equals("")) {
                                String[] agragdoId = new String[2];
                                agragdoId = tblProductos.getValueAt(i, 31).toString().split(";");
                               
                                if (agragdoId.length > 0 && !agragdoId[0].isEmpty()) {
                                    if (agragdoId[0].equals("PRODUCTO-AGREGADO")) {
                                        int posicion = Integer.parseInt(agragdoId[1]);
                                        
                                        String idPreparada = instancias.getSql().getIdPreparacionAdicion(nodo1.getProducto(), tblProductos.getValueAt(posicion, 38).toString(), factura, idCongelada);
                                        instancias.getSql().updatePreparacionAdiciones(nodo1.getProducto(), tblProductos.getValueAt(posicion, 38).toString(), factura, idCongelada,idPreparada);
                                    }
                                }
                            }
                         
                           //VALIDAR ID 
                            if(!tblProductos.getValueAt(i, 21).toString().equals("")){ 
//                              cadena = tblProductos.getValueAt(i, 21).toString();
                             preparacion = (Map) tblProductos.getValueAt(i, 21);
                             ArrayList<Map<String, String>> verificaPreparadas = instancias.getSql().getVerificaProductosPreparacion(factura,idCongelada);
                             if(verificaPreparadas.size()==0){
                               almacenaPreparadaCambios(nodo1,idCongelada,preparacion); 
                             //instancias.getSql().insertarPreparacion(factura,idCongelada,nodo1.getProducto());
                               
                             }
                             congeladaVerificada = idCongelada;
                            }else{
                          
//                              String codigoPreparacion = instancias.getSql().esPreparacion(nodo1.getProducto());
                                String codigoPreparacion = instancias.getSql().tipoProductoPreparacion(nodo1.getProducto(),"COSTEO");
                                if(!codigoPreparacion.equals("COSTEO")){
//                                if(codigoPreparacion.equals(nodo1.getProducto())){
                                  instancias.getSql().insertarPreparacion(factura,idCongelada,nodo1.getProducto());
                                }
                              congeladaVerificada ="";   
                              preparacion = cargarPreparada(factura,idCongelada,nodo1.getProducto());
                              tblProductos.setValueAt(preparacion,i, 21);
                            }
                        } catch (Exception e) {  
                          
                            Logs.log("actualizar cadena: "+e);
                        }
//POR AQUI
                        ndProducto nodoProducto = instancias.getSql().getDatosProducto(tblProductos.getValueAt(i, 32).toString(), baseUtilizada);

                        if (nodoProducto.getUsuario().equalsIgnoreCase("FACTURA")) {
                            String bodega = txtBodega.getText();
                            if (!instancias.getConfiguraciones().isInventarioBodegas()) {
                                bodega = "123-22";
                            }
                            if(!congeladaVerificada.equals("") && tblProductos.getValueAt(i, 30).toString().equals("Nuevo")){
                                congeladaVerificada="";
                            }
                            //ENTRA CUANDO ES RESTAURANTE
                            instancias.getArmado().facturarPlato(tblProductos.getValueAt(i, 32).toString(), tblProductos.getValueAt(i, 3).toString(),
                                    preparacion, "fisicoInventario", bodega,factura,congeladaVerificada);
                        }
                       /* esta agreagando comanda sin ver si debe VALIDAR*/
                        agregarRegistrosComandas(i, nodo1.getTurno(), baseUtilizada, "", "", factura, idCongelada);

                        // DESCONTAR DEL INVENTARIO DETALLADO //
                        if (instancias.getConfiguraciones().isProductosSerial()) {
                            String cod = "";
                            try {
                                cod = tblProductos.getValueAt(i, 29).toString();
                            } catch (Exception e) {
                            }

                            if (!cod.equals("")) {
                                String tipo = "";

                                if (nodoProducto.getTipoProducto() != null) {
                                    if (nodoProducto.getTipoProducto().equals("IMEI")) {
                                        tipo = "Imei";
                                    } else if (nodoProducto.getTipoProducto().equals("Fecha/Lote")) {
                                        tipo = "Fecha/Lote";
                                    } else if (nodoProducto.getTipoProducto().equals("Color")) {
                                        tipo = "Color";
                                    } else if (nodoProducto.getTipoProducto().equals("Serial")) {
                                        tipo = "Serial";
                                    } else if (nodoProducto.getTipoProducto().equals("Talla")) {
                                        tipo = "Talla";
                                    } else if (nodoProducto.getTipoProducto().equals("ColorTalla")) {
                                        tipo = "ColorTalla";
                                    } else if (nodoProducto.getTipoProducto().equals("SerialColor")) {
                                        tipo = "SerialColor";
                                    } else {
                                        tipo = "";
                                    }
                                }

                                if (tipo.equals("Imei") || tipo.equals("Serial") || tipo.equals("SerialColor")) {
                                    instancias.getSql().modificarEstadoDetalleProductos(cod, "CONGELADO");
                                } else {
                                    Double cantidadActual = Double.parseDouble(instancias.getSql().getCantidadProductos(cod).replace(",", "."));
                                    cantidadActual = cantidadActual - Double.parseDouble(tblProductos.getValueAt(i, 13).toString().replace(",", "."));
                                    String cantidadFinal = String.valueOf(df.format(cantidadActual)).replace(".", ",");
                                    instancias.getSql().modificarCantidadesDetalleProductos(cod, cantidadFinal);
                                }
                            }
                        }
                        // FIN DE DESCONTAR DEL INVENTARIO SEPARADO // 

                    }

                    String cong = "";
                    if (baseUtilizada.equals("bdProductos")) {
                        cong = "totalizadoCongelada";
                    } else if (baseUtilizada.equals("bdProductosBodega1")) {
                        cong = "totalizadoCongelada1";
                    } else if (baseUtilizada.equals("bdProductosBodega2")) {
                        cong = "totalizadoCongelada2";
                    } else if (baseUtilizada.equals("bdProductosBodega3")) {
                        cong = "totalizadoCongelada3";
                    } else if (baseUtilizada.equals("bdProductosBodega4")) {
                        cong = "totalizadoCongelada4";
                    }
                    
                    for (int i = 0; i < productosMovimientos.length; i++) {
                        String sql1 = " where codigo = '" + productosMovimientos[i] + "' ";
                        Object[][] congeladas = instancias.getSql().getTotalizadoCongelada(sql1, cong);
                        
                        Object[][] congeladasPreparadas = instancias.getSql().getTotalizadoCongeladaPreparada(factura, (String) productosMovimientos[i],factura);
                        
                        double totalPreparada = 0;
                        try {
                            totalPreparada = Double.parseDouble(congeladasPreparadas[0][0].toString().replace(",", "."));
                            
                        } catch (Exception e) {
                            Logs.log("fallo"+e);
                        }
                        
                        double total = 0;
                        try {
                            total = Double.parseDouble(congeladas[0][1].toString().replace(",", "."));
                        } catch (Exception e) {
                            Logs.log("fallo"+e);
                        }
                        
                        

                        String total1 = String.valueOf(df.format(total+totalPreparada)).replace(".", ",");
                        //validar si debe modificar inventario
//VALIDAR PQ NO TOMA LAS OTRAS COMANDAS                        
                        instancias.getSql().modificarInventario("congelada", total1, productosMovimientos[i].toString(), baseUtilizada);
                        ndProducto nodo = instancias.getSql().getDatosProducto(productosMovimientos[i].toString(), baseUtilizada);
                        actualizarFisicoInventario(nodo, productosMovimientos[i].toString(), baseUtilizada);
                    }

                    for (int i = 0; i < tblProductos.getRowCount(); i++) {
                        Boolean entro = false;
                        for (int j = 0; j < productosMovimientos.length; j++) {
                            if (tblProductos.getValueAt(i, 32).equals(productosMovimientos[j])) {
                                entro = true;
                                break;
                            }
                        }

                        if (!entro) {
                            String sql1 = " where codigo = '" + tblProductos.getValueAt(i, 32) + "' ";
                            Object[][] oServicio = instancias.getSql().getTotalizadoCongelada(sql1, cong);

                            double total = 0;
                            try {
                                total = Double.parseDouble(oServicio[0][1].toString().replace(",", "."));
                            } catch (Exception e) {
                            }

                            String total1 = String.valueOf(df.format(total)).replace(".", ",");
                            instancias.getSql().modificarInventario("congelada", total1, tblProductos.getValueAt(i, 32).toString(), baseUtilizada);
                            ndProducto nodo = instancias.getSql().getDatosProducto(tblProductos.getValueAt(i, 32).toString(), baseUtilizada);
                            actualizarFisicoInventario(nodo, tblProductos.getValueAt(i, 32).toString(), baseUtilizada);
                        }
                    }

                    productosMovimientos = null;

                    if (!saltarPasosFactura) {
                        if (instancias.getConfiguraciones().isRestaurante()) {
                            Object[][] productosNuevos = new Object[tblProductos.getRowCount()][1];
                            int ser = 0;
                            for (int i = 0; i < tblProductos.getRowCount(); i++) {
                                if (!tblProductos.getValueAt(i, 30).equals("Nuevo")) {
                                    productosNuevos[ser][0] = tblProductos.getValueAt(i, 30);
                                    ser++;
                                }
                            }

                           impresionComanda comanda = new impresionComanda(null, true, txtObservaciones.getText(), datos, cmbVendedor.getSelectedItem().toString(),"");
                             

                            comanda.setInstancias(instancias, lbNoFactura.getText(), false, productosNuevos);
                            comanda.setLocationRelativeTo(null);
                            comanda.setVisible(true);
    //                        cambioMesa = true;
    //                        btnVolverMouseClicked(null);
    //                        metodos.msgExito(null, "Mesa modificada con éxito");
                        } else {
                            metodos.msgExito(null, "Congelada modificada con éxito");
                        }
                    }

                    if (instancias.getConfiguraciones().isRestaurante()) {
                        instancias.getMenu().cambiarTitulo("MESAS");
                        instancias.getSql().cambiarEstadoMesa(instancias.getTitulo(), "DISPONIBLE");
                        instancias.getMesas().cargarRegistrosMesas();
                        instancias.getMesas().cargarRegistros();
                        instancias.getMesas().setSelected(true);
                    } else {
                        instancias.getMesas1().cargarRegistros();
                        instancias.getMesas1().setSelected(true);
                    }

                    if (!instancias.getMenu().getSeVeElMenu()) {
                        instancias.getMenu().expandirMenu();
                    }
                }
            }

            saltarPasosFactura = false;
            modificarPedidoActivo = false;
            } catch (Exception e) {
                Log.error("Error actualizar "+e.getMessage());
                throw e;
            }
    }
    
    
    private void lbFacturaNoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lbFacturaNoKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_lbFacturaNoKeyReleased

    private void lbFacturaNoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lbFacturaNoKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_lbFacturaNoKeyTyped

    private void tblImagenesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblImagenesMouseClicked
        int row = tblImagenes.getSelectedRow();
        String grupo = "";

        if (row == 0) {
            row = 2;
        }

        try {
            if (row % 2 > 0) {
                grupo = tblImagenes.getValueAt(tblImagenes.getSelectedRow(), tblImagenes.getSelectedColumn()).toString();
            } else {
                grupo = tblImagenes.getValueAt(tblImagenes.getSelectedRow() + 1, tblImagenes.getSelectedColumn()).toString();
            }
        } catch (Exception e) {
            Logs.error(e);
            metodos.msgError(null, "Seleccione un grupo válido");
        }

        if (grupo.equals("")) {
            metodos.msgError(null, "Seleccione un grupo válido");
        } else {
            dlgProductosGrupo migrupo = new dlgProductosGrupo(null, true, grupo, tipo);
            migrupo.setLocationRelativeTo(null);
            migrupo.setVisible(true);
        }
    }//GEN-LAST:event_tblImagenesMouseClicked

    private void btnVolverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVolverMouseClicked
        ndCongelada nodo = null;

        String factura = tipo() + "-" + lbNoFactura.getText();
        nodo = instancias.getSql().getDatosCongelada(factura);

        if (nodo.getIdFactura() != null) {
            if (txtNombre.getText().equals("")) {
                metodos.msgAdvertenciaAjustado(null, "Debe cargar un cliente");
                return;
            }

            saltarPasosFactura = true;
            btnActualizarActionPerformed(null);

            if (instancias.getCancelarFactura()) {
                borrarAdiciones();
                return;
            } else {
            }
        } else {
            instancias.getSql().cambiarEstadoMesa(instancias.getTitulo(), "DISPONIBLE");
        }

        mesaCongelada = false;
        btnActualizar.setVisible(false);
        btnActualizar.setEnabled(false);
        btnGuardar.setVisible(true);
        btnGuardar1.setVisible(true);
        btnReImprimir.setVisible(false);
        cambioMesa = false;

        if (instancias.getConfiguraciones().isRestaurante()) {
            instancias.getMesas().cargarRegistrosMesas();
            instancias.getMesas().cargarRegistros();
            instancias.getMesas().setSelected(true);
            instancias.getMenu().cambiarTitulo("MESAS");
        } else {
            instancias.getMesas1().cargarRegistros();
            instancias.getMesas1().setSelected(true);
        }

        if (!instancias.getMenu().getSeVeElMenu()) {
            instancias.getMenu().expandirMenu();
        }
       
    }//GEN-LAST:event_btnVolverMouseClicked

    private void btnVolver1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVolver1MouseClicked
        ndCongelada nodo = null;

        String factura = tipo() + "-" + lbNoFactura.getText();
        nodo = instancias.getSql().getDatosCongelada(factura);

        if (nodo.getIdFactura() != null) {
            if (txtNombre.getText().equals("")) {
                metodos.msgAdvertenciaAjustado(null, "Debe cargar un cliente");
                return;
            }

            saltarPasosFactura = true;
            btnActualizarActionPerformed(null);

            if (instancias.getCancelarFactura()) {
                return;
            } else {
            }
        } else {
            instancias.getSql().cambiarEstadoMesa(instancias.getTitulo(), "DISPONIBLE");
        }

        mesaCongelada = false;
        btnActualizar.setVisible(false);
        btnActualizar.setEnabled(false);
        btnGuardar.setVisible(true);
        btnGuardar1.setVisible(true);
        btnReImprimir.setVisible(false);
        cambioMesa = false;

        if (instancias.getConfiguraciones().isRestaurante()) {
            instancias.getMesas().cargarRegistrosMesas();
            instancias.getMesas().cargarRegistros();
            instancias.getMesas().setSelected(true);
        } else {
            instancias.getMesas1().cargarRegistros();
            instancias.getMesas1().setSelected(true);
        }

        if (!instancias.getMenu().getSeVeElMenu()) {
            instancias.getMenu().expandirMenu();
        }
    }//GEN-LAST:event_btnVolver1MouseClicked
    
    private void tblProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductosMouseClicked
        String baseUtilizada = obtenerBase();
        ndProducto nodo = instancias.getSql().getDatosProducto(tblProductos.getValueAt(tblProductos.getSelectedRow(), 32).toString(), baseUtilizada);
       
        String dato = "";
        tblInventario.setRowSelectionInterval(tblProductos.getSelectedRow(), tblProductos.getSelectedRow()); 
        isSelected = false;
        
        if(nodo.getTipoProducto() != null && nodo.getTipoProducto()!= ""){
            this.dinamico = false;
        }else{
            this.dinamico = true;
        }
                
        if (evt.getClickCount() >= 1 && tblProductos.getSelectedColumn() == 3) {
//            if (instancias.getConfiguraciones().isProductosSerial()) {
//                
//                String tipo = "";
//
//                if (nodo.getTipoProducto() != null) {
//                    if (nodo.getTipoProducto().equals("IMEI")) {
//                        tipo = "Imei";
//                    } else if (nodo.getTipoProducto().equals("Fecha/Lote")) {
//                        tipo = "Fecha/Lote";
//                    } else if (nodo.getTipoProducto().equals("Color")) {
//                        tipo = "Color";
//                    } else if (nodo.getTipoProducto().equals("Serial")) {
//                        tipo = "Serial";
//                    } else if (nodo.getTipoProducto().equals("Talla")) {
//                        tipo = "Talla";
//                    } else if (nodo.getTipoProducto().equals("ColorTalla")) {
//                        tipo = "ColorTalla";
//                    } else if (nodo.getTipoProducto().equals("SerialColor")) {
//                        tipo = "SerialColor";
//                    } else {
//                        tipo = "";
//                    }
//                }
//
//                if (!tipo.equals("")) {
//                    metodos.msgAdvertenciaAjustado(null, "La cantidad no se puede modificar");
//                    return;
//                }
//            }
        } else if (tblProductos.getSelectedColumn() == 5) {
            if (instancias.getConfiguraciones().isFacturaElectronica()) {
                double subtotal = big.formatDouble(big.getMonedaToDouble(tblProductos.getValueAt(tblProductos.getSelectedRow(), 2).toString()) * (big.getMonedaToDouble(tblProductos.getValueAt(tblProductos.getSelectedRow(), 3).toString())));
                dlgTipoDescuento descuentoProd = new dlgTipoDescuento(null, false, tblProductos.getValueAt(tblProductos.getSelectedRow(), 5).toString(),
                        tblProductos.getValueAt(tblProductos.getSelectedRow(), 6).toString(), tblProductos.getSelectedRow(),
                        tblProductos.getValueAt(tblProductos.getSelectedRow(), 31).toString(), new BigDecimal(subtotal), this.tipo);
                descuentoProd.setVisible(true);
            }
        }
       
        if (this.tipo.equals("mesa") || this.tipo.equals("facturacion") || this.tipo.equals("pedido")) {
            if (instancias.getConfiguraciones().isRestaurante()) {
                
                if (nodo.getUsuario().equalsIgnoreCase("FACTURA")) {
                    if(nodo.getProductoFijo().equals("2") && tblProductos.getSelectedColumn() == 1){
                       metodos.msgError(factura, "EL PRODUCTO NO ADMITE MODIFICACIONES NI ADICIONES.");
                       return;
                    }
                } else {
                    if (tblProductos.getSelectedColumn() == 1) {
                        metodos.msgError(factura, "EL PRODUCTO NO TIENE PREPARACIÓN.");
                        return;
                    }
                }
                
                int opc = cmbCargar.getSelectedIndex();
            
                if(cmbCargar.getItemAt(opc).equals("Cargar FE")){
                    if(tblProductos.getSelectedColumn()!=2){
                        metodos.msgError(factura, "Esta accion no es permitida porque se esta modificando una factura!");
                        return;
                    }
                }

                if (evt.getClickCount() >= 1 && tblProductos.getSelectedColumn() == 1) {
                    try {
                        if (!this.tipo.equals("mesa")) {
                            instancias.getMenu().ocultarMenu("preparacion");
                        }
                        Map preparacion = new HashMap();

                        if(!tblProductos.getValueAt(tblProductos.getSelectedRow(), 21).equals("")){
                         preparacion = (Map) tblProductos.getValueAt(tblProductos.getSelectedRow(), 21);
                        }
                
                        instancias.getPreparacion().cargarDatos(tblProductos.getValueAt(tblProductos.getSelectedRow(), 32).toString(),
                                preparacion, mesaCongelada,
                                String.valueOf(tblProductos.getSelectedRow()), this.tipo);
                        instancias.getPreparacion().setSelected(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(pnlFactura.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else if (evt.getClickCount() >= 1 && tblProductos.getSelectedColumn() == 3) {
                    String productoEn = "";
                    if (nodo.getTipoProd() != null) {
                        if (nodo.getTipoProd().equals("Variable") || nodo.getTipoProd().equals("Fijas")) {
                            productoEn = "Desarrollo";
                        }
                    }

                    if (!this.tipo.equals("cotizacion")) {
                        if (!productoEn.equals("")) {
                            if(!nodo.getProductoFijo().equals("2") ){
                             metodos.msgAdvertenciaAjustado(null, "La cantidad no se puede modificar");
                             return;
                            }
                        }
                    }
                }
            }
        }

        try {
            dato = tblProductos.getValueAt(tblProductos.getSelectedRow(), tblProductos.getSelectedColumn()).toString();
        } catch (Exception e) {
        }

        if (!dato.equals("")) {
            valorFila = dato;
        }

        if (tblProductos.getSelectedColumn() != 22) {
            calcularTabla(tblProductos.getSelectedRow(), false);
        }

        if (tblProductos.getSelectedColumn() == 22) {
            int fila = tblProductos.getSelectedRow();
            if (tblProductos.getValueAt(fila, 16).equals("REALIZADO")) {
                metodos.msgAdvertencia(null, "No puede Borrar este producto");
                return;
            }

            if (!(Boolean) datos[62]) {
                if (this.tipo.equals("mesa") && !instancias.getUsuario().equals("ADMIN")) {
                    if (metodos.msgPregunta(null, "No se puede borrar ¿Pedir permiso?") == 0) {
                        dlgPedirPermiso permiso = new dlgPedirPermiso(null, true, "mesa");
                        permiso.setLocationRelativeTo(null);
                        permiso.setVisible(true);
                        return;
                    } else {
                        return;
                    }
                }
            }
            
            int opc = cmbCargar.getSelectedIndex();
            if(cmbCargar.getItemAt(opc).equals("Cargar FE")){
                if(tblProductos.getSelectedColumn()!=2){
                    metodos.msgError(factura, "Esta accion no es permitida porque se esta modificando una factura!");
                    return;
                }
            }
            eliminarFila();
        }
    }//GEN-LAST:event_tblProductosMouseClicked

    private void tblProductosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblProductosKeyReleased
        ValidaClick(evt);
    }//GEN-LAST:event_tblProductosKeyReleased
   
    private boolean validaInventario2(int fila) {
        String baseUtilizada = obtenerBase();
        ndProducto nodo = instancias.getSql().getDatosProducto(tblProductos.getValueAt(fila, 32).toString(), baseUtilizada);
        double cantidadDigitada = 0;//big.getMonedaToDouble(tblProductos.getValueAt(fila, 3).toString());
        double cantidadComanda = 0;
        double cantidadComandaValida=0.0;
        if(Boolean.valueOf(tblProductos.getValueAt(fila, Identidad.ControlInv).toString()) == true){
         
        for (int filas = 0; filas < tblProductos.getRowCount(); filas++) {
               
            if (tblProductos.getValueAt(fila, 32).toString().equals(tblProductos.getValueAt(filas, 32).toString())) {
                String idComanda = tblProductos.getValueAt(filas, 38).toString();
                double cantidadUniDigitada = big.getMonedaToDouble(tblProductos.getValueAt(filas, 3).toString());
                if(idComanda!=""){
                    Object[] existenciaCongelada = new Object[4];
                    existenciaCongelada = instancias.getSql().consultarExistenciaCongeladaId(idComanda);
                    cantidadComanda=+big.formatDouble(existenciaCongelada[3].toString());
                    if(big.formatDouble(existenciaCongelada[2].toString()) > cantidadUniDigitada){
                      cantidadComandaValida = big.formatDouble(existenciaCongelada[3].toString()) - cantidadUniDigitada;
                    }else if(big.formatDouble(existenciaCongelada[2].toString()) < cantidadUniDigitada){
                      cantidadComandaValida = big.formatDouble(existenciaCongelada[2].toString()) - cantidadUniDigitada;  
                    }
                }
                
                if (cantidadUniDigitada <= 0) {
                    return false;
                }
                cantidadDigitada += cantidadUniDigitada;
            }
        }
        double inventarioFisico = Double.parseDouble(nodo.getInventario().replace(",", "."));//big.formatDouble(tblInventario.getValueAt(fila, 1).toString().replace(",", "."));
        
         cantidadDigitada=Math.floor(cantidadDigitada);
//            double cantidadDigitada = big.formatDouble(tblProductos.getValueAt(fila, 3).toString().replace(".", "").replace(",", "."));
        if (inventarioFisico < (cantidadDigitada-cantidadComanda)) {
            tblProductos.setValueAt("0", fila, 3);
            metodos.msgAdvertencia(factura, "La cantidad digitada excede el inventario. Inventario Disponible : " + inventarioFisico + "");
            return false;
        }
      }
        return true;
    }
    
    /*
      valida la cantidad de los items que no sobre pase el inventario
    */
    private boolean validaInventarioOK(int fila) {
        String baseUtilizada = obtenerBase();
        ndProducto nodo = instancias.getSql().getDatosProducto(tblProductos.getValueAt(fila, 32).toString(), baseUtilizada);
        double cantidadDigitada = 0;//big.getMonedaToDouble(tblProductos.getValueAt(fila, 3).toString());
        double cantidadComanda = 0;
        double cantidadComandaValida = 0.0;
        double cantidadADescontar = 0.0;
       
        if (Boolean.valueOf(tblProductos.getValueAt(fila, Identidad.ControlInv).toString()) == true) {

            for (int filas = 0; filas < tblProductos.getRowCount(); filas++) {
                if (tblProductos.getValueAt(fila, 32).toString().equals(tblProductos.getValueAt(filas, 32).toString())) {
                    String idComanda = tblProductos.getValueAt(filas, 38).toString();
                    double cantidadUniDigitada = big.getMonedaToDouble(tblProductos.getValueAt(filas, 13).toString().replace(".", ","));
                    if (idComanda != "") {
                        Object[] existenciaCongelada = new Object[4];
                        existenciaCongelada = instancias.getSql().consultarExistenciaCongeladaId(idComanda);
                        cantidadComanda = big.formatDouble(existenciaCongelada[2].toString());
                        if (big.formatDouble(existenciaCongelada[2].toString()) > cantidadUniDigitada) {
                            cantidadComandaValida = cantidadComanda - cantidadUniDigitada;
                        } else if (big.formatDouble(existenciaCongelada[2].toString()) < cantidadUniDigitada) {
                            cantidadComandaValida = cantidadComanda - cantidadUniDigitada;
                        }
                    } else {
                        cantidadDigitada += cantidadUniDigitada;
                    }
                }
            }
            cantidadADescontar = (- Math.floor(cantidadDigitada) + cantidadComandaValida);
            double inventarioFisico = Double.parseDouble(nodo.getFisicoInventario().replace(",", "."));//big.formatDouble(tblInventario.getValueAt(fila, 1).toString().replace(",", "."));
  
            if ((inventarioFisico + cantidadADescontar) < 0 ) {
                metodos.msgAdvertencia(factura, "La cantidad digitada excede el inventario. Inventario Disponible : " + inventarioFisico + "");
                return false;
            }
        }
        return true;
    }
    private boolean validaInventario(int fila) {
        String baseUtilizada = obtenerBase();
        ndProducto nodo = instancias.getSql().getDatosProducto(tblProductos.getValueAt(fila, 32).toString(), baseUtilizada);
        double cantidadDigitada = 0;//big.getMonedaToDouble(tblProductos.getValueAt(fila, 3).toString());
        double cantidadComanda = 0;
        double cantidadComandaValida = 0.0;
        double cantidadADescontar = 0.0;
        
        if (Boolean.valueOf(tblProductos.getValueAt(fila, Identidad.ControlInv).toString()) == true && !"cotizacion".equals(this.tipo)) {

            for (int filas = 0; filas < tblProductos.getRowCount(); filas++) {
                
                if (tblProductos.getValueAt(fila, 32).toString().equals(tblProductos.getValueAt(filas, 32).toString())) {
                    String idComanda = tblProductos.getValueAt(filas, 38).toString();
                    double cantidadUniDigitada = big.getMonedaToDouble(tblProductos.getValueAt(filas, 13).toString().replace(".", ","));
                    if (idComanda != "") {
                        Object[] existenciaCongelada = new Object[4];
                       if(this.tipo.equals("pedido") || this.tipoModulo.equals("pedido") ){
                         
                        existenciaCongelada = instancias.getSql().consultarExistenciaPedidoId(idComanda);
                       }else{
                          
                        existenciaCongelada = instancias.getSql().consultarExistenciaCongeladaId(idComanda);
//                        if(existenciaCongelada[0] == null){
//                         existenciaCongelada = instancias.getSql().consultarExistenciaPedidoId(idComanda);
//                        }
                       } 
                       
                        cantidadComanda = big.formatDouble(existenciaCongelada[3].toString());
                        if (cantidadComanda > cantidadUniDigitada) {
                            cantidadComandaValida =  cantidadUniDigitada - cantidadComanda ;
                        } else if (cantidadComanda < cantidadUniDigitada) {
                            cantidadComandaValida = cantidadUniDigitada - cantidadComanda;
                        }
                        cantidadDigitada +=cantidadComandaValida;
                        cantidadComandaValida = 0.0;
                    } else {
                        cantidadDigitada += cantidadUniDigitada;
                    }
                }
            }
//            cantidadADescontar = - cantidadDigitada + cantidadComandaValida;
            cantidadADescontar = Math.floor(cantidadDigitada);
            double inventarioFisico = Double.parseDouble(nodo.getFisicoInventario().replace(",", "."));//big.formatDouble(tblInventario.getValueAt(fila, 1).toString().replace(",", "."));
          
            if ((inventarioFisico - cantidadADescontar) < 0 ) {
                metodos.msgAdvertencia(factura, "-La cantidad digitada excede el inventario. "+nodo.getDescripcion()+" Inventario Disponible : " + inventarioFisico + "");
                return false;
            }
        }else{
            Object[][] codigoPreparacionValida = instancias.getSql().getCantidadesDiscosteo(tblProductos.getValueAt(fila, 32).toString());
            if(codigoPreparacionValida.length > 0){
                String idComanda = tblProductos.getValueAt(fila, 38).toString();
                if(idComanda.equals(""))
                for (int i = 0; i < codigoPreparacionValida.length; i++) {
                    ndProducto productoDiseño = instancias.getSql().getDatosProducto(codigoPreparacionValida[i][0].toString(), baseUtilizada);
                    //SI HACE PARTE DE UNA CONGELADA NO DEBE VALIDAR PQ YA SE HA DESCONTADO PREVIAMENTE
                    if(Boolean.valueOf(productoDiseño.getManejaInventario()) == true ){
                        double inventarioFisico = Double.parseDouble(productoDiseño.getFisicoInventario().replace(",", "."));
                        if(inventarioFisico <= 0 || inventarioFisico < (Double.parseDouble(codigoPreparacionValida[i][1].toString())*Double.parseDouble(tblProductos.getValueAt(fila,Identidad.Cant).toString()))){
                            metodos.msgAdvertencia(factura, "La cantidad digitada excede el inventario. "+productoDiseño.getDescripcion()+" Inventario Disponible : " + inventarioFisico + "");
                            return false;
                        }
                    }
                }
            }        
        }
        return true;
    }
    
    private void ValidaClick(java.awt.event.KeyEvent evt){
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            popBorrarActionPerformed(null);
            return;
        }

        String baseUtilizada = obtenerBase();

        int fila = tblProductos.getSelectedRow(), i = 2, j = 0;
//        Boolean facturarSinInventarios = (Boolean) datos[Identidad.facturarSinInventario];
//         if (!facturarSinInventarios) {
//             if(!validaInventario(fila)){
//               return;
//             }
//         }                 
        
        try {
            if(fila<0){
                return;
            }
            if (tblProductos.getValueAt(fila, 16).equals("REALIZADO") && valorFila != null) {
                tblProductos.setValueAt(valorFila, fila, tblProductos.getSelectedColumn());
                valorFila = null;
                return;
            }
        } catch (Exception e) {
            Logs.error(e);
            return;
        }

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (instancias.isLector()) {
                
                if (tblProductos.getSelectedColumn() == 1) {
                    if (!(Boolean) datos[Identidad.modificarNombre]) {
                        ndProducto nodo = instancias.getSql().getDatosProducto(tblProductos.getValueAt(fila, 32).toString(), baseUtilizada);
                        tblProductos.setValueAt(nodo.getDescripcion(), fila, 1);
                    }
                } else if (tblProductos.getSelectedColumn() == 2) {
                    if (!(Boolean) datos[61]) {
                        ndProducto nodo = instancias.getSql().getDatosProducto(tblProductos.getValueAt(fila, 32).toString(), baseUtilizada);
                        
                        tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(nodo.getL1())), fila, 2);
                    }

                    if (tblProductos.getValueAt(fila, 2).toString().equalsIgnoreCase("")) {
                        tblProductos.setValueAt("0", fila, 3);
                    }
                } else if (tblProductos.getSelectedColumn() == 3) {
                    if (tblProductos.getValueAt(fila, 3).toString().equalsIgnoreCase("") || tblProductos.getValueAt(fila, 3).toString().equalsIgnoreCase("0")) {
//                        tblProductos.setValueAt("1", fila, 3);
                    }
                    i = 3;
                }

                if (evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN
                        || evt.getKeyCode() == KeyEvent.VK_LEFT || evt.getKeyCode() == KeyEvent.VK_RIGHT) {
                  
                } else {
                    txtCodProducto.requestFocus();
                }

            } else {

                if (tblProductos.getSelectedColumn() == 0) {

                    try {
                        int r = tblProductos.getSelectedRow();
                        tblProductos.changeSelection(r, 0, false, false);
                        tblProductos.removeEditor();
                        tblInventario.removeEditor();
                        tblProductos.editCellAt(r, 3);
                        tblProductos.setColumnSelectionInterval(3, 3);
                        tblProductos.transferFocus();
                    } catch (Exception e) {
                        Logs.error(e);
                    }

                } else if (tblProductos.getSelectedColumn() == 1) {

                    ndProducto nodo = instancias.getSql().getDatosProducto(tblProductos.getValueAt(fila, 32).toString(), baseUtilizada);

                    if (!(Boolean) datos[Identidad.modificarNombre]) {
                        tblProductos.setValueAt(nodo.getDescripcion(), fila, 1);
                    }
                    tblProductos.editCellAt(fila, 3);
                    tblProductos.setColumnSelectionInterval(3, 3);
                    tblProductos.transferFocus();

                } else if (tblProductos.getSelectedColumn() == 2) {
                 
                    if (tblProductos.getValueAt(fila, 32).equals("IMP01")) {
                        tblProductos.setValueAt(this.simbolo + " 0", fila, 2);
                    }

                    if (tblProductos.getValueAt(fila, 2).toString().equalsIgnoreCase("")) {
                        tblProductos.setValueAt("0", fila, 3);
                    }

                    if (!(Boolean) datos[Identidad.modificarNombre]) {
                     
                        ndProducto nodo = instancias.getSql().getDatosProducto(tblProductos.getValueAt(fila, 32).toString(), baseUtilizada);
                        tblProductos.setValueAt(nodo.getDescripcion(), fila, 1);
                    }

                    if (!(Boolean) datos[Identidad.modificarPrecio]) {
                      
                        ndProducto nodo = instancias.getSql().getDatosProducto(tblProductos.getValueAt(fila, 32).toString(), baseUtilizada);

                        String lista = tblInventario.getValueAt(tblProductos.getSelectedRow(), 0).toString();
                        if (lista.equals("L1")) {
                            tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(nodo.getL1())), tblProductos.getSelectedRow(), 2);
                        } else if (lista.equals("L2")) {
                            tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(nodo.getL2())), tblProductos.getSelectedRow(), 2);
                        } else if (lista.equals("L3")) {
                            tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(nodo.getL3())), tblProductos.getSelectedRow(), 2);
                        } else if (lista.equals("L4")) {
                            tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(nodo.getL4())), tblProductos.getSelectedRow(), 2);
                        }
                    }
                   
                    int opc = cmbCargar.getSelectedIndex();
                    
                    if(!cmbCargar.getItemAt(opc).equals("Cargar FE")){
                         tblProductos.editCellAt(fila, 3);
                         tblProductos.setColumnSelectionInterval(3, 3);
                         tblProductos.transferFocus();
                    }
                
                } else if (tblProductos.getSelectedColumn() == 3) {

                    if (!(Boolean) datos[61]) {
                        ndProducto nodo = instancias.getSql().getDatosProducto(tblProductos.getValueAt(fila, 32).toString(), baseUtilizada);

                        String lista = tblInventario.getValueAt(fila, 0).toString();
                       
                        if (lista.equals("L1")) {
                            tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(nodo.getL1())), fila, 2);
                        } else if (lista.equals("L2")) {
                            tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(nodo.getL2())), fila, 2);
                        } else if (lista.equals("L3")) {
                            tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(nodo.getL3())), fila, 2);
                        } else if (lista.equals("L4")) {
                            tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(nodo.getL4())), fila, 2);
                        }
                    }

                    String cant = tblProductos.getValueAt(tblProductos.getSelectedRow(), 3).toString();
                    ndProducto nodo = instancias.getSql().getDatosProducto(tblProductos.getValueAt(fila, 32).toString(), baseUtilizada);

                    String tipo = "";
                    if (nodo.getTipoProducto() != null) {
                        if (nodo.getTipoProducto().equals("IMEI")) {
                            tipo = "Imei";
                        } else if (nodo.getTipoProducto().equals("Fecha/Lote")) {
                            tipo = "Fecha/Lote";
                        } else if (nodo.getTipoProducto().equals("Color")) {
                            tipo = "Color";
                        } else if (nodo.getTipoProducto().equals("Serial")) {
                            tipo = "Serial";
                        } else if (nodo.getTipoProducto().equals("Talla")) {
                            tipo = "Talla";
                        } else if (nodo.getTipoProducto().equals("ColorTalla")) {
                            tipo = "ColorTalla";
                        } else if (nodo.getTipoProducto().equals("SerialColor")) {
                            tipo = "SerialColor";
                        } else {
                            tipo = "";
                        }
                    }

                    if (!tipo.equals("")) {
                        tblProductos.setValueAt(cant, fila, 3);
                    }

                    if (tblProductos.getValueAt(fila, 3).toString().equalsIgnoreCase("") || tblProductos.getValueAt(fila, 3).toString().equalsIgnoreCase("0")) {
//                        tblProductos.setValueAt("1", fila, 3);
                    }

                    if (instancias.getConfiguraciones().isFacturaElectronica()) {
                        txtCodProducto.requestFocus();
                    } else {
                        tblProductos.editCellAt(fila, 5);
                        tblProductos.setColumnSelectionInterval(5, 5);
                        tblProductos.transferFocus();
                    }

                    i = 3;
                } else if (tblProductos.getSelectedColumn() == 5) {
                    // Si se esta cambiando el campo de descuento

                    if (evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN
                            || evt.getKeyCode() == KeyEvent.VK_LEFT || evt.getKeyCode() == KeyEvent.VK_RIGHT) {
                       
                    } else {
                        txtCodProducto.requestFocus();
                    }

                    i = 5;
                    j = 0;
                }
            }

            if (tblProductos.getSelectedColumn() == 17) {
               
                tblProductos.editCellAt(tblProductos.getSelectedRow(), 17);
                tblProductos.setColumnSelectionInterval(17, 17);
                try {
                    tblProductos.setValueAt(big.setMoneda(big.getMoneda(tblProductos.getValueAt(fila, 17).toString())), fila, 17);
                } catch (Exception e) {
                    Logs.error(e);
                    tblProductos.setValueAt(big.setMoneda(big.getBigDecimal("0")), fila, 17);
                }
                tblProductos.transferFocus();

            }

            if (tblProductos.getSelectedColumn() == 19) {
    
                try {
                    tblProductos.setValueAt(big.setMoneda(big.getMoneda(tblProductos.getValueAt(fila, 19).toString())), fila, 19);
                    BigDecimal resta = big.getMoneda(tblProductos.getValueAt(fila, 9).toString()).subtract(big.getMoneda(tblProductos.getValueAt(fila, 19).toString()));
                    tblProductos.setValueAt(resta, fila, 20);

                    if (resta.compareTo(BigDecimal.ZERO) < 0) {
                        metodos.msgAdvertencia(factura, "No tiene ninguna utilidad!");
                        tblProductos.setValueAt(big.setMoneda(big.getBigDecimal("0")), fila, 19);
                    }

                } catch (Exception e) {
                    Logs.error(e);
                    tblProductos.setValueAt(big.setMoneda(big.getBigDecimal("0")), fila, 19);
                }
                tblProductos.transferFocus();
            }
            
            double totalItem = 0;
            double valorDescuento = 0;
            double cantt = 0;

            try {
                valorDescuento = big.getMonedaToDouble(tblProductos.getValueAt(fila, 6).toString());
                cantt = big.getMonedaToDouble(tblProductos.getValueAt(fila, 3).toString());
                totalItem = big.getMonedaToDouble(tblProductos.getValueAt(fila, 9).toString());
                if(cantt <= 0.0){
                  metodos.msgAdvertencia(factura, "El cantidad debe ser mayor a cero");                 
                  tblProductos.setValueAt(big.getBigDecimal("1"),fila, 3); 
                }
                
                if (valorDescuento > totalItem) {                    
                    metodos.msgAdvertencia(factura, "El Descuento no puede ser mayor al valor del producto!");
                    tblProductos.setValueAt(big.setMoneda(big.getBigDecimal("0")),fila, 6);
                }
            } catch (Exception e) {
            }
            
            
            BigDecimal porcentajeDescuento = big.getBigDecimal(tblProductos.getValueAt(fila, 5).toString().replace(",", "."));

            int res = porcentajeDescuento.compareTo(big.getBigDecimal("0"));
            if (res == -1 || String.valueOf(tblProductos.getValueAt(fila, i)).equals("")) {
                tblProductos.setValueAt(j, fila, 5);
            }

            if (tblProductos.getSelectedColumn() == 24) {
                tblProductos.editCellAt(fila, 25);
                tblProductos.setColumnSelectionInterval(25, 25);
                tblProductos.transferFocus();
            } else if (tblProductos.getSelectedColumn() == 25) {
                tblProductos.editCellAt(fila, 26);
                tblProductos.setColumnSelectionInterval(26, 26);
                tblProductos.transferFocus();
            } else if (tblProductos.getSelectedColumn() == 26) {
                txtCodProducto.transferFocus();
            }

            calcularTabla(fila, true);
        } else if (evt.getKeyCode() == KeyEvent.VK_TAB || evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN
                || evt.getKeyCode() == KeyEvent.VK_LEFT || evt.getKeyCode() == KeyEvent.VK_RIGHT) {

            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                fila = fila - 1;
            } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
                fila = fila + 1;
            }

            if (fila < 0) {
                fila = 0;
            }
            if (tblProductos.getRowCount() == fila) {
                fila = fila - 1;

            }

            calcularTabla(fila, true);
        }
         
        if ((Boolean) tblProductos.getValueAt(fila, 37) == true) {
             Object[] existenciaCongelada = new Object[4];
            
             double cantidadReservadaPorItemSelect=0;
            if(tblProductos.getValueAt(fila, 38).toString() != null && tblProductos.getValueAt(fila, 38).toString()!= ""){
              Boolean facturarSinInventario = (Boolean) datos[Identidad.facturarSinInventario];
                if (!facturarSinInventario) {
                   existenciaCongelada = instancias.getSql().consultarExistenciaCongeladaId(tblProductos.getValueAt(fila, 38).toString());  
                   cantidadReservadaPorItemSelect=big.formatDouble(existenciaCongelada[2].toString());
                }
            }               
            double inventarioFisico = big.formatDouble(tblInventario.getValueAt(fila, 1).toString().replace(",", "."));
            double cantidadDigitada = big.formatDouble(tblProductos.getValueAt(fila, 3).toString().replace(".", "").replace(",", "."));
            double total = (inventarioFisico) - cantidadDigitada;
             
               tblInventario.setValueAt(total, fila, 2);
//               tblProductos.transferFocus();
               this.repaint();
        } else {
            tblInventario.setValueAt("N/A", fila, 1);
            tblInventario.setValueAt("N/A", fila, 2);
        }
    }
    
    private void lbNit1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lbNit1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_lbNit1KeyReleased

    private void lbDireccion8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbDireccion8MouseClicked

    }//GEN-LAST:event_lbDireccion8MouseClicked

    private void tblInventarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblInventarioMouseClicked
        int rowInv = -1, rowProd = -1;
        rowInv = tblInventario.getSelectedRow();
        rowProd = tblProductos.getSelectedRow();
        if(evt.getClickCount() > 1 && rowInv == rowProd && isSelected){
            String idSistema = tblProductos.getValueAt(rowInv, 32).toString();
            //eliminarFila();
            seleccionarPLU pluu = new seleccionarPLU(null, true, obtenerBase());
            pluu.setFactura(this);
            pluu.setIslista(true);
            pluu.setInstancias(instancias, idSistema,tblProductos);
            pluu.setOpc("factura");
            pluu.setVisible(true);
            isSelected = true;
        }else{
            if (rowInv > -1  ){
                tblProductos.setRowSelectionInterval(rowInv, rowInv); 
                isSelected = true;
            }
        }
        
    }//GEN-LAST:event_tblInventarioMouseClicked

    private void lbOtroConsecutivoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lbOtroConsecutivoKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_lbOtroConsecutivoKeyReleased

    private void lbOtroConsecutivoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lbOtroConsecutivoKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_lbOtroConsecutivoKeyTyped

    private void txtIdSistemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdSistemaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdSistemaActionPerformed

    private void txtIdSistemaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIdSistemaKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdSistemaKeyReleased

    private void txtIdSistemaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIdSistemaKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdSistemaKeyTyped

    private void txtFechaFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFechaFacturaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFechaFacturaActionPerformed

    private void btnCambiarMesaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCambiarMesaActionPerformed
        String num = instancias.getSql().getNumeroMesas();

        Object[][] congeladas = instancias.getSql().getDatosCongelada1();
        if (congeladas.length >= Integer.parseInt(num)) {
            metodos.msgAdvertenciaAjustado(null, "No hay mesas disponibles");
            return;
        }

        String factura = tipo() + "-" + lbNoFactura.getText();
        dlgEscojerMesa mesa = new dlgEscojerMesa(null, true, factura);
        mesa.setVisible(true);

        if (cambioMesa) {
            btnVolverMouseClicked(null);
//            instancias.getMesas().cargarRegistrosMesas();
//            instancias.getMesas().cargarRegistros();
//            instancias.getMesas().setSelected(true);
//
//            if (!instancias.getMenu().getSeVeElMenu()) {
//                instancias.getMenu().expandirMenu();
//            }
        }
    }//GEN-LAST:event_btnCambiarMesaActionPerformed

    private void lbTotalDescuentoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbTotalDescuentoMouseClicked

    }//GEN-LAST:event_lbTotalDescuentoMouseClicked

    private void lbNitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbNitMouseClicked

    }//GEN-LAST:event_lbNitMouseClicked

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        rdPos.setSelected(true);
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        rdCarta.setSelected(true);
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        rdMediaCarta.setSelected(true);
    }//GEN-LAST:event_jLabel4MouseClicked

    private void rdPosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rdPosItemStateChanged

    }//GEN-LAST:event_rdPosItemStateChanged

    private void rdCartaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rdCartaItemStateChanged

    }//GEN-LAST:event_rdCartaItemStateChanged

    private void rdMediaCartaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rdMediaCartaItemStateChanged

    }//GEN-LAST:event_rdMediaCartaItemStateChanged

    private void btnBuscTercerosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscTercerosActionPerformed
        txtNombre.setEnabled(false);
        txtNombre.setEditable(false);
        lbCupo.setText("");
        lbCupo.setVisible(false);
        txtVencimiento.setText(txtFechaFactura.getText());        
        txtNit.setText("");
        txtNombre.setText("");
        btnCambioMoneda.setVisible(false);
        jLMoneda.setVisible(false);
        txtNit.repaint();
        ventanaTerceros("");
    }//GEN-LAST:event_btnBuscTercerosActionPerformed

    private void txtTurnoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTurnoKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTurnoKeyReleased

    private void txtTurnoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTurnoKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTurnoKeyTyped

    private void rdMediaCartaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdMediaCartaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdMediaCartaActionPerformed

    private void btnBusProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBusProdActionPerformed
        try {
            int num = Integer.parseInt(datos[49].toString());
            if (!rdPos.isSelected()) {
                if (num > 0) {
                    if (tblProductos.getRowCount() >= num) {
                        if (metodos.msgPregunta(factura, "Limite de productos, ¿Desea continuar?") != 0) {
                            return;
                        }
                    }
                }
            }
        } catch (Exception e) {
            Logs.error(e);
        }

        ventanaProductos("");
    }//GEN-LAST:event_btnBusProdActionPerformed

    private void btnBuscTerceros1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscTerceros1ActionPerformed
        dlgInformacionCliente notaCliente = new dlgInformacionCliente(null, true, txtIdSistema.getText());
        notaCliente.setLocationRelativeTo(null);
        notaCliente.setVisible(true);
    }//GEN-LAST:event_btnBuscTerceros1ActionPerformed

    private void txtDiasPlazoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDiasPlazoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDiasPlazoActionPerformed

    private void btnOcultarInfoClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOcultarInfoClienteActionPerformed
        if (pnlInformacion.isVisible()) {
            pnlInformacion.setVisible(false);
            btnOcultarInfoCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/boton-de-suma.png")));
        } else {
            pnlInformacion.setVisible(true);
            btnOcultarInfoCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/boton-resta.png")));
        }
    }//GEN-LAST:event_btnOcultarInfoClienteActionPerformed

    private void txtPorcentajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPorcentajeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPorcentajeActionPerformed

    private void lbProducto1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lbProducto1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_lbProducto1KeyReleased

    private void txtCantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCantActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCantActionPerformed

    private void txtCantFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCantFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCantFocusGained

    private void txtCantKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCantKeyPressed

    private void txtCantKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCantKeyReleased

    private void btnNuevaParte1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevaParte1ActionPerformed
        infNuevaParte buscador = new infNuevaParte();
        String tipo = txtTipoVehiculo.getText();
        buscador.cargarArticulos("Moto");
        buscador.setVisible(true);
    }//GEN-LAST:event_btnNuevaParte1ActionPerformed

    private void txtNombreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtNombreMouseClicked

    }//GEN-LAST:event_txtNombreMouseClicked

    private void btnPendientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPendientesActionPerformed
        if (tipo.equals("cotizacion")) {
            new dlgCotizacionesPendientes(null, false);
        } else if (tipo.equals("orden")) {
            dlgOrdenesServicioPendientes pendiente = new dlgOrdenesServicioPendientes(null, true, "");
            pendiente.setVisible(true);
        } else if (tipo.equals("pedido")) {
            dlgPedidosPendientes pendiente = new dlgPedidosPendientes(null, true, "", "");
            pendiente.setVisible(true);
        }
    }//GEN-LAST:event_btnPendientesActionPerformed

    private void txtObservacionesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtObservacionesKeyReleased
        int cantidad = txtObservaciones.getText().length();
        cantidad = 300 - cantidad;

        lbCar.setText(String.valueOf(cantidad));

        if (cantidad <= 0) {
            txtObservaciones.setText(txtObservaciones.getText().substring(0, 300));
            lbCar.setText("0");
        }
    }//GEN-LAST:event_txtObservacionesKeyReleased

    private void txtTipoVehiculoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTipoVehiculoKeyPressed

    }//GEN-LAST:event_txtTipoVehiculoKeyPressed

    private void txtTipoVehiculoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTipoVehiculoKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!txtTipoVehiculo.getText().equals("")) {
                cargarArticulos(txtTipoVehiculo.getText());
                txtModelo.requestFocus();
            } else {
                ventanaTipoVehiculos(txtTipoVehiculo.getText());
            }
        } else {
            txtTipoVehiculo.setText("");
        }
    }//GEN-LAST:event_txtTipoVehiculoKeyReleased

    private void cmbVendedorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbVendedorMouseClicked

    }//GEN-LAST:event_cmbVendedorMouseClicked

    private void txtCupoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCupoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCupoActionPerformed

    private void txtCupoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCupoKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCupoKeyReleased

    private void txtCupoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCupoKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCupoKeyTyped

    private void txtCarteraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCarteraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCarteraActionPerformed

    private void txtCarteraKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCarteraKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCarteraKeyReleased

    private void txtCarteraKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCarteraKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCarteraKeyTyped

    private void lbTotalDescuento1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbTotalDescuento1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_lbTotalDescuento1MouseClicked

    private void txtCantUnidadesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCantUnidadesMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCantUnidadesMouseClicked

    private void lbTotalDescuento2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbTotalDescuento2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_lbTotalDescuento2MouseClicked

    private void txtCantProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCantProductosMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCantProductosMouseClicked

    private void lbDiasPlazoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbDiasPlazoMouseClicked

    }//GEN-LAST:event_lbDiasPlazoMouseClicked

    private void lbProductoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbProductoMouseClicked

    }//GEN-LAST:event_lbProductoMouseClicked

    private void txtDescGeneralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescGeneralActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescGeneralActionPerformed

    private void txtDescGeneralKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescGeneralKeyReleased
        if (txtDescGeneral.getText().equals("") || txtDescGeneral.getText().equals(this.simbolo) || txtDescGeneral.getText().equals(this.simbolo + " ")) {
            txtDescGeneral.setText("0");
        }

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cargarTotales();
        } else {
            txtDescGeneral.setText(big.setMoneda(big.getMoneda(txtDescGeneral.getText())));
            cargarTotales();
        }
    }//GEN-LAST:event_txtDescGeneralKeyReleased

    private void txtDescGeneralKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescGeneralKeyTyped
        metodos.soloNum(evt);
    }//GEN-LAST:event_txtDescGeneralKeyTyped

    private void lbBodegaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lbBodegaKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_lbBodegaKeyReleased

    private void txtBodegaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBodegaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBodegaActionPerformed

    private void txtBodegaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBodegaFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBodegaFocusGained

    private void txtBodegaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBodegaKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBodegaKeyPressed

    private void txtBodegaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBodegaKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (txtBodega.getText().equals("")) {
                ventanaBodegas("");
            } else {
                txtCodProducto.requestFocus();
            }
        } else {
            txtBodega.setText("");
            if (tblProductos.getRowCount() > 0) {
                while (tblProductos.getRowCount() > 0) {
                    modeloPro.removeRow(0);
                }
                while (tblInventario.getRowCount() > 0) {
                    modeloInventario.removeRow(0);
                }
            }
        }
    }//GEN-LAST:event_txtBodegaKeyReleased

    private void txtBodegaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtBodegaMouseClicked
        if (txtBodega.isEnabled()) {
            if (!txtBodega.getText().equals("")) {
                if (tblProductos.getRowCount() > 0) {
                    if (metodos.msgPregunta(null, "¿Limpiar factura?") != 0) {
                        txtCodProducto.requestFocus();
                        return;
                    } else {
                        while (tblProductos.getRowCount() > 0) {
                            modeloPro.removeRow(0);
                        }
                        while (tblInventario.getRowCount() > 0) {
                            modeloInventario.removeRow(0);
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_txtBodegaMouseClicked

    private void txtBodegaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtBodegaMouseEntered

    }//GEN-LAST:event_txtBodegaMouseEntered

    private void txtBodegaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtBodegaMousePressed
        if (txtBodega.isEnabled()) {
            if (!txtBodega.getText().equals("")) {
                if (tblProductos.getRowCount() > 0) {
                    if (metodos.msgPregunta(null, "¿Limpiar factura?") != 0) {
                        txtCodProducto.requestFocus();
                        return;
                    } else {
                        while (tblProductos.getRowCount() > 0) {
                            modeloPro.removeRow(0);
                        }
                        while (tblInventario.getRowCount() > 0) {
                            modeloInventario.removeRow(0);
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_txtBodegaMousePressed

    private void txtBodegaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtBodegaMouseReleased
        if (txtBodega.isEnabled()) {
            if (!txtBodega.getText().equals("")) {
                if (tblProductos.getRowCount() > 0) {
                    if (metodos.msgPregunta(null, "¿Limpiar factura?") != 0) {
                        txtCodProducto.requestFocus();
                        return;
                    } else {
                        while (tblProductos.getRowCount() > 0) {
                            modeloPro.removeRow(0);
                        }
                        while (tblInventario.getRowCount() > 0) {
                            modeloInventario.removeRow(0);
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_txtBodegaMouseReleased

    public void cambiarComprobante(int row) {
        for (int i = 0; i < tblComprobantes.getRowCount(); i++) {
            tblComprobantes.setValueAt(false, i, 2);
        }
        
        tblComprobantes.setRowSelectionAllowed(true);
        tblComprobantes.getSelectionModel().clearSelection();
        tblComprobantes.getSelectionModel().addSelectionInterval(row, row);
        tblComprobantes.setValueAt(true, row, 2); 

        if (row == -1) {
            tblComprobantes.setValueAt(true, 0, 2);

            if (null == tblComprobantes.getValueAt(0, 7)) {
                cmbTipoOperacion.setVisible(false);
                lbTipoOperacion.setVisible(false);
            } else {
                if (tblComprobantes.getValueAt(0, 7).equals("Facturación Electronica")) {
                    cmbTipoOperacion.setVisible(true);
                    lbTipoOperacion.setVisible(true);
                } else {
                    cmbTipoOperacion.setVisible(false);
                    lbTipoOperacion.setVisible(false);
                }
            }
        } else {
            tblComprobantes.setValueAt(true, row, 2);

            if (null == tblComprobantes.getValueAt(row, 7)) {
                cmbTipoOperacion.setVisible(false);
                lbTipoOperacion.setVisible(false);
            } else {
                if (tblComprobantes.getValueAt(row, 7).equals("Facturación Electronica")) {
                    cmbTipoOperacion.setVisible(true);
                    lbTipoOperacion.setVisible(true);
                } else {
                    cmbTipoOperacion.setVisible(false);
                    lbTipoOperacion.setVisible(false);
                }
            }
        }

        
        
        
    }
    
    private void tblComprobantesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblComprobantesMouseClicked
        for (int i = 0; i < tblComprobantes.getRowCount(); i++) {
            tblComprobantes.setValueAt(false, i, 2);
        }
        if (tblComprobantes.getSelectedRow() == -1) {
            tblComprobantes.setValueAt(true, 0, 2);

            if (null == tblComprobantes.getValueAt(0, 7)) {
                cmbTipoOperacion.setVisible(false);
                lbTipoOperacion.setVisible(false);
            } else {
                if (tblComprobantes.getValueAt(0, 7).equals("Facturación Electronica")) {
                    cmbTipoOperacion.setVisible(true);
                    lbTipoOperacion.setVisible(true);
                } else {
                    cmbTipoOperacion.setVisible(false);
                    lbTipoOperacion.setVisible(false);
                }
            }

            actualizarResolucion(0);
        } else {
            tblComprobantes.setValueAt(true, tblComprobantes.getSelectedRow(), 2);

            if (null == tblComprobantes.getValueAt(tblComprobantes.getSelectedRow(), 7)) {
                cmbTipoOperacion.setVisible(false);
                lbTipoOperacion.setVisible(false);
            } else {
                if (tblComprobantes.getValueAt(tblComprobantes.getSelectedRow(), 7).equals("Facturación Electronica")) {
                    cmbTipoOperacion.setVisible(true);
                    lbTipoOperacion.setVisible(true);
                } else {
                    cmbTipoOperacion.setVisible(false);
                    lbTipoOperacion.setVisible(false);
                }
            }

            actualizarResolucion(tblComprobantes.getSelectedRow());
        }
        
       
    }//GEN-LAST:event_tblComprobantesMouseClicked

    private void tblComprobantesMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblComprobantesMouseEntered

    }//GEN-LAST:event_tblComprobantesMouseEntered

    private void tblComprobantesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblComprobantesMouseExited
        for (int i = 0; i < tblComprobantes.getRowCount(); i++) {
            tblComprobantes.setValueAt(false, i, 2);
        }

        if (tblComprobantes.getSelectedRow() == -1) {
            tblComprobantes.setValueAt(true, 0, 2);

            if (null == tblComprobantes.getValueAt(0, 7)) {
                cmbTipoOperacion.setVisible(false);
                lbTipoOperacion.setVisible(false);
            } else {
                if (tblComprobantes.getValueAt(0, 7).equals("Facturación Electronica")) {
                    cmbTipoOperacion.setVisible(true);
                    lbTipoOperacion.setVisible(true);
                } else {
                    cmbTipoOperacion.setVisible(false);
                    lbTipoOperacion.setVisible(false);
                }
            }

            actualizarResolucion(0);
        } else {
            tblComprobantes.setValueAt(true, tblComprobantes.getSelectedRow(), 2);

            if (null == tblComprobantes.getValueAt(tblComprobantes.getSelectedRow(), 7)) {
                cmbTipoOperacion.setVisible(false);
                lbTipoOperacion.setVisible(false);
            } else {
                if (tblComprobantes.getValueAt(tblComprobantes.getSelectedRow(), 7).equals("Facturación Electronica")) {
                    cmbTipoOperacion.setVisible(true);
                    lbTipoOperacion.setVisible(true);
                } else {
                    cmbTipoOperacion.setVisible(false);
                    lbTipoOperacion.setVisible(false);
                }
            }

            actualizarResolucion(tblComprobantes.getSelectedRow());
        }
    }//GEN-LAST:event_tblComprobantesMouseExited

    private void txtGarantiaFuncionamientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGarantiaFuncionamientoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGarantiaFuncionamientoActionPerformed

    private void dtDesdeOnCommit(datechooser.events.CommitEvent evt) {//GEN-FIRST:event_dtDesdeOnCommit
        try {
            txtVencimiento.setText(metodos.sumarFecha(txtFechaFactura.getText(), Integer.parseInt(txtDiasPlazo.getText())));
        } catch (NumberFormatException exep) {
            txtVencimiento.setText(metodos.sumarFecha(txtFechaFactura.getText(), 0));
        }
    }//GEN-LAST:event_dtDesdeOnCommit

    private void dtHastaOnCommit(datechooser.events.CommitEvent evt) {//GEN-FIRST:event_dtHastaOnCommit
        // TODO add your handling code here:
    }//GEN-LAST:event_dtHastaOnCommit

    private void txtCantFacturadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCantFacturadosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCantFacturadosActionPerformed

    private void txtCantIncrementoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCantIncrementoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCantIncrementoActionPerformed

    private void txtUltimaFacturaFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUltimaFacturaFechaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUltimaFacturaFechaActionPerformed

    private void txtPorcentajeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtPorcentajeMouseClicked
        if (instancias.getConfiguraciones().isFacturaElectronica()) {
            if (this.tipo.equals("facturacion") || btnGuardar.getText().equals("GUARDAR")) {
                String descuento="";
                int bandera = 0;
                for (int i = 0; i < tblProductos.getRowCount(); i++) {
                    if(!tblProductos.getValueAt(i, 5).toString().equals(descuento)){
                      descuento = tblProductos.getValueAt(i, 5).toString();
                      bandera++;
                    }
                }
                if(bandera != 1){
                  descuento = txtPorcentaje.getText();
                }
                
                String descSeleccionado = "Sin-Permiso";
                try {
                    descSeleccionado = tblProductos.getValueAt(0, 31).toString();
                } catch (Exception e) {
                }

                dlgTipoDescuento descuentoProd = new dlgTipoDescuento(null, false, descuento, this.simbolo + " 0", 10000, descSeleccionado, BigDecimal.ZERO, this.tipo);
                descuentoProd.setVisible(true);
            }
        }
    }//GEN-LAST:event_txtPorcentajeMouseClicked

    private void lbModeloContableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lbModeloContableKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_lbModeloContableKeyReleased

    private void lbModeloContableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lbModeloContableKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_lbModeloContableKeyTyped

    private void txtModeloContableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtModeloContableKeyReleased
        if (txtModeloContable.getText().length() > 8) {
            txtModeloContable.setText(txtModeloContable.getText().substring(0, 8));
        }
    }//GEN-LAST:event_txtModeloContableKeyReleased

    private void txtModeloContableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtModeloContableKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModeloContableKeyTyped

    private void cmbListasMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbListasMouseEntered
        
    }//GEN-LAST:event_cmbListasMouseEntered

    private void tblInventarioMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblInventarioMouseEntered
    
    }//GEN-LAST:event_tblInventarioMouseEntered

    private void cmbListasInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_cmbListasInputMethodTextChanged

    }//GEN-LAST:event_cmbListasInputMethodTextChanged

    private void cmbListasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbListasMouseReleased
        
    }//GEN-LAST:event_cmbListasMouseReleased

    private void cmbListasMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbListasMousePressed
         
    }//GEN-LAST:event_cmbListasMousePressed

    private void cmbListasPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_cmbListasPropertyChange
     
    }//GEN-LAST:event_cmbListasPropertyChange

    private void tblProductosMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductosMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_tblProductosMouseEntered

    private void tblInventarioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tblInventarioFocusGained
//         int rowProd = -1, rowInv = -1;
//         rowInv = tblInventario.getSelectedRow();
//         if (rowInv > -1){
//             tblProductos.setRowSelectionInterval(rowInv, rowInv);
//             rowProd = tblProductos.getSelectedRow();
//             if(rowInv == rowProd && isSelected) {
//                   String idSistema = tblProductos.getValueAt(rowInv, 32).toString();
//                   eliminarFila();
//                   seleccionarPLU pluu = new seleccionarPLU(null, true, obtenerBase());
//                   pluu.setFactura(this);
//                   pluu.setInstancias(instancias, idSistema);
//                   pluu.setOpc("factura");
//                   pluu.setVisible(true); 
//                   isSelected = false;
//            }else {
//               tblProductos.setRowSelectionInterval(rowInv, rowInv);  
//               isSelected = true;
//             }
//         
//        } 
    }//GEN-LAST:event_tblInventarioFocusGained

    private void cmbListasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbListasMouseClicked
      
    }//GEN-LAST:event_cmbListasMouseClicked

    private void tblInventarioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tblInventarioFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_tblInventarioFocusLost

    private void tblProductosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblProductosKeyTyped
        // TODO add your handling code here:       
    }//GEN-LAST:event_tblProductosKeyTyped

    private void tblProductosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblProductosKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tblProductosKeyPressed
   
    private void btnCambioMonedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCambioMonedaActionPerformed
        // TODO add your handling code here:
        CambioMoneda dialog = new CambioMoneda(null, true,"Dólar");
        dialog.setLocationRelativeTo(null);
        dialog.show();
        jLMoneda.setText(getTrmMoneda());
    }//GEN-LAST:event_btnCambioMonedaActionPerformed

    public void ventanaBodegas(String nit) {
        buscBodegas buscar = new buscBodegas(instancias.getMenu(), true, "INTERNA");
        buscar.setLocationRelativeTo(null);
        instancias.setBuscBodegas(buscar);
        instancias.setCampoActual(txtBodega);
        txtBodega.requestFocus();
        buscar.noEncontrado(nit);
        buscar.show();
    }

    public void actualizarResolucion(int fila) {

        String resolucion = "", numeracion = "", infoResolucion = "", infoEmpresa = "";
        try {
            infoResolucion = "\n"+tblComprobantes.getValueAt(fila, 1).toString() ;
        } catch (Exception e) {
        }
        /* INFORMACION DE LA EMPRESA */
        if (null != datos[8]) {
            infoEmpresa = infoEmpresa + "" + (String) datos[8] + "";
        }

        if (null != datos[9]) {
            infoEmpresa = infoEmpresa + "\n" + (String) datos[9];
        }

        if (null != datos[10]) {
            infoEmpresa = infoEmpresa + "\n" + (String) datos[10];
        }

        if (null != datos[13]) {
            infoEmpresa = infoEmpresa + "\n" + (String) datos[13];
        }

        if (null != datos[14]) {
            infoEmpresa = infoEmpresa + "\n" + (String) datos[14];
        }
        /* FIN DE LA INFORMACION */

        String dato1 = "", dato2 = "";
        if (null != datos[16]) {
            dato1 = (String) datos[16];
        }

        if (null != datos[15]) {
            dato2 = (String) datos[15];
        }

        if (instancias.getRegimen().equals("")) {
            String resol = "", desde = "", hasta = "", fecha = "", tipo = "";

            try {
                resol = "\n RESOLUCION " + tblComprobantes.getValueAt(fila, 3).toString();
            } catch (Exception e) {
            }

            try {
                tipo = tblComprobantes.getValueAt(fila, 7).toString();
            } catch (Exception e) {
            }

            try {
                fecha = tblComprobantes.getValueAt(fila, 4).toString();
            } catch (Exception e) {
            }

            try {
                desde = tblComprobantes.getValueAt(fila, 5).toString();
            } catch (Exception e) {
            }

            try {
                hasta = tblComprobantes.getValueAt(fila, 6).toString();
            } catch (Exception e) {
            }

            resolucion = resol + " " + fecha;
            numeracion = "NUMERACION DESDE " + desde + " HASTA " + hasta;

            infoResolucion = infoResolucion + "\n" + resolucion + "\n" + numeracion;

            if (null == tblComprobantes.getValueAt(fila, 11)) {
                txtModeloContable.setText("");
            } else {
                txtModeloContable.setText(tblComprobantes.getValueAt(fila, 11).toString());
            }

            if (null != tipo) {
                if (tipo.equals("Facturación Electronica")) {
                    cmbTipoOperacion.setVisible(true);
                    lbTipoOperacion.setVisible(true);
                } else {
                    lbTipoOperacion.setVisible(false);
                    cmbTipoOperacion.setVisible(false);
                }
            } else {
                lbTipoOperacion.setVisible(false);
                cmbTipoOperacion.setVisible(false);
            }

            actualizarConsecutivo(fila);
            String datosEmpresa = metodosGenerales.convertToMultiline(infoEmpresa);
            String datosEmpresaReimpresion = infoEmpresa;
            String datosEmpresaCompleto = metodosGenerales.convertToMultiline(infoEmpresa + "" + infoResolucion);

            instancias.setInformacionEmpresaCompleto(datosEmpresaCompleto);
            instancias.setDatosEmpresa(datosEmpresa, dato1, dato2, datosEmpresaCompleto, datosEmpresaReimpresion);
            instancias.setResolucion(resolucion + "\n" + numeracion);
        } else {
            if (datos[11] != null) {
                resolucion = " " +  datos[11].toString();
            }

            if (datos[12] != null) {
                numeracion = datos[12].toString();
            }

            if (resolucion.equals("") || numeracion.equals("")) {
            } else {
                infoResolucion = infoResolucion + "\n" + resolucion + "\n" + numeracion;
            }

            String datosEmpresa = metodosGenerales.convertToMultiline(infoEmpresa);
            String datosEmpresaReimpresion = infoEmpresa;
            String datosEmpresaCompleto = metodosGenerales.convertToMultiline(infoEmpresa + "\n" + infoResolucion);
            instancias.setDatosEmpresa(datosEmpresa, dato1, dato2, datosEmpresaCompleto, datosEmpresaReimpresion);
            instancias.setInformacionEmpresaCompleto(datosEmpresaCompleto);
            instancias.setResolucion(resolucion + "\n" + numeracion);
        }

//        if (null != instancias.getDiasAlertaResolucion()) {
//            long aux = metodos.restarFecha(metodosGenerales.fecha(), metodos.sumarFecha(metodos.fecha(informacion[1].toString()),
//                    Integer.parseInt(instancias.getDiasAlertaResolucion())));
//            instancias.setDiasRestantesResolucion(aux + "");
//        }
    }

    public void actualizarFisicoInventario(ndProducto nodo, String prod, String base) {
        double compras1, ventas1, nc1, ajusteEntrada1, ajusteSalida1, planSepare1, pedidos1, anulacion1, invInicial1, fisicoInventario,
                armado1, costeo1, ordenServicio1, congelada1, trasladoBod1, trasladoInternoEntrada1, trasladoInternoSalida1;

        compras1 = Double.parseDouble(nodo.getCompras().replace(",", "."));
        ventas1 = Double.parseDouble(nodo.getVentas().replace(",", "."));
        nc1 = Double.parseDouble(nodo.getNc().replace(",", "."));
        ajusteEntrada1 = Double.parseDouble(nodo.getAjusteEntrada().replace(",", "."));
        ajusteSalida1 = Double.parseDouble(nodo.getAjusteSalida().replace(",", "."));
        planSepare1 = Double.parseDouble(nodo.getPlanSepare().replace(",", "."));
        pedidos1 = Double.parseDouble(nodo.getPedidos().replace(",", "."));
        anulacion1 = Double.parseDouble(nodo.getAnulada().replace(",", "."));
        armado1 = Double.parseDouble(nodo.getArmado().replace(",", "."));
        costeo1 = Double.parseDouble(nodo.getCosteo().replace(",", "."));
        ordenServicio1 = Double.parseDouble(nodo.getOrdenServicio().replace(",", "."));
        invInicial1 = Double.parseDouble(nodo.getInventarioInicial().replace(",", "."));
        congelada1 = Double.parseDouble(nodo.getCongelada().replace(",", "."));

        trasladoBod1 = Double.parseDouble(nodo.getTrasladoBod().replace(",", "."));
        trasladoInternoEntrada1 = Double.parseDouble(nodo.getTrasladoInternoEntrada().replace(",", "."));
        trasladoInternoSalida1 = Double.parseDouble(nodo.getTrasladoInternoSalida().replace(",", "."));

        if (trasladoBod1 < 0) {
            trasladoBod1 = trasladoBod1 * -1;
            fisicoInventario = compras1 + invInicial1 + ajusteEntrada1 + anulacion1 + costeo1 + nc1 + trasladoInternoEntrada1 - ventas1
                    - ajusteSalida1 - planSepare1 - pedidos1 - armado1 - ordenServicio1 - congelada1 - trasladoInternoSalida1 - trasladoBod1;
        } else {
            fisicoInventario = trasladoBod1 + compras1 + invInicial1 + ajusteEntrada1 + anulacion1 + costeo1 + nc1 + trasladoInternoEntrada1 - ventas1
                    - ajusteSalida1 - planSepare1 - pedidos1 - armado1 - ordenServicio1 - congelada1 - trasladoInternoSalida1;
        }
        String fisicoInventario1 = String.valueOf(df.format(fisicoInventario)).replace(".", ",");
        instancias.getSql().modificarInventario("fisicoInventario", fisicoInventario1, prod, base);
    }

    public void cargarCotizaciones(String conse) throws Exception{
        cmbCargar.setSelectedItem("Cargar Cotización");
        txtCargar.setText(conse.replace("COTI-", ""));
        cargarMovimiento();
        txtObservaciones.setText(txtObservaciones.getText() + ", " + conse);
    }

    public void cargarPedidos(String conse) throws Exception{
        cmbCargar.setSelectedItem("Cargar Pedido");
        txtCargar.setText(conse.replace("PEDIDO-", ""));
        cargarMovimiento();
        txtObservaciones.setText(txtObservaciones.getText() + ", " + conse);
        btnGuardar.setVisible(false);
        btnGuardar1.setVisible(false);
    }

    public void cargarOrdenesServicios(String conse) throws Exception{
        cmbCargar.setSelectedItem("Cargar Orden");
        txtCargar.setText(conse.replace("OSERV-", ""));
        cargarMovimiento();
        txtCargar.setText(conse.replace("OSERV-", ""));
    }

    public void facturarOrdenesServiciosDetalladas(Object[][] productos, String numPedido, String cliente, String diasPlazo) {
        txtNit.setText(cliente);
        cargarCliente(cliente);

        int dias = 0;
        try {
            dias = Integer.parseInt(diasPlazo);
        } catch (Exception e) {
            dias = 0;
        }

        if (dias > 0) {
            txtDiasPlazo.setText(diasPlazo);
            calcularDiasPlazo(null);
        }

        for (int i = 0; i < productos.length; i++) {
            cargarProducto(productos[i][0].toString(), productos[i][1].toString(), 1, "", "", "", false, "", "", "", "", "", "");
            
            tblProductos.setValueAt(productos[i][1].toString(), tblProductos.getRowCount() - 1, 3);
            tblProductos.setValueAt(productos[i][2].toString(), tblProductos.getRowCount() - 1, 2);
            calcularTabla(tblProductos.getRowCount() - 1, false);
        }

        saltarPasosFactura = false;
        btnGuardar1ActionPerformed(null);
    }

    public void cargarPedidosPendientes(String conse) {

        this.tipo = "facturacion";
        Object[][] mat = instancias.getSql().getRegistrosPrePedidos(conse);

        int ser = tblProductos.getRowCount();
        int xyz = 0;

        for (Object[] reg : mat) {
            int plu = Integer.parseInt(reg[13].toString());
            if (plu == 1) {
                cargarProducto((String) reg[0], reg[3].toString(), plu, "", "", "", false, "", "", "", "", "", "");
            } else {
                cargarProducto((String) reg[0], new Double((String) reg[14]) + "", plu, "", "", "", false, "", "", "", "", "", "");
            }

            if (plu == 1) {
                tblProductos.setValueAt(reg[3].toString(), ser, 3);
            } else {
                tblProductos.setValueAt(new Double((String) reg[14]), ser, 3);
            }

            tblProductos.setValueAt(mat[xyz][1], ser, 1);
            tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(mat[xyz][2].toString())), ser, 2);
            tblProductos.setValueAt(mat[xyz][5].toString().replace(",", "."), ser, 5);
            tblProductos.setValueAt(mat[xyz][6].toString().replace(".", ","), ser, 6);
            tblProductos.setValueAt(mat[xyz][12], ser, 16);

            calcularTabla(ser, false);
            ser++;
            xyz++;
        }
    }

    public void limpiar() {
        instancias.setCancelarFactura(false);
        limpiar(true, "SI");
    }

    public String facturarCuentaCobro(String diasPlazo, String numCCobro, String bodega, BigDecimal mora, String lote, String fechaFactura) throws Exception{
        
        saltarPasosFactura = true;
        saltarPasosFactura1 = true;
        if (diasPlazo.equals("")) {
            diasPlazo = "0";
        }

        if (fechaFactura.length() == 9) {
            fechaFactura = "0" + fechaFactura;
        }

        cmbCargar.setSelectedItem("Cargar Plantilla");
        txtCargar.setText(numCCobro.replace("CCOBRO-", ""));

        txtBodega.setText(bodega);
        cargarMovimiento();

        if (mora.compareTo(BigDecimal.ZERO) > 0) {
            cargarProducto("01", "1", 1, "", "", "", false, "", "", "", "", "", "");
           
            tblProductos.setValueAt(big.setMoneda(mora), tblProductos.getRowCount() - 1, 2);
            calcularTabla(tblProductos.getRowCount() - 1, false);
        }

        loteCuentasCobro = lote;
        txtDiasPlazo.setText(diasPlazo);
        calcularDiasPlazo(null);

        fechaFacturaAutomatica = metodos.fechaConsulta(fechaFactura);

        String factura = validacionInicialFactura(showMsg);
        saltarPasosFactura = false;
        saltarPasosFactura1 = false;
        return factura;
    }

    public void facturarPedido(String nit, String diasPlazo, String tipoFactura, String numPedido, String bodega) throws Exception{
        saltarPasosFactura = true;

        if (diasPlazo.equals("")) {
            diasPlazo = "0";
        }

        if (tipoFactura.equals("Muchos")) {
            this.tipo = "facturacion";
            if (nit.equals("")) {
                txtNit.setText("1010");
                cargarCliente("1010");
            } else {
                txtNit.setText(nit);
                cargarCliente(nit);
                txtDiasPlazo.setText(diasPlazo);
                calcularDiasPlazo(null);
            }

            txtBodega.setText(bodega);
            facturandoPedidos = true;
            descontarFisicoInventario = "NO";
            btnGuardar1ActionPerformed(null);
        } else {
            this.tipo = "facturacion";
            cmbCargar.setSelectedItem("Cargar Pedido");
            txtCargar.setText(numPedido.replace("PEDIDO-", ""));

            txtBodega.setText(bodega);
            cargarMovimiento();

            txtDiasPlazo.setText(diasPlazo);
            calcularDiasPlazo(null);
            btnGuardar1ActionPerformed(null);
        }

        saltarPasosFactura = false;
    }

    public void facturarCotizacion(String conse, String diasPlazo) throws Exception{
        this.tipo = "facturacion";
        cmbCargar.setSelectedItem("Cargar Cotización");
        txtCargar.setText(conse.replace("COTI-", ""));
        cargarMovimiento();

        txtDiasPlazo.setText(diasPlazo);
        calcularDiasPlazo(null);

        txtObservaciones.setText(conse + " " + txtObservaciones.getText());
        saltarPasosFactura = true;
        btnGuardar1ActionPerformed(null);
    }

    public void facturarOrdenesServicios(String conse, String diasPlazo, String bodega) throws Exception{
        this.tipo = "facturacion";
        cmbCargar.setSelectedItem("Cargar Orden");
        txtCargar.setText(conse.replace("OSERV-", ""));

        txtBodega.setText(bodega);
        cargarMovimiento();

        txtDiasPlazo.setText(diasPlazo);
        calcularDiasPlazo(null);

        txtObservaciones.setText(conse + ". " + txtObservaciones.getText());
        saltarPasosFactura = false;
        btnGuardar1ActionPerformed(null);
    }

    private void cargarMovimiento() throws Exception {

        try {

            int opc = cmbCargar.getSelectedIndex();
            
            if(cmbCargar.getItemAt(opc).equals("Cargar FE")){
              opc = 6;
            }
                    
            if (opc == 0) {

                Object[][] mat = instancias.getSql().getRegistrosCotizas("COTI-" + txtCargar.getText());
                String coti = txtCargar.getText();

                if (mat.length > 0) {
                    if (mat[0][18].toString().equals("REALIZADO")) {
                        metodos.msgAdvertenciaAjustado(null, "La cotización ya ha sido facturada.");
                        txtCargar.setText("");
                        return;
                    }

                    limpiar(true, "");
                    nodoCotizacion = "COTI-" + coti;

                    if (mat[0][21] == null) {
                        txtBodega.setText("123-22");
                    } else {
                        txtBodega.setText(mat[0][21].toString());
                    }

                    int i = 0;
                    for (Object[] reg : mat) {

                        int plu = Integer.parseInt(reg[10].toString());
                        if (plu == 1) {
                            cargarProducto((String) reg[0], big.setMonedaExacta(big.getBigDecimal(reg[3])) + "", plu, "", "", "", false, "", "", "", "", "", "");
                        } else {
                            cargarProducto((String) reg[0], big.setMonedaExacta(big.getBigDecimal(reg[11])) + "", plu, "", "", "", false, "", "", "", "", "", "");
                        }

    //                    if (plu == 1) {
    //                        tblProductos.setValueAt(new Double((String) reg[3]), i, 3);
    //                    } else {
    //                        tblProductos.setValueAt(new Double((String) reg[11]), i, 3);
    //                    }
                       
                        tblProductos.setValueAt(reg[17].toString(), i, 31);
                        tblProductos.setValueAt(reg[1].toString(), i, 1);
                        tblProductos.setValueAt(big.setMonedaExacta(big.getBigDecimal(reg[2].toString())), i, 2);
                        tblProductos.setValueAt(big.getBigDecimal(reg[5].toString()), i, 5);

                        tblProductos.setColumnSelectionInterval(0, 0);
                        tblProductos.setRowSelectionInterval(i, i);
                        KeyEvent x = new KeyEvent(this, WIDTH, WIDTH, WIDTH, KeyEvent.VK_ENTER);
                        tblProductosKeyReleased(x);
                        i++;
                    }

                    int j = tblProductos.getRowCount();
                    txtNit.setText(mat[0][12].toString());

                    if (mat[0][19] != null) {
                        cmbVendedor.setSelectedItem(mat[0][19].toString());
                    }

                    txtSubTotal.setText(big.setMonedaExacta(big.getBigDecimal(mat[0][13].toString())));
                    txtTotalDescuentos.setText(big.setMonedaExacta(big.getBigDecimal(mat[0][14].toString())));
                    txtTotalIva.setText(big.setMonedaExacta(big.getBigDecimal(mat[0][15].toString())));
                    txtTotal.setText("Total: " + big.setMoneda(big.getBigDecimal(mat[0][16].toString())));
                    cargarCliente(mat[0][12].toString());

                    if (tipo.equals("cotizacion")) {
                        btnGuardar.setEnabled(false);
                        btnGuardar1.setEnabled(false);

                        btnReImprimir.setVisible(true);
                        btnReImprimir.setEnabled(true);
                        txtCargar.setText(coti);
                    }

                    if (mat[0][20] != null) {
                        txtObservaciones.setText(mat[0][20].toString());
                    }
                }

            } else if (opc == 1) {

                String orden = "OSERV-" + txtCargar.getText();

                Object[][] mat = instancias.getSql().getRegistrosOrdenes(orden);

                if (mat.length > 0) {

                    limpiar(false, "");

                    int ser = 0;
                    productosMovimientos = new Object[mat.length];

                    for (Object[] reg : mat) {
                        int plu = Integer.parseInt(reg[13].toString());
                        if (plu == 1) {
                            cargarProducto((String) reg[0], reg[3].toString().replace(".", ",") + "", plu, "", "", "", false, "", "", "", "", "", "");
                        } else {
                            cargarProducto((String) reg[0], reg[14].toString().replace(".", ",") + "", plu, "", "", "", false, "", "", "", "", "", "");
                        }

    //                    if (plu == 1) {
    //                        tblProductos.setValueAt(new Double((String) reg[3]), ser, 3);
    //                    } else {
    //                        tblProductos.setValueAt(new Double((String) reg[14]), ser, 3);
    //                    }
                        tblProductos.setValueAt(mat[ser][1], ser, 1);
                        tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(mat[ser][2].toString())), ser, 2);
                        tblProductos.setValueAt(mat[ser][5].toString().replace(",", "."), ser, 5);
                        tblProductos.setValueAt(mat[ser][6].toString().replace(".", ","), ser, 6);
                        tblProductos.setValueAt(mat[ser][12], ser, 16);

                        cantProductosOrden++;
                        productosMovimientos[ser] = mat[ser][0].toString();
                        calcularTabla(ser, false);
                        ser++;
                    }

                    nodoOrdenServicio = orden;

                    if (mat[0][11] != null) {
                        cmbVendedor.setSelectedItem(mat[0][11].toString());
                    }

                    if (mat[0][10] != null) {
                        txtNit.setText(mat[0][10].toString());
                    }

                    txtSubTotal.setText(big.setMoneda(big.getBigDecimal(mat[0][15].toString())));
                    txtTotalDescuentos.setText(big.setMoneda(big.getBigDecimal(mat[0][16].toString())));
                    txtTotalIva.setText(big.setMoneda(big.getBigDecimal(mat[0][17].toString())));
                    txtTotal.setText("Total: " + big.setMoneda(big.getBigDecimal(mat[0][18].toString())));

                    cargarCliente(mat[0][10].toString());

                    ndOServicio nodoOrden = instancias.getSql().getDatosOServicio(orden);

                    cargarArticulos(nodoOrden.getTipo());
                    txtPlaca.setText(nodoOrden.getPlaca());
                    txtTipoVehiculo.setText(nodoOrden.getTipo());
                    txtModelo.setText(nodoOrden.getModelo());
                    txtNumChasis.setText(nodoOrden.getNumeroChasis());

                    String fecha = "";
                    if (nodoOrden.getFechaCompra() != null) {
                        if (nodoOrden.getFechaCompra().split("/")[0].length() == 1) {
                            fecha = "0" + nodoOrden.getFechaCompra();
                        } else {
                            fecha = nodoOrden.getFechaCompra();
                        }
                    }

                    txtMarca.setText(nodoOrden.getMarca());
                    txtKm.setText(nodoOrden.getKm());
                    txtMotor.setText(nodoOrden.getNumeroMotor());
                    txtColor.setText(nodoOrden.getColor());
                    txtProblema.setText(nodoOrden.getProblema());

                    tblArticulos.setEnabled(false);
                    btnActualizar.setEnabled(true);
                    btnReImprimir.setEnabled(true);
                    txtPlaca.setEnabled(false);
                    txtModelo.setEnabled(false);
                    txtTipoVehiculo.setEnabled(false);
                    txtNumChasis.setEnabled(false);
                    txtMarca.setEnabled(false);
                    txtKm.setEnabled(false);
                    txtMotor.setEnabled(false);
                    txtColor.setEnabled(false);

                    if (!tipo.equals("facturacion")) {
                        btnGuardar.setVisible(false);
                        btnGuardar1.setVisible(false);
                    }

                    Object[][] estadoVehiculo = instancias.getSql().getEstadoVehiculo(orden);
                    for (int i = 0; i < estadoVehiculo.length; i++) {
                        for (int j = 0; j < tblArticulos.getRowCount(); j++) {
                            if (estadoVehiculo[i][0].equals(tblArticulos.getValueAt(j, 0))) {
                                tblArticulos.setValueAt(true, j, 2);
                                tblArticulos.setValueAt(estadoVehiculo[i][2], j, 3);
                                tblArticulos.setValueAt(estadoVehiculo[i][3], j, 4);
                                tblArticulos.setValueAt(estadoVehiculo[i][4], j, 5);
                            }
                        }
                    }

                    txtNombre.requestFocus();

                    if (mat[0][20].toString().equals("REALIZADO")) {
                        metodos.msgAdvertencia(null, "Esta orden ya ha sido facturada y no se puede modificar.");
                        activarCampos(false);
                        btnActualizar.setEnabled(false);
                        btnReImprimir.setEnabled(true);
                    } else {
                        activarCampos(true);
                        btnActualizar.setEnabled(true);
                        btnReImprimir.setEnabled(true);
                    }

                    if (tipo.equals("facturacion")) {
                        nodoOrdenServicio = orden;
                    } else {
                        lbNoFactura.setText(orden.substring(6, orden.length()));
                    }

                    if (mat[0][19] != null) {
                        txtObservaciones.setText(mat[0][19].toString());
                    }

                    if (mat[0][21] != null) {
                        txtPlaca1.setText(mat[0][21].toString());
                    }

                    txtCargar.setText(orden.replace("OSERV-", ""));

                } else {
                    metodos.msgError(null, "La orden no existe!");
                    return;
                }

            } else if (opc == 2) {

                String factura = "FACT-" + txtCargar.getText();
                Object[][] mat = null;
                limpiar(false, "");

                mat = instancias.getSql().getRegistrosPrefacturas(factura);

                if (mat.length > 0) {
                    int a = 0;
                    for (Object[] reg : mat) {
                        int plu = Integer.parseInt(reg[13].toString());

                        String imei = "", idProd = "";
                        if (reg[22] != null) {
                            imei = reg[22].toString();
                        }
                        if (reg[23] != null) {
                            idProd = reg[23].toString();
                        }
                        if (plu == 1) {
                            cargarProducto((String) reg[0], new Double((String) reg[3]) + "", plu, imei, "", idProd, false, "", "", "", "", "", "");
                        } else {
                            cargarProducto((String) reg[0], new Double((String) reg[3]) + "", plu, imei, "", idProd, false, "", "", "", "", "", "");
                        }

    //                    if (plu == 1) {
    //                        tblProductos.setValueAt(new Double((String) reg[3]), a, 3);
    //                    } else {
    //                        tblProductos.setValueAt(new Double((String) reg[14]), a, 3);
    //                    }
                        tblProductos.setValueAt(mat[a][21], a, 31);
                        tblProductos.setValueAt(mat[a][1], a, 1);
                        tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(mat[a][2].toString())), a, 2);
                        tblProductos.setValueAt(mat[a][5].toString().replace(",", "."), a, 5);
                        tblProductos.setValueAt(mat[a][6].toString().replace(".", ","), a, 6);
                        tblProductos.setValueAt(mat[a][12], a, 16);
                        calcularTabla(a, false);
                        a++;
                    }

                    cmbVendedor.setSelectedItem(mat[0][15].toString());
                    txtNit.setText(mat[0][16].toString());
                    txtSubTotal.setText(big.setMoneda(big.getBigDecimal(mat[0][17].toString())));
                    txtTotalDescuentos.setText(big.setMoneda(big.getBigDecimal(mat[0][18].toString())));
                    txtTotalIva.setText(big.setMoneda(big.getBigDecimal(mat[0][19].toString())));
                    txtTotal.setText("Total: " + big.setMoneda(big.getBigDecimal(mat[0][20].toString())));
                    cargarCliente(mat[0][16].toString());

                    try {
                        ndCxc nodoCxc = instancias.getSql().getDatosCxc(factura);
                        txtDiasPlazo.setText(Integer.toString(nodoCxc.getPlazo()));
                    } catch (Exception e) {
                        Logs.error(e);
                        txtDiasPlazo.setText("0");
                    }
                    calcularDiasPlazo(null);
                } else {
                    metodos.msgError(null, "La factura no existe!");
                }
            } else if (opc == 4) {

                if (cmbCargar.getItemAt(4).equals("Cargar Plantilla")) {
                    ndCongelada nodo = instancias.getSql().getDatosCuentaCobro("CCOBRO-" + txtCargar.getText());

                    if (nodo.getIdFactura() != null) {
                        String x = txtCargar.getText();
                        this.cargarPrefactura(nodo.getIdFactura().replace("CCOBRO-", ""), "CCOBRO-");
                        cuentaCobro = nodo;
                        txtCargar.setText(x);
                        lbNoFactura.setText(x); 
                        if (tipo.equals("cuentaCobro")) {
                            btnGuardar.setVisible(false);
                            btnGuardar1.setVisible(false);
                            btnActualizar.setVisible(true);
                            btnActualizar.setEnabled(true);
                        }
                    } else {
                        metodos.msgAdvertencia(null, "Plantilla invalida");
                    }

                } else {
                    ndPlanSepare nodo = instancias.getSql().getDatosPlanSepare("SEPARE-" + txtCargar.getText());

                    if (nodo.getIdFactura() != null) {
                        String x = txtCargar.getText();
                        this.cargarPrefactura(nodo.getIdFactura().replace("SEPARE-", ""), "SEPARE-");
                        ndSepare = nodo;
                        txtCargar.setText(x);
                        lbNoFactura.setText(x);

                        btnReImprimir.setEnabled(true);
                        btnGuardar.setEnabled(false);
                        btnGuardar1.setEnabled(false);
                    } else {
                        metodos.msgError(null, "Número invalido");
                    }
                }
            } else if (opc == 5) {
                ndCongelada nodo = instancias.getSql().getDatosCuentaCobro("CCOBRO-" + txtCargar.getText());

                if (nodo.getIdFactura() != null) {
                    String x = txtCargar.getText();
                    this.cargarPrefactura(nodo.getIdFactura().replace("CCOBRO-", ""), "CCOBRO-");
                    cuentaCobro = nodo;
                    txtCargar.setText(x);
                    lbNoFactura.setText(x);
                    btnGuardar.setVisible(false);
                    btnGuardar1.setVisible(false);
                    btnActualizar.setVisible(true);
                    btnActualizar.setEnabled(true);
                } else {
                    metodos.msgError(null, "Plantilla invalida");
                }

            } else if (opc == 3) {
                String numPedido = txtCargar.getText();

                ndPedido nodo = instancias.getSql().getDatosPedido("PEDIDO-" + numPedido);

                if (nodo.getIdFactura() != null) {

                    this.cargarPrefactura(nodo.getIdFactura().replace("PEDIDO-", ""), "PEDIDO-");

                    if (nodo.getEstadoGeneral().equals("REALIZADO")) {

                        if (tipo.equals("pedido")) {
                            metodos.msgAdvertencia(null, "Este pedido ya ha sido facturada y no se puede modificar.");
                        } else {
                            metodos.msgAdvertencia(null, "Este pedido ya ha sido facturada.");
                            limpiar(true, "");
                            txtCargar.requestFocus();
                            return;
                        }
                        activarCampos(false);
                        activarGuardar(false);
                        btnReImprimir.setEnabled(true);
                    } else if (nodo.getEstadoGeneral().equals("ANULADA")) {
                        metodos.msgAdvertencia(null, "El pedido esta anulado.");
                        limpiar(true, "");
                        txtCargar.requestFocus();
                        return;
                    } else {
                        if (instancias.getConfiguraciones().isEmbarcaciones()) {
                            tblProductos.setEnabled(false);
                            tblInventario.setEnabled(false);
                            activarCampos(false);

                            btnReImprimir.setEnabled(true);

                            if (nodo.getEstadoGeneral().equals("REVISADO")) {
                                activarGuardar(false);
                            } else {
                                activarGuardar(true);
                            }
                        } else {
                            activarCampos(true);
                            activarGuardar(true);
                            btnReImprimir.setEnabled(true);
                        }
                    }

                    ndPedido = nodo;
                    txtObservaciones.setText(nodo.getObservacion());               
                    lbNoFactura.setText(numPedido);

                } else {
                    limpiar(false, "");

                    if (txtCargar.getText().equals("")) {
                        if (txtNombre.getText().equals("")) {
                            metodos.msgError(null, "Seleccioné un tercero para buscar el pedido");
                            return;
                        } else {
                            infBuscadorCliente buscador = new infBuscadorCliente();
                            buscador.cargarRegistros(txtNit.getText(), "pedido", instancias);
                            buscador.setVisible(true);
                        }
                    } else {
                        metodos.msgError(null, "No hay una orden registrada con este número");
                    }
                }
            }else if(opc == 6){
//                Object[] datos = instancias.getSql().getResolucionTerminales("FE");
//                String factura = "FACT-"+datos[4].toString()+ txtCargar.getText();
                String factura = "FACT-"+ txtCargar.getText();
                Object[][] mat = null;
                limpiar(false, "");
                
                mat = instancias.getSql().getRegistrosPrefacturas(factura);
                
                if(mat.length == 0){
                   metodos.msgError(null, "Esta Documento no se encuentra en el Sistema!");
                   return;
                }
                
                   
                ArrayList<Map<String, String>> respuesta = instancias.getSql().getLogsFacturaApi(mat[0][24].toString(),"1");
                if(respuesta.size()>0){
                   metodos.msgError(null, "Esta Documento ya se encuentra aprobado por la Dian, No se permiten Modificaciones!");
                   return;                    
                }
                
                Object[] datosFacElect = instancias.getSql().getResolucionTerminales("FE");
               
                if (mat.length > 0) {
                    
                    ArrayList<Map<String, String>> facturaRenvio = null;
                    facturaRenvio = instancias.getSql().consultarFacturasRenvio(mat[0][24].toString());
                    if(facturaRenvio.size()>0){
                        try{
                           setNumeroIdFacturaRenvio(facturaRenvio.get(0).get("idTxExterno"));
                        }catch(Exception ex){
                           setNumeroIdFacturaRenvio("0");
                        }
                    }
                    setNumeroFacturaRenvio(mat[0][24].toString());
                    try{
                        if(!mat[0][30].toString().equals("") && mat[0][30] != null) {
                           txtTurno.setText(mat[0][30].toString());
                        }
                    }catch(Exception exp){
                    }
                    
                    if(!mat[0][22].toString().equals("0") && !mat[0][22].toString().equals("")){
                      chkReteIva.setSelected(true);
                    }
                    
                    checkedComprobante();
                    lbNoFactura.setText(datosFacElect[4].toString() + mat[0][24].toString());
                    
                    
                    if(!mat[0][26].toString().equals("") && !mat[0][27].toString().equals("")){
                        jLMoneda.setText(mat[0][26].toString());
                        setFechaMoneda(mat[0][26].toString());
                        setTrmMoneda(mat[0][27].toString());
                    }
                    
                    int a = 0;
                    for (Object[] reg : mat) {
                        int plu = Integer.parseInt(reg[13].toString());

                        String imei = "", idProd = "";
                        if (reg[22] != null) {
                            imei = reg[22].toString();
                        }
                        if (reg[23] != null) {
                            idProd = reg[23].toString();
                        }
                       
                        if (plu == 1) {
                            cargarProducto((String) reg[0], new Double((String) reg[3]) + "", plu, imei, "", idProd, false, "", "", "", "", "", reg[29].toString());
                        } else {
                            cargarProducto((String) reg[0], new Double((String) reg[3]) + "", plu, imei, "", idProd, false, "", "", "", "", "", reg[29].toString());
                        }

                        tblProductos.setValueAt(mat[a][21], a, 31);
                        tblProductos.setValueAt(mat[a][1], a, 1);
                        tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(mat[a][2].toString())), a, 2);
                        tblProductos.setValueAt(mat[a][5].toString().replace(",", "."), a, 5);
                        tblProductos.setValueAt(mat[a][6].toString().replace(".", ","), a, 6);
                        tblProductos.setValueAt(mat[a][12], a, 16);
                        calcularTabla(a, false);
                        a++;
                    }
                    
                    if (!mat[0][28].toString().equals("0.00")) {
                        for (int j = 0; j < cmbRtf.getItemCount(); j++) {
                            if (!cmbRtf.getItemAt(j).toString().equals("RtF")) {
                                if (Double.parseDouble(mat[0][28].toString().replace(",", ".")) == Double.parseDouble(cmbRtf.getItemAt(j).toString().replace(",", "."))) {
                                    
                                    cmbRtf.setSelectedIndex(j);
                                }
                            }
                        }
                    }
                    
                    cmbVendedor.setSelectedItem(mat[0][15].toString());
                    txtNit.setText(mat[0][16].toString());
                    txtSubTotal.setText(big.setMoneda(big.getBigDecimal(mat[0][17].toString())));
                    txtTotalDescuentos.setText(big.setMoneda(big.getBigDecimal(mat[0][18].toString())));
                    txtTotalIva.setText(big.setMoneda(big.getBigDecimal(mat[0][19].toString())));
                    txtTotal.setText("Total: " + big.setMoneda(big.getBigDecimal(mat[0][20].toString())));
                    cargarCliente(mat[0][16].toString());
                    txtObservaciones.setText(mat[0][25].toString()); 
                    try {
                          ndCxc nodoCxc = instancias.getSql().getDatosCxcFactura2(factura);
//                        ndCxc nodoCxc = instancias.getSql().getDatosCxc(factura);
                        txtDiasPlazo.setText(Integer.toString(nodoCxc.getPlazo()));
                    } catch (Exception e) {
                        Logs.error(e);
                        txtDiasPlazo.setText("0");
                    }
                    calcularDiasPlazo(null);
                    bloquearTodo(false);
                    
                } else {
                    metodos.msgError(null, "La Factura Electronica no existe!");
                }
            }
           
            tblProductos.removeEditor();
            tblInventario.removeEditor();
            } catch (Exception e) {
                 throw e;
            }
    }
    
    /*
      Bloquear para edicion de factura
    */
    private void bloquearTodo(boolean bloqueo){
        List<JPanel> listaPanels = new ArrayList<>();
        listaPanels.add(jPanel8);

        for (JPanel listaPanel : listaPanels) {
            for (Component componente : listaPanel.getComponents()) {
                componente.setEnabled(bloqueo);
            }
        }
        tblInventario.setEnabled(bloqueo);
        txtCodProducto.setEnabled(bloqueo);
        btnBusProd.setEnabled(bloqueo);
        tapControl.setEnabled(bloqueo);
    }

    private void activarCampos(boolean x) {
        txtNit.setEditable(x);
        txtCodProducto.setEditable(x);
        btnBuscTerceros.setEnabled(x);
        btnBusProd.setEnabled(x);
    }
    
    private void activarGuardar(boolean x) {
         btnGuardar.setEnabled(x);
         btnGuardar1.setEnabled(x);
         btnActualizar.setEnabled(x);
    }

    public void cargarOServicio(String num, String tipo) {
        String orden = tipo + "" + num;
        ndOServicio1 nodo = instancias.getSql().getDatosOServicio1(orden);

        Object[][] estadoVehiculo = instancias.getSql().getEstadoVehiculo(orden);

        if (nodo.getIdFactura() != null) {

            this.cargarPrefactura(num, tipo);
            txtNombre.requestFocus();
            if (tipo.equals("OSERV-")) {
                ndOServicio nodoOrden = instancias.getSql().getDatosOServicio(orden);
                txtPlaca.setText(nodoOrden.getPlaca());
                txtTipoVehiculo.setText(nodoOrden.getTipo());
                txtModelo.setText(nodoOrden.getModelo());
                txtNumChasis.setText(nodoOrden.getNumeroChasis());
                txtMarca.setText(nodoOrden.getMarca());
                txtKm.setText(nodoOrden.getKm());
                txtMotor.setText(nodoOrden.getNumeroMotor());
                txtColor.setText(nodoOrden.getColor());
                txtProblema.setText(nodoOrden.getProblema());
                cargarArticulos(nodoOrden.getTipo());
            }

            for (int i = 0; i < estadoVehiculo.length; i++) {
                for (int j = 0; j < tblArticulos.getRowCount(); j++) {
                    if (estadoVehiculo[i][0].equals(tblArticulos.getValueAt(j, 0))) {
                        tblArticulos.setValueAt(true, j, 2);
                        tblArticulos.setValueAt(estadoVehiculo[i][2], j, 3);
                        tblArticulos.setValueAt(estadoVehiculo[i][3], j, 4);
                        tblArticulos.setValueAt(estadoVehiculo[i][4], j, 5);
                    }
                }
            }

            tblArticulos.setEnabled(false);
            txtObservaciones.setText(nodo.getObservacion());

            if (tipo.equals("OSERV-")) {
                btnActualizar.setEnabled(true);
                btnReImprimir.setEnabled(true);

                txtPlaca.setEnabled(false);
                txtModelo.setEnabled(false);
                txtTipoVehiculo.setEnabled(false);
                txtNumChasis.setEnabled(false);
                txtMarca.setEnabled(false);
                txtKm.setEnabled(false);
                txtMotor.setEnabled(false);
                txtColor.setEnabled(false);

                if (jPanel6.isVisible()) {
                    btnGuardar.setEnabled(false);
                    btnGuardar1.setEnabled(false);
                } else {
                    btnGuardar.setEnabled(true);
                    btnGuardar1.setEnabled(true);
                }
            }

//            for (int i = 0; i < tblProductos.getRowCount(); i++) {
//                calcularTabla(i);
//            }
        } else {
            metodos.msgError(null, "orden invalida");
            return;
        }
    }

    public void calcularCuotasCredito() {

        DefaultTableModel modeloCredito;
        BigDecimal valorCredito = big.getMoneda(txtValorVenta.getText()).subtract(big.getMoneda(txtCuotaInicial.getText()));
        if (valorCredito.compareTo(big.getBigDecimal("0")) == -1) {
            valorCredito = big.getBigDecimal("0");
        }
        txtValorCredito.setText(big.setMoneda(valorCredito));

//        txtTotalCredito.setText(big.setMonedaExacta(valorCredito));
//        txtTotal.setText("Total: " + big.setMonedaExacta(big.getMoneda(txtTotalCredito.getText())));
        //Para hacer la validación de que no se pase la cartera permitda sino sacar mensaje.
        BigDecimal tot = BigDecimal.ZERO;
        try {
            tot = big.getMoneda(txtTotal.getText().replace("Total: ", ""));
        } catch (Exception e) {
        }

//        this.setPlazo(txtDiasPlazo.getText(), tot);
        if (txtNombre.getText().equals("") || txtNit.getText().equals("1010")) {
//            metodos.msgError(null, "Debe ingresar un cliente");
            txtNombre.setText("");
            txtNit.setText("");
            btnCambioMoneda.setVisible(false);
            jLMoneda.setVisible(false);
            return;
        }
        int j = tblCuotas.getRowCount();
        int tipoPlazo = 0;

        if (cmbTipoPlazo.getSelectedItem().equals("Días")) {
            tipoPlazo = 1;
        } else if (cmbTipoPlazo.getSelectedItem().equals("Semanal")) {
            tipoPlazo = 7;
        } else if (cmbTipoPlazo.getSelectedItem().equals("Quincenal")) {
            tipoPlazo = 14;
        } else if (cmbTipoPlazo.getSelectedItem().equals("Mensual")) {
            tipoPlazo = 1;
        } else {

            modeloCredito = (DefaultTableModel) tblCuotas.getModel();

            for (int i = 0; i < j; i++) {
                modeloCredito.removeRow(0);
            }
            txtDiasPlazo.setText("0");
            return;
        }

        modeloCredito = (DefaultTableModel) tblCuotas.getModel();

        for (int i = 0; i < j; i++) {
            modeloCredito.removeRow(0);
        }

        if (txtCuotaInicial.getText().equals("")) {
            txtCuotaInicial.setText(this.simbolo + " 0");
        }

        if (txtCuotas.getText().equals("0") || txtCuotas.getText().equals("")) {
            return;
        }

        if (txtInteres.getText().equals("")) {
            txtInteres.setText("0");
        }

        BigDecimal valor = big.getMoneda("0"), cuotas, intereses, total, cuotaCapital, cuotaInteres,
                cuotaTotal, porcentaje, saldo, tem, factor;
        String fecha = metodos.fecha(metodos.desdeDate(dtFechaDesenvolso.getCurrent()));

        valor = big.getMoneda(txtValorCredito.getText());

        porcentaje = big.getMoneda(txtInteres.getText());
        cuotas = big.getMoneda(txtCuotas.getText());
        if (porcentaje.compareTo(BigDecimal.ZERO) == 0) {
//            tem = big.getBigDecimal("0");
//            factor = big.getBigDecimal("0");
            total = valor;
            intereses = big.getBigDecimal("0");
            cuotaTotal = valor.divide(cuotas, 2, RoundingMode.DOWN);
        } else {
            tem = (BigDecimal.ONE.add((porcentaje.divide(new BigDecimal(100), 10, RoundingMode.CEILING)))).subtract(new BigDecimal(1));
            factor = (tem.multiply((BigDecimal.ONE.add(tem)).pow(cuotas.intValueExact()))).divide(((BigDecimal.ONE.add(tem)).pow(cuotas.intValueExact())).subtract(BigDecimal.ONE), 10, RoundingMode.CEILING);
            total = valor.multiply(factor).multiply(cuotas);
            intereses = total.subtract(valor);
            cuotaTotal = valor.multiply(factor);
        }
        saldo = valor;
        total = BigDecimal.ZERO;
        j = cuotas.intValueExact();

        txtTotalIntereses.setText(big.setMonedaExacta(intereses));
        String ultimaFecha = "";
        for (int i = 1; i <= j; i++) {
            cuotaInteres = saldo.multiply(porcentaje.divide(new BigDecimal(100)));
            cuotaCapital = cuotaTotal.subtract(cuotaInteres);
            if (cmbTipoPlazo.getSelectedItem().equals("Mensual")) {
                if (i == j) {
                    modeloCredito.addRow(new Object[]{i, metodos.sumarMeses(fecha, tipoPlazo), big.setMoneda(cuotaCapital), big.setMoneda(cuotaInteres), big.setMoneda(cuotaTotal),
                        this.simbolo + " 0", this.simbolo + " 0"});
                } else {
                    if (i == 1) {
                        modeloCredito.addRow(new Object[]{i, fecha, big.setMoneda(cuotaCapital), big.setMoneda(cuotaInteres), big.setMoneda(cuotaTotal), big.setMoneda(saldo.subtract(cuotaTotal)), big.setMoneda(total.subtract(cuotaTotal))});
                    } else {
                        modeloCredito.addRow(new Object[]{i, metodos.sumarMeses(fecha, tipoPlazo), big.setMoneda(cuotaCapital), big.setMoneda(cuotaInteres), big.setMoneda(cuotaTotal), big.setMoneda(saldo.subtract(cuotaTotal)), big.setMoneda(big.getBigDecimal(big.getMoneda(modeloCredito.getValueAt(i - 2, 6).toString())).subtract(cuotaTotal))});
                    }
                }
                total = total.add(big.getMoneda(big.setMoneda(cuotaTotal)));
                if (i > 1) {
                    fecha = metodos.sumarMeses(fecha, tipoPlazo);
                }
            } else {
                if (i == j) {
                    modeloCredito.addRow(new Object[]{i, metodos.sumarFecha(fecha, tipoPlazo), big.setMoneda(cuotaCapital), big.setMoneda(cuotaInteres), big.setMoneda(cuotaTotal),
                        this.simbolo + " 0", this.simbolo + " 0"});
                } else {
                    if (i == 1) {
                        modeloCredito.addRow(new Object[]{i, fecha, big.setMoneda(cuotaCapital), big.setMoneda(cuotaInteres), big.setMoneda(cuotaTotal), big.setMoneda(saldo.subtract(cuotaTotal)), big.setMoneda(total.subtract(cuotaTotal))});
                    } else {
                        modeloCredito.addRow(new Object[]{i, metodos.sumarFecha(fecha, tipoPlazo), big.setMoneda(cuotaCapital), big.setMoneda(cuotaInteres), big.setMoneda(cuotaTotal), big.setMoneda(saldo.subtract(cuotaTotal)), big.setMoneda(big.getBigDecimal(big.getMoneda(modeloCredito.getValueAt(i - 2, 6).toString())).subtract(cuotaTotal))});
                    }
                }
                total = total.add(big.getMoneda(big.setMoneda(cuotaTotal)));
                if (i > 1) {
                    fecha = metodos.sumarFecha(fecha, tipoPlazo);
                }
            }

            ultimaFecha = fecha;
            saldo = saldo.subtract(cuotaCapital);
        }

        long dias = metodos.restarFecha(metodosGenerales.fecha(), ultimaFecha);
        txtDiasPlazo.setText(dias + "");
        txtVencimiento.setText(metodos.sumarFecha(txtFechaFactura.getText(), Integer.parseInt(txtDiasPlazo.getText())));

        txtTotalCredito.setText(big.setMonedaExacta(total));
        txtTotal.setText("Total: " + big.setMoneda(big.getMoneda(txtTotalCredito.getText())));
        //Para hacer la validación de que no se pase la cartera permitda sino sacar mensaje.
//        this.setPlazo(txtDiasPlazo.getText(), big.getMoneda(txtTotal.getText().replace("Total: ", "")));
    }

    public void validarClienteParaCredito() {
        if (txtNombre.getText().equals("") || txtNit.getText().equals("1010")) {
            metodos.msgError(null, "Debe ingresar un cliente1");
            return;
        }
    }

    public Object[] getOcultarIvaPanama() {
        return new Object[]{tblProductos, chkReteIva, txtRiva, cmbRtf, txtRtf, txtImpuesto, txtTotalImpoconsumo,
            lbImpoconsumo, lbImpuestoBolsa};
    }

    public Object[] getOcultarIva() {
        return new Object[]{tblProductos, chkReteIva, txtRiva, txtIva, txtTotalIva, cmbRtf, txtRtf, txtImpuesto, txtTotalImpoconsumo,
            lbImpoconsumo, lbImpuestoBolsa};
    }

    private String tipo() {
        String tip = "";

        switch (tipo) {
            case "facturacion":
                tip = "FACT";
                break;
            case "cotizacion":
                tip = "COTI";
                break;
            case "orden":
                tip = "OSERV";
                break;
            case "pedido":
                tip = "PEDIDO";
                break;
            case "separe":
                tip = "SEPARE";
                break;
            case "mesa":
                tip = "CONGELADA";
                break;
            case "cuentaCobro":
                tip = "CCOBRO";
                break;
        }
        return tip;
    }

    public void eliminarFila() {
        int fila = tblProductos.getSelectedRow();
        if (tblProductos.getValueAt(fila, 16).equals("REALIZADO")) {
            metodos.msgAdvertencia(null, "No puede Borrar este producto");
            return;
        }

        DefaultTableModel modelo = (DefaultTableModel) tblProductos.getModel();
        
        String factura="CONGELADA-"+lbNoFactura.getText();
        String congelada = instancias.getTitulo();
        String terminal = instancias.getTerminal();
        String cliente = txtIdSistema.getText();
	String bodega=txtBodega.getText();
        String notaAnulacion = (String) tblProductos.getValueAt(fila, 30);
        String producto = (String) tblProductos.getValueAt(fila, 32);
        String cotizacion=lbNoFactura.getText();

        if(lbNoFactura.getText().trim()!="" && notaAnulacion != "Nuevo" ){
           if (metodos.msgPregunta(null, "¿Esta seguro de eliminar este producto del pedido? <br></br>"
               + "("+tblProductos.getValueAt(fila, 1)+" Cantidad: "+tblProductos.getValueAt(fila, 3)+" Total: "+tblProductos.getValueAt(fila, 9)+" )") != 0) {
            return;
           }
        String idComanda = tblProductos.getValueAt(fila, 38).toString();
        Object[] existenciaCongelada = new Object[4];
        existenciaCongelada = instancias.getSql().consultarExistenciaCongeladaId(idComanda);
        boolean eliminarCongelada=instancias.getSql().eliminarCongeladaPorProducto(factura,cliente,producto,bodega,(String)tblProductos.getValueAt(fila, 38),terminal,cotizacion);
        boolean eliminarComanda=instancias.getSql().eliminarComandaPorProducto(factura,producto,notaAnulacion);
        boolean eliminarPreparacion=instancias.getSql().deletePreparacionAll(factura,idComanda);
          //MODIFICAR PRODUCTO EN fisicoInventario   
         if(!eliminarCongelada && !eliminarComanda){
               Log.error("ERROR AL REMOVER DATOS");
              return;
            } else {
                String baseUtilizada = obtenerBase();
                ndProducto product = instancias.getSql().getDatosProducto(tblProductos.getValueAt(fila, 32).toString(), baseUtilizada);
                double cantidadCongelada = Double.parseDouble(product.getCongelada().replace(",", "."));
                double cantidadFisicoInventario = Double.parseDouble(product.getFisicoInventario().replace(",", "."));
                double cantidadCongeladaBD = Double.parseDouble(existenciaCongelada[3].toString());
                                
                instancias.getSql().modificarInventario("congelada", String.valueOf((cantidadCongelada-cantidadCongeladaBD)).replace(".", ","), tblProductos.getValueAt(fila, 32).toString(), baseUtilizada);
                instancias.getSql().modificarInventario("fisicoInventario", String.valueOf(cantidadFisicoInventario+cantidadCongeladaBD).replace(".", ",")+"", tblProductos.getValueAt(fila, 32).toString(), baseUtilizada);

            }
        }
        modelo.removeRow(fila);

        modeloInventario = (DefaultTableModel) tblInventario.getModel();
        modeloInventario.removeRow(fila);

        tblInventario.removeEditor();
        tblProductos.removeEditor();
        cargarTotales();
    }
  
    public String getConsecutivo(int fila) {
        String prefijo = "";
        int consecutivo = 0;
        if (null == tblComprobantes.getValueAt(fila, 8)) {
            prefijo = "";
        } else {
            prefijo = tblComprobantes.getValueAt(fila, 8).toString();
        }
        
        String tipoFactura = "";
        if (null == tblComprobantes.getValueAt(fila, 7)) {
            tipoFactura = "";
        } else {
            tipoFactura = tblComprobantes.getValueAt(fila, 7).toString();
        }

        if (tipoFactura.equals("Facturación Electronica")) {
            try {
                int valor = 0;
                do {
                    Thread.sleep(500);
                    valor = instancias.getSql().getConsultaTablaBloqueada("bdLogErroresDetalle");
                } while (valor > 0);
            } catch (InterruptedException ex) {
            }
            instancias.getSql().bloqueoConsecutivosfactura();
            consecutivo = instancias.getSql().getConsecutivoFacturaActual(tblComprobantes.getValueAt(fila, 0).toString());
        } else {
            consecutivo = instancias.getSql().getProximoConsecutivoFactura(tblComprobantes.getValueAt(fila, 0).toString());

        }
        
        String factura = "FACT-" + prefijo + consecutivo;

//        Object[] infoCon = instancias.getSql().getNumConsecutivoFact(tblComprobantes.getValueAt(fila, 0).toString());
//        String factura = "FACT-" + prefijo + infoCon[0].toString();
        
//        int seg = 0;

//        Object[][] nodo = instancias.getSql().getVerificadorFactura(factura);
//
//        while (infoCon[1].toString().equals("ON") && nodo.length > 0) {
//            infoCon = instancias.getSql().getNumConsecutivoFact(tblComprobantes.getValueAt(fila, 0).toString());
//            factura = "FACT-" + prefijo + infoCon[0].toString();
//            nodo = instancias.getSql().getVerificadorFactura(factura);
//
//            try {
//                Thread.sleep(1000);
//                seg++;
//                if (seg > 2) {
//                    if (!instancias.getSql().aumentarConsecutivoFactura(tblComprobantes.getValueAt(fila, 0).toString(),
//                            Integer.parseInt((String) instancias.getSql().getNumConsecutivoFact(tblComprobantes.getValueAt(fila, 0).toString())[0]) + 1)) {
//                    }
//                    seg = 0;
//                }
//            } catch (Exception e) {
//                Logs.error(e);
//            }
//        }

//        return "FACT-" + prefijo + infoCon[0].toString();

    return factura;
    }

    private String facturar(intDevuelta devuelta, boolean imprimir, String desde) throws Exception{
        String idComanda = "";
        try {

            codigoAutorizacion = "";
            if(isMostrarDevuelta()){
            //SI ES MESA O ESTA ACTIVO SALTAR PASOS DE FACTURA, NO MOSTRAR EL MODULO DE DEVUELTA
                if (tipo.equals("mesa") || saltarPasosFactura) {
                    devuelta = new intDevuelta(instancias.getMenu(), true, big.getMoneda(txtTotal.getText().replace("Total: ", "")),
                            instancias, "", txtIdSistema.getText(),big.getMoneda(txtSubTotal.getText()));
                }
            }
            //OBTENEMOS LA BASE DE LA BODEGA QUE SE ESTA UTILIZANDO
            String baseUtilizada = obtenerBase();

            //VALIDAMOS QUE SI LA FACTURA A REALIZAR TIENE RELACIONADO ALGUN PEDIDO, SE DESACTIVE EL MODULO DE DEVUELTA
            try {
                if (ndPedido.getIdFactura() != null) {
                    devuelta = null;
                }
            } catch (Exception e) {
                Logs.error(e);
            }

            //VALIDAMOS QUE SI LA FACTURA A REALIZAR TIENE RELACIONADO ALGUNA COTIZACION, SE DESACTIVE EL MODULO DE DEVUELTA
            try {
                if (nodoCotizacion != null) {
                    devuelta = null;
                }
            } catch (Exception e) {
            }

            //VALIDAMOS QUE SI LA FACTURA A REALIZAR ESTA COMPUESTA POR MUCHOS PEDIDOS
            if (facturandoPedidos) {
                devuelta = null;
            }

            //MODULO DE DEVUELTA
            if (!(tipo.equals("orden") || tipo.equals("pedido") || tipo.equals("cuentaCobro") || tipo.equals("separe")
                    || facturaCredito || tipo.equals("cotizacion") || desde.equals("ordenMedica"))) {

                if (devuelta == null) {
                    //VALIDAMOS SI LA FACTURA ES A CONTADO
                    if (txtFechaFactura.getText().equals(txtVencimiento.getText())) {
                        String miTipo = "";
                        if (tipo.equals("facturacion")) {
                            miTipo = "facturacion";
                        }
                       if (isMostrarDevuelta()) {
//                                if (saltarPasosFactura) {
                                    devuelta = new intDevuelta(null, true, big.getMoneda(txtTotal.getText().replace("Total: ", "")),
                                            instancias, miTipo, txtIdSistema.getText(),big.getMoneda(txtSubTotal.getText()));
                                    devuelta.show();
//                                }
                            }
                    } else {
                        instancias.setEfectivoDevuelta(big.getBigDecimal("0"));
                        instancias.setNcDevuelta(big.getBigDecimal("0"));
                        instancias.setTarjetaDevuelta(big.getBigDecimal("0"));
                        instancias.setTarjetaCredito(big.getBigDecimal("0"));
                        instancias.setChequeDevuelta(big.getBigDecimal("0"));
                        instancias.setDevuelta(BigDecimal.ZERO);
                        instancias.setPorcPropina("0");
                        instancias.setPropina(big.getBigDecimal("0"));
                        instancias.setTotalPropina(big.getBigDecimal("0"));
                    }
                } else {
                    if (txtFechaFactura.getText().equals(txtVencimiento.getText())) {
                        instancias.setEfectivoDevuelta(big.getBigDecimal(big.getMoneda(txtTotal.getText().replace("Total: ", ""))));
                        instancias.setNcDevuelta(big.getBigDecimal("0"));
                        instancias.setTarjetaDevuelta(big.getBigDecimal("0"));
                        instancias.setTarjetaCredito(big.getBigDecimal("0"));
                        instancias.setChequeDevuelta(big.getBigDecimal("0"));
                        instancias.setDevuelta(BigDecimal.ZERO);
                        instancias.setPorcPropina("0");
                        instancias.setPropina(big.getBigDecimal("0"));
                        instancias.setTotalPropina(big.getBigDecimal("0"));
                    } else {
                        instancias.setEfectivoDevuelta(big.getBigDecimal("0"));
                        instancias.setNcDevuelta(big.getBigDecimal("0"));
                        instancias.setTarjetaDevuelta(big.getBigDecimal("0"));
                        instancias.setTarjetaCredito(big.getBigDecimal("0"));
                        instancias.setChequeDevuelta(big.getBigDecimal("0"));
                        instancias.setDevuelta(BigDecimal.ZERO);
                        instancias.setPorcPropina("0");
                        instancias.setPropina(big.getBigDecimal("0"));
                        instancias.setTotalPropina(big.getBigDecimal("0"));
                    }
                }
            } else {
                //VALIDACION DE FACTURAS MEDICAS FALTA !
            }

            //VALIDAMOS QUE SI CANCELARON LA FACTURA, SE REESTABLEZCAN AL VALOR INICIAL
            if (instancias.getCancelarFactura()) {
                Logs.log("DEVOLVIO LA FACTURA");
                instancias.setEfectivoDevuelta(big.getBigDecimal("0"));
                instancias.setNcDevuelta(big.getBigDecimal("0"));
                instancias.setTarjetaDevuelta(big.getBigDecimal("0"));
                instancias.setTarjetaCredito(big.getBigDecimal("0"));
                instancias.setChequeDevuelta(big.getBigDecimal("0"));
                instancias.setDevuelta(BigDecimal.ZERO);
                instancias.setPorcPropina("0");
                instancias.setPropina(big.getBigDecimal("0"));
                instancias.setTotalPropina(big.getBigDecimal("0"));
                facturandoPedidos = false;
                borrarAdiciones();
                instancias.setCancelarFactura(false);
                return "";
            }
            
            ArrayList<Map<String, String>> facturaRenvio = null;
            //OBTENEMOS EL CONSECUTIVO DE CUALQUIER TIPO DE DOCUMENTO
            String tip = tipo();
            String factura = "", factura2 = "";
            if (tipo.equals("facturacion") || (tipo.equals("mesa") && lbTitulo.getText().equals("DOMICILIO"))) {
                int fila = 0;
                //OBTENEMOS LA FILA DEL COMPROBANTE SELECCIONADO
                for (int i = 0; i < tblComprobantes.getRowCount(); i++) {
                    if ((Boolean) tblComprobantes.getValueAt(i, 2)) {
                        fila = i;
                    }
                }

                //OBTENEMOS EL PREFIJO DEL COMPROBANTE
                String prefijo = "";
    
                if (null == tblComprobantes.getValueAt(fila, 8)) {
                    prefijo = "";
                } else {
                    prefijo = tblComprobantes.getValueAt(fila, 8).toString();
                }

                String facturaEnvio=getNumeroFacturaRenvio();
                facturaRenvio = instancias.getSql().consultarFacturasRenvio(facturaEnvio);
                    if(facturaRenvio.size()>0){
                      factura2 =facturaEnvio;           
                    }else{
                      //se solicita el consecutivo actual
                      factura2 = getConsecutivo(fila);
                    }
                factura = factura2.replace(prefijo, "");
            } else if (tipo.equals("orden")) {
                factura = "OSERV-" + instancias.getSql().getNumConsecutivo("OSERV")[0].toString();
            } else if (tipo.equals("cotizacion")) {
                factura = "COTI-" + instancias.getSql().getNumConsecutivo("COTI")[0].toString();
            } else if (tipo.equals("pedido")) {
                factura = "PEDIDO-" + instancias.getSql().getNumConsecutivo("PEDIDO")[0].toString();
            } else if (tipo.equals("separe")) {
                factura = "SEPARE-" + instancias.getSql().getNumConsecutivo("SEPARE")[0].toString();
                factura2 = factura;
            } else if (tipo.equals("mesa")) {
                factura = "CONGELADA-" + instancias.getSql().getNumConsecutivo("CONGELADA")[0].toString();
            } else if (tipo.equals("cuentaCobro")) {
                factura = "CCOBRO-" + instancias.getSql().getNumConsecutivo("CCOBRO")[0].toString();
            }

            if (facturaCredito) {
                calcularCuotasCredito();
                guardarCredito(factura, factura2);
            }

            String por = "";
            if (cmbRtf.getSelectedIndex() == 0) {
                por = "0";
            } else {
                por = cmbRtf.getSelectedItem().toString();
            }

            String estado = "PENDIENTE";
            String cotizacionesAsociadas = "";

            try {
                for (String cotizacione : cotizaciones) {
                    cotizacionesAsociadas = cotizacionesAsociadas + cotizacione + "-";
                }
            } catch (Exception e) {
                Logs.error(e);
            }

            //Se tienen que dejar las dos validaciones ya que una es cuando se hace desde el abono y la otra
            //cuando se carga directamente en la factura.
            if (desde.equals("facturarSepare")) {
                estado = "REALIZADO";
                cotizacionesAsociadas = "SEPARE-" + txtCargar.getText();
                instancias.getSql().cambiarEstadoSepare("FACTURADO", "SEPARE-" + txtCargar.getText());
                actualizarInventario = false;
            }

            try {
                if (ndSepare.getIdFactura() != null) {
                    estado = "REALIZADO";
                    cotizacionesAsociadas = "SEPARE-" + txtCargar.getText();
                    instancias.getSql().cambiarEstadoSepare("FACTURADO", "SEPARE-" + txtCargar.getText());
                    actualizarInventario = false;
                } else {
                }
            } catch (Exception e) {
                Logs.error("No es separe: "+e);
            }
            BigDecimal copago = BigDecimal.ZERO;
            try {
                copago = big.getMoneda(txtCopago.getText());
            } catch (Exception e) {
                copago = BigDecimal.ZERO;
            }

            //OBTENEMOS EL VENDEDOR DE LA FACTURA
            String vendedor = "";
            try {
                vendedor = cmbVendedor.getSelectedItem().toString();
            } catch (Exception e) {
                vendedor = "";
            }

            String congelada = "";
            if (instancias.getConfiguraciones().isRestaurante()) {
                try {
                    congelada = instancias.getTitulo();
                } catch (Exception e) {
                    Logs.error(e);
                }
            } else {
                try {
                    congelada = instancias.getTitulo().replace(": ", "-");
                } catch (Exception e) {
                    Logs.error(e);
                }
            }

            if (tipo.equals("facturacion")) {
                congelada = "SIN-CONSECUTIVO";
            }

            String turno = "";
            if ((Boolean) datos[54] && instancias.getConfiguraciones().isRestaurante()) {
                turno = instancias.getSql().getTurno();
            } else if (txtTurno.isVisible()) {
                turno = txtTurno.getText();
            }

            if (tipo.equals("facturacion") || (tipo.equals("mesa") && lbTitulo.getText().equals("DOMICILIO"))) {

                String facturaEnvio=factura.replace("FACT-", "");
//              facturaRenvio = instancias.getSql().consultarFacturasRenvio(facturaEnvio);
// 
                //OBTENEMOS LA HORA EN LA QUE SE REALIZA LA FACTURA
                String hora = metodosGenerales.hora();
   //se realiza validacion para que no almacene la forma de pago cuando se reenvia ya que se almaceno en el primer envio
    if(facturaRenvio.size() == 0 && facturaRenvio != null){
                //AGREGAR FORMAS DE PAGOS
                boolean entraPago = false;
                System.err.println("efectivo ---->>>"+instancias.getEfectivoDevuelta());
                if (instancias.getEfectivoDevuelta().compareTo(BigDecimal.ZERO) > 0) {
                    entraPago = true;
                    String idPago = "FORMAPAGO-" + instancias.getSql().getNumConsecutivoSinDesbloqueo("FORMAPAGO")[0].toString();
                    instancias.getSql().agregarFormaPago(idPago, factura2, "10", "EFECTIVO", instancias.getEfectivoDevuelta(), "",
                            metodos.fechaConsulta(metodosGenerales.fecha()), hora, instancias.getUsuario());
    //                instancias.getSql().aumentarConsecutivo("FORMAPAGO", Integer.parseInt((String) instancias.getSql().getNumConsecutivo("FORMAPAGO")[0]) + 1);
                }

                if (instancias.getChequeDevuelta().compareTo(BigDecimal.ZERO) > 0) {
                    entraPago = true;
                    String idPago = "FORMAPAGO-" + instancias.getSql().getNumConsecutivo("FORMAPAGO")[0].toString();
                    instancias.getSql().agregarFormaPago(idPago, factura2, "20", "CHEQUE", instancias.getChequeDevuelta(), "",
                            metodos.fechaConsulta(metodosGenerales.fecha()), hora, instancias.getUsuario());
    //                instancias.getSql().aumentarConsecutivo("FORMAPAGO", Integer.parseInt((String) instancias.getSql().getNumConsecutivo("FORMAPAGO")[0]) + 1);
                }

                if (instancias.getTarjetaDevuelta().compareTo(BigDecimal.ZERO) > 0) {
                    entraPago = true;
                    String idPago = "FORMAPAGO-" + instancias.getSql().getNumConsecutivo("FORMAPAGO")[0].toString();
                    instancias.getSql().agregarFormaPago(idPago, factura2, "49", "TARJETA_DEBITO", instancias.getTarjetaDevuelta(), "",
                            metodos.fechaConsulta(metodosGenerales.fecha()), hora, instancias.getUsuario());
    //                instancias.getSql().aumentarConsecutivo("FORMAPAGO", Integer.parseInt((String) instancias.getSql().getNumConsecutivo("FORMAPAGO")[0]) + 1);
                }

                if (instancias.getTarjetaCredito().compareTo(BigDecimal.ZERO) > 0) {
                    entraPago = true;
                    String idPago = "FORMAPAGO-" + instancias.getSql().getNumConsecutivo("FORMAPAGO")[0].toString();
                    instancias.getSql().agregarFormaPago(idPago, factura2, "48", "TARJETA_CREDITO", instancias.getTarjetaCredito(), "",
                            metodos.fechaConsulta(metodosGenerales.fecha()), hora, instancias.getUsuario());
    //                instancias.getSql().aumentarConsecutivo("FORMAPAGO", Integer.parseInt((String) instancias.getSql().getNumConsecutivo("FORMAPAGO")[0]) + 1);
                }
                System.err.println("dias plazo::: "+txtDiasPlazo.getText());
                if(entraPago == false && Integer.parseInt(txtDiasPlazo.getText()) == 0){
                   if(instancias.getNcDevuelta().compareTo(BigDecimal.ZERO) > 0){
                   }else{
                   instancias.setEfectivoDevuelta(big.getMoneda(txtTotal.getText().replace("Total: ", "")));
                   String idPago = "FORMAPAGO-" + instancias.getSql().getNumConsecutivoSinDesbloqueo("FORMAPAGO")[0].toString();
                   instancias.getSql().agregarFormaPago(idPago, factura2, "10", "EFECTIVO", instancias.getEfectivoDevuelta(), "",
                   metodos.fechaConsulta(metodosGenerales.fecha()), hora, instancias.getUsuario());
                   }
                }
   }
                int fila = 0;
                for (int i = 0; i < tblComprobantes.getRowCount(); i++) {
                    if ((Boolean) tblComprobantes.getValueAt(i, 2)) {
                        fila = i;
                    }
                }

                String tipoFactura = "";
                if (null == tblComprobantes.getValueAt(fila, 7)) {
                    tipoFactura = "";
                } else {
                    tipoFactura = tblComprobantes.getValueAt(fila, 7).toString();
                }
                
                if(facturaRenvio.size()>0){
                    setNumeroFacturaRenvio(facturaRenvio.get(0).get("numeroFactura"));
                }
                Gson gSon = new Gson();
                                
                if (tipoFactura.equals("Facturación Electronica")) {
                    try {
                        boolean generacionFacturaElectronica = aplicarFacturacionElectronica(factura, factura2);
                        bloquearTodo(true);
                        if (!generacionFacturaElectronica) {
                            setNumeroIdFacturaRenvio("0");
                                cmbCargar.setSelectedIndex(1);
                                cmbCargar.setSelectedItem("Cargar Cotización");
                                txtCargar.setText("");
                            borrarAdiciones();
                            instancias.getSql().desbloquearConsecutivosfactura();
                            facturandoPedidos = false;
                            instancias.setCancelarFactura(false);
                                limpiar(true, "");
                                lbNit.requestFocus();
                                tblProductos.removeEditor();
                                tblInventario.removeEditor();
                            return "";
                        }else{
                            numeroFacturaRenvio=getNumeroIdFacturaRenvio();
                            if(numeroFacturaRenvio.equals("0") || numeroFacturaRenvio.equals("")){  
                             instancias.getSql().incrementarFacturaActualYDesbloquear(tblComprobantes.getValueAt(fila, 0).toString());   
                            }else{
                                instancias.getSql().desbloquearConsecutivosfactura();
                                
                                modificarFacturaElectronica(factura);
                                cmbCargar.setSelectedIndex(1);
                                cmbCargar.setSelectedItem("Cargar Cotización");
                                txtCargar.setText("");
                                setNumeroIdFacturaRenvio("0");
                                borrarAdiciones();
                                facturandoPedidos = false;
                                instancias.setCancelarFactura(false);                                
                            }
                        }
                       
                        try{
                          RespuestaServicioEnvioFacturas respuestaApi;
                          respuestaApi = gSon.fromJson(getRespuesta(), RespuestaServicioEnvioFacturas.class);
                          LogsFacturaApi(respuestaApi,facturaEnvio);
                        }catch(Exception e1){
                          Respuesta respuestaError = gSon.fromJson(getRespuesta(), Respuesta.class); 
                          instancias.getSql().almacenarLogsServicioFacturacion("0", facturaEnvio, "", "Error en el Servicio", "", respuestaError.getMensaje(),"0");
                        } 
                        
                    } catch (Exception e) {
                         try{      
                            instancias.getSql().desbloquearConsecutivosfactura();
                            Respuesta respuestaError = gSon.fromJson(getRespuesta(), Respuesta.class);
                            if(respuestaError != null){   
                               instancias.getSql().incrementarFacturaActualYDesbloquear(tblComprobantes.getValueAt(fila, 0).toString());     
                            }
                            instancias.getSql().almacenarLogsServicioFacturacion("2", facturaEnvio, "", "Error en el Servicio", "", respuestaError.getMensaje(),"0");
                            
                        }catch(Exception ea){
                          instancias.getSql().almacenarLogsServicioFacturacion("2", facturaEnvio, "", "Error en el Servicio", "", "Error en la respuesta Api "+ea.getMessage(),"0");
                        }
//                        throw e;
                    }
                }else{
                    FacturacionPos facturacionPos = new FacturacionPos(jsonFacturacion(factura,factura2),instancias.getNitEmisor(), instancias.getTokenEmisor(),instancias);
                    facturacionPos.start();
                    System.err.println("Json Pos 1 "+jsonFacturacion(factura,factura2).toString());
                }
                
                
                if(!numeroFacturaRenvio.equals("0")){
                    limpiar(true, "");
                    lbNit.requestFocus();
                    tblProductos.removeEditor();
                    tblInventario.removeEditor();
                    return factura2;
                }

                ndFactura nodo;

                //SI SE REALIZA LA FACTURA DESDE FACTURACIÓN AUTOMATICA SE TOMA LA FECHA QUE ESCOJA EL CLIENTE, SINO LA DEL SISTEMA
                String fechaFact = "";
                if (fechaFacturaAutomatica.equals("")) {
                    fechaFact = metodos.fechaConsulta(metodosGenerales.fechaHora());
                } else {
                    fechaFact = fechaFacturaAutomatica;
                }

                //AGREGAMOS EL REGISTRO TOTALIZADO EN VERIFICADOR DE FACTURAS 
                instancias.getSql().agregarVerificarFactura(factura, txtIdSistema.getText(), factura2, ter,
                        big.getMoneda(txtTotal.getText().replace("Total: ", "")), fechaFact,
                        metodos.fechaConsulta(txtVencimiento.getText()), metodos.fechaConsulta(metodos.sumarFecha(txtVencimiento.getText(), cantDias)),
                        vendedor, congelada, txtPlaca1.getText(), turno);

                for (int i = 0; i < tblProductos.getRowCount(); i++) {

                    if (!tblProductos.getValueAt(i, 16).equals("REALIZADO")) {
                        String imei = "", lote = "", idProd = "";

                        if (instancias.getConfiguraciones().isProductosSerial()) {
                            imei = tblProductos.getValueAt(i, 27).toString();
                            lote = tblProductos.getValueAt(i, 28).toString();
                            idProd = tblProductos.getValueAt(i, 29).toString();
                        } else if (instancias.getConfiguraciones().isParqueadero()) {
                            imei = tblProductos.getValueAt(i, 27).toString();
                        }

                        BigDecimal porcDesc;
                        try {
                            porcDesc = big.getBigDecimal(tblProductos.getValueAt(i, 5).toString().replace(",", ".")).setScale(2, RoundingMode.DOWN);
                        } catch (Exception e) {
                            Logs.error(e);
                            porcDesc = BigDecimal.ZERO;
                        }

                        if (congelada == null) {
                            congelada = "";
                        }

//                        Map preparacion = new HashMap();
//                        try {
//                              preparacion = (Map) tblProductos.getValueAt(i, 21);
//                        } catch (Exception e) {
//                        }
                        
                    String cadena = "";
                    boolean ingresoIngredientes= false; 
                    Map preparacion = new HashMap();
                    String codigoPreparacions = instancias.getSql().tipoProductoPreparacion(tblProductos.getValueAt(i, 32).toString(),"COSTEO");
                        if (!codigoPreparacions.equals("COSTEO")) {

                            try {
                                cadena = tblProductos.getValueAt(i, 21).toString();
                                if (cadena.equals("")) {
                                  
//                                    String codigoPreparacion = instancias.getSql().esPreparacion(tblProductos.getValueAt(i, 32).toString());
                                     String codigoPreparacion = instancias.getSql().tipoProductoPreparacion(tblProductos.getValueAt(i, 32).toString(),"COSTEO");
                                    if(!codigoPreparacion.equals("COSTEO")){
//                                    if (codigoPreparacion.equals(tblProductos.getValueAt(i, 32).toString())) {
                                        instancias.getSql().insertarPreparacion(factura, i + "", tblProductos.getValueAt(i, 32).toString());
                                    }
                                    preparacion = cargarPreparada(factura, i + "", tblProductos.getValueAt(i, 32).toString());
                                    ingresoIngredientes = true;
                                } else {
                                    preparacion = (Map) tblProductos.getValueAt(i, 21);
                                }

                            } catch (Exception e) {
                                Log.error("Error cadena  restaurante: ", e);
                            }
                        }  
                        
                        
                        

                        String bodega = txtBodega.getText();
                        if (!instancias.getConfiguraciones().isInventarioBodegas()) {
                            bodega = "123-22";
                        }

                        if (instancias.getConfiguraciones().isRestaurante()) {
                            String pedidoActivo = "No";
                            try {
                                if (ndPedido.getIdFactura() != null) {
                                    pedidoActivo = "Si";
                                }
                            } catch (Exception e) {
                                Logs.error(e);
                            }

                            if (pedidoActivo.equals("Si")) {
                                if (instancias.getSql().getDatosProducto(tblProductos.getValueAt(i, 32).toString(), baseUtilizada).getUsuario().equalsIgnoreCase("FACTURA")) {
                                  
                                    instancias.getArmado().facturarPlato(tblProductos.getValueAt(i, 32).toString(), tblProductos.getValueAt(i, 3).toString(),
                                            preparacion, "inventarioPedido", bodega,"","");
                                }
                            } else {
                                if (instancias.getSql().getDatosProducto(tblProductos.getValueAt(i, 32).toString(), baseUtilizada).getUsuario().equalsIgnoreCase("FACTURA")) {
                                    
                                    instancias.getArmado().facturarPlato(tblProductos.getValueAt(i, 32).toString(), tblProductos.getValueAt(i, 3).toString(),
                                            preparacion, "descontarTodoSinMesa", bodega,"","");
                                }
                            }
                        } else {
                            Map preparacion1=null;
                            if (instancias.getSql().getDatosProducto(tblProductos.getValueAt(i, 32).toString(), baseUtilizada).getUsuario().equalsIgnoreCase("FACTURA")) {
                             
                                if(getTipoModulo().equals("pedido")){
                                  instancias.getArmado().setTipoMovimiento("inventarioPedido");
                                }
                                instancias.getArmado().facturarPreparado(tblProductos.getValueAt(i, 32).toString(), tblProductos.getValueAt(i, 3).toString(),
                                        preparacion1, bodega);
                                instancias.getArmado().setTipoMovimiento("");
                            }
                        }

                        String consecutivoCosteo = idCosteo;
                        BigDecimal costoCosteo1 = BigDecimal.ZERO, totalUtilidad = BigDecimal.ZERO, cantidadItem = new BigDecimal(1);
                        

                        boolean isPreparacion = instancias.getSql().esPreparacionBool(tblProductos.getValueAt(i, 32).toString());
                        if(isPreparacion){
                          Object dtDatos[][] = instancias.getSql().getArmadoCosteo(tblProductos.getValueAt(i, 32).toString());
                          costoCosteo = BigDecimal.valueOf(Double.parseDouble(dtDatos[0][0].toString().replace(",",".")));
                          consecutivoCosteo="0";
                        }     
                        try {
                            costoCosteo1 = costoCosteo;
                        } catch (Exception e) {
                            Logs.error(e);
                        }

                        if (consecutivoCosteo == null) {
                            consecutivoCosteo = "";
                        }
                        
                        cantidadItem = big.getBigDecimal(tblProductos.getValueAt(i, Identidad.Cant).toString().replace(".","").replace(",","."));
                        
                        if (!consecutivoCosteo.equals("")) {
                            totalUtilidad = big.getMoneda(tblProductos.getValueAt(i, Identidad.Total).toString()).subtract(costoCosteo1.multiply(cantidadItem));
                        } else {                            
                            totalUtilidad = big.getMoneda((String) tblProductos.getValueAt(i, 14));
                        }
                        
                        String garantia = "";
                        if (!txtGarantiaSeñal.getText().equals("")) {
                            garantia = "Por señal: " + txtGarantiaSeñal.getText() + " " + cmbSeñal.getSelectedItem() + ". ";
                        }

                        if (!txtGarantiaFuncionamiento.getText().equals("")) {
                            garantia = garantia + "Por funcionamiento: " + txtGarantiaFuncionamiento.getText() + " " + cmbFuncionamiento.getSelectedItem();
                        }

                        Object[] ultimoMovimiento = instancias.getSql().getUltimoPonderado(tblProductos.getValueAt(i, 32).toString());

                        double pond;
                        try {
                            pond = big.formatDouble(big.getBigDecimal(ultimoMovimiento[4].toString()));
                        } catch (Exception e) {
                            Logs.error(e);
                            pond = 0;
                        }
                        
                        //AGREGO PONDERADO A PREPARADA
                        if(!consecutivoCosteo.equals("")){
                          pond=big.formatDouble(big.getBigDecimal(costoCosteo1));
                        }
                        
                        String numeroOrdenCompra = "";

                         if(!txtTurno.getText().trim().equals("")){
                            numeroOrdenCompra = txtTurno.getText().trim();    
                         }
                        String trm = "", fechatrm = "";
                        if (tipoFactura.equals("Facturación Electronica")) {
                            ndTercero tercero = instancias.getSql().getDatosTercero(txtIdSistema.getText());
                            if (tercero.getCodigoMoneda() != null) {
                                if (!tercero.getCodigoMoneda().equals("COP")) {
                                    trm = getTrmMoneda().trim();
                                    fechatrm = getFechaMoneda().trim();
                                }
                            }
                        }
                      
                        //facturacion directa diseño con adicion
                        Object[] vector = {factura, txtIdSistema.getText(), vendedor, "", fechaFact,
                            metodos.fechaConsulta(txtVencimiento.getText()), instancias.getEfectivoDevuelta(), instancias.getNcDevuelta(), instancias.getChequeDevuelta(),
                            instancias.getTarjetaDevuelta(), big.getMoneda(txtTotal.getText().replace("Total: ", "")),
                            big.getMoneda(txtTotalDescuentos.getText()),
                            big.getMoneda(txtTotalIva.getText()), big.getMoneda(txtSubTotal.getText()), cotizacionesAsociadas,
                            factura.replace(tip + "-", ""), false, "", !txtFechaFactura.getText().equals(txtVencimiento.getText()),
                            loteCuentasCobro, instancias.getUsuario(), big.getMoneda(txtRiva.getText()), big.getMoneda("0"), big.getMoneda(txtRtf.getText()),
                            big.getMonedaToDouble(por), txtObservaciones.getText(), false, "", false, "", "",
                            metodos.fechaConsulta(metodos.sumarFecha(txtVencimiento.getText(), cantDias)), ter,
                            estado, "", instancias.getDevuelta(), factura2, instancias.getResolucion(), metodos.fechaConsulta(metodosGenerales.fecha()), "", "",
                            copago, txtPlaca1.getText(), garantia, "", tblProductos.getValueAt(i, 31), "",
                            "", congelada, tblProductos.getValueAt(i, 32), big.getMoneda((String) tblProductos.getValueAt(i, 2)),
//                            big.getMonedaToDouble(tblProductos.getValueAt(i, 3).toString())+"", 
                            formatVal(big.formatDouble(big.getMonedaToDouble(tblProductos.getValueAt(i, Identidad.Cant).toString().replace(".", "")))),
                            big.getMoneda((String) tblProductos.getValueAt(i, 6)),
                            big.getMoneda((String) tblProductos.getValueAt(i, 9)), big.getMoneda((String) tblProductos.getValueAt(i, 33)),
                            big.getMoneda((String) tblProductos.getValueAt(i, 4)), "", totalUtilidad, "",
                            porcDesc + "", tblProductos.getValueAt(i, 1), tblProductos.getValueAt(i, 12) + "", tblProductos.getValueAt(i, 13).toString().replace(",", "."),
                            "PENDIENTE", tblProductos.getValueAt(i, 7), tblProductos.getValueAt(i, 19), big.getMoneda(tblProductos.getValueAt(i, 20).toString()),
                            preparacion.toString(), big.getMoneda(txtImpuesto.getText()), turno, big.getMoneda(txtTotalImpoconsumo.getText()), instancias.getFranquisia(),
                            instancias.getComision(), instancias.getValorComision(), instancias.getTotalFacturaComision(), imei, lote, idProd,
                            cmbMes.getSelectedItem(), instancias.getTarjetaCredito(), instancias.getTotalPropina(), instancias.getPorcPropina(),
                            consecutivoCosteo, hora, tblProductos.getValueAt(i, 23).toString().replace(".", "").replace(",", "."),
                            big.getMoneda((String) tblProductos.getValueAt(i, 8)), chkSisteCredito.isSelected(), txtBodega.getText(), big.getBigDecimal(pond),
                            txtModeloContable.getText(), codigoAutorizacion, trm, fechatrm, numeroOrdenCompra
                        };
                            
                        idCosteo = "";
                        costoCosteo = BigDecimal.ZERO;
                        
                        
                        nodo = metodos.llenarFactura(vector);

                        if (!instancias.getSql().agregarFactura(nodo)) {
                            boolean noPuedaGuardar = false;
//                            se comenta porque elimina toda la factura si hay un error y se perderian datos   
//                            instancias.getSql().eliminarFactura(factura);
//                            while (!noPuedaGuardar) {
//                                noPuedaGuardar = instancias.getSql().eliminarFactura(factura);
//                            }

                            metodos.msgError(null, "Error al guardar la factura");
                            return null;
                        }
                    }

                    if (instancias.getConfiguraciones().isRestaurante()) {
                        // agregarRegistrosComandas(i, turno, baseUtilizada, factura2, "", "");
                        //se agrega esta seña para poder hacer un filtro en las comandas de los productos adicionados cuando se imprimen n comandas.jasper
                        String banderaAdicion = "";
                        if (tblProductos.getValueAt(i, 38).toString().equals("1")) {
                            banderaAdicion = tblProductos.getValueAt(i, 38).toString();
                        }
                        agregarRegistrosComandas(i, turno, baseUtilizada, factura, "", "", banderaAdicion);
                        //agregarRegistrosComandas(i, turno, baseUtilizada, factura, "", "");
//aqui puedo guardar en preparacion
Map infDetalleProductosPrincipales = new HashMap();
   try {
      
       Map preparacions = new HashMap();
       preparacions = (Map) tblProductos.getValueAt(i, 21);
       ArrayList<Map> ingredientess = new ArrayList<Map>();
       ArrayList<Map> adicioness = new ArrayList<Map>();
       ingredientess = (ArrayList<Map>) preparacions.get("ingredientes"); 
       adicioness = (ArrayList<Map>) preparacions.get("adiciones"); 
       
        infDetalleProductosPrincipales = (Map) tblProductos.getValueAt(i, 21);
        ArrayList<Map<String, String>> ingredientes = (ArrayList<Map<String, String>>)infDetalleProductosPrincipales.get("ingredientes");
        ArrayList<Map<String, String>> adiciones = (ArrayList<Map<String, String>>)infDetalleProductosPrincipales.get("adiciones");
   //SE DEBE VALIDAR SI ES PEDIDO PQ  SE ESTA INSERTANDO DE NUEVO LOS PRODUCTOS 
       //se valida para que cuando se un pedido busque por pedido y no por factura
       String idCongeladaPF="";
       String idCongeladaPF2="";
       boolean isPedidoActivo= false;
       try{
           if (ndPedido.getIdFactura() != null) {
               isPedidoActivo= true;
           }
       }catch(Exception es){
           isPedidoActivo= false;
       }
       
       if (isPedidoActivo) {
          idCongeladaPF=ndPedido.getIdFactura();
          idCongeladaPF2="";
        }else{
          idCongeladaPF=factura;
          idCongeladaPF2=factura;
          iteraModificarPreparacion("PROD-"+i,idCongeladaPF2,ingredientes);
          iteraModificarPreparacion("PROD-"+i,idCongeladaPF2,adiciones);

       }
       
   } catch (Exception e) {
       Log.error("Error cadena  restaurante: ", e);
   }
    

                    }

                    try {
                        if (nodoOrdenServicio != null) {
                            if (!instancias.getSql().modificarEstadosProcesos(nodoOrdenServicio, "REALIZADO", tblProductos.getValueAt(i, 32).toString(), "bdOServicio1")) {
                                if(showMsg){
                                     metodos.msgError(null, "Hubo un problema al modificar el estado del producto");
                                }else{
                                     Logs.error("Hubo un problema al modificar el estado del producto");
                                }

                                return null;
                            }
                        }
                    } catch (Exception e) {
                        Logs.error(e);
                    }

                    try {
                        if (nodoCotizacion != null) {
                            if (!instancias.getSql().modificarEstadosProcesos(nodoCotizacion, "REALIZADO", tblProductos.getValueAt(i, 32).toString(), "bdCotizacion")) {
                                if(showMsg){
                                     metodos.msgError(null, "Hubo un problema al modificar el estado del producto");
                                }else{
                                     Logs.error("Hubo un problema al modificar el estado del producto");
                                }

                                return null;
                            }
                        }
                    } catch (Exception e) {
                        Logs.error(e);
                    }

                    try {
                        if (ndPedido.getIdFactura() != null) {
                            if (!instancias.getSql().modificarEstadosProcesos(ndPedido.getIdFactura(), "REALIZADO", tblProductos.getValueAt(i, 32).toString(), "bdPedido")) {
                                if(showMsg){
                                     metodos.msgError(null, "Error al modificar estado del producto");
                                }else{
                                     Logs.error("Error al modificar estado del producto");
                                }

                                return null;
                            }
                            
                            if (!instancias.getSql().modificarPreparacion(ndPedido.getIdFactura(), factura, "bdpreparacion")) {
                                 Logs.error("Error al modificar preparacion");
                            }
                            
                        }
                    } catch (Exception e) {
                        Logs.error(e);
                    }

                    // DESCONTAR DEL INVENTARIO 
                    //OBTENEMOS EL NODO DEL PRODUCTO PARA REALIZAR LOS MOVIMIENTOS
                    ndProducto producto = instancias.getSql().getDatosProducto(tblProductos.getValueAt(i, 32).toString(), baseUtilizada);

                    //OBTENEMOS LA CANTIDAD TOTAL A DESCONTAR DEL INVENTARIO
                    double cant2 = Double.parseDouble(tblProductos.getValueAt(i, 13).toString().replace(",", "."));

                    //OBTENEMOS EL CODIGO SI EL PRODUCTO ES UN PRODUCTO DE SERIE
                    String cod = "";
                    try {
                        cod = tblProductos.getValueAt(i, 29).toString();
                    } catch (Exception e) {
                        Logs.error(e);
                    }

                    if (!cod.equals("")) {
                        String tipo = "";

                        if (producto.getTipoProducto() != null) {
                            if (producto.getTipoProducto().equals("IMEI")) {
                                tipo = "Imei";
                            } else if (producto.getTipoProducto().equals("Fecha/Lote")) {
                                tipo = "Fecha/Lote";
                            } else if (producto.getTipoProducto().equals("Color")) {
                                tipo = "Color";
                            } else if (producto.getTipoProducto().equals("Serial")) {
                                tipo = "Serial";
                            } else if (producto.getTipoProducto().equals("Talla")) {
                                tipo = "Talla";
                            } else if (producto.getTipoProducto().equals("ColorTalla")) {
                                tipo = "ColorTalla";
                            } else if (producto.getTipoProducto().equals("SerialColor")) {
                                tipo = "SerialColor";
                            } else {
                                tipo = "";
                            }
                        }

                        if (tipo.equals("Imei") || tipo.equals("Serial") || tipo.equals("SerialColor")) {
                            instancias.getSql().modificarEstadoDetalleProductos(cod, "NO-DISPONIBLE");
                        } else {
                            String pedido = "NO", separe = "NO";
                            try {
                                if (ndPedido.getIdFactura() != null) {
                                    pedido = "SI";
                                }
                            } catch (Exception e) {
                                Logs.error(e);
                            }

                            try {
                                if (ndSepare.getIdFactura() != null) {
                                    separe = "SI";
                                }
                            } catch (Exception e) {
                                Logs.error(e);
                            }

                            if (pedido.equals("NO") && separe.equals("NO")) {
                                String cant = instancias.getSql().getCantidadProductos(cod);
                                if (cant != null) {
                                    cant = cant.replace(",", ".");
                                    double cantidadActual = Double.parseDouble(cant);
                                    cantidadActual = cantidadActual - cant2;
                                    String cantidadFinal = String.valueOf(df.format(cantidadActual)).replace(".", ",");
                                    instancias.getSql().modificarCantidadesDetalleProductos(cod, cantidadFinal);
                                }
                            }
                        }
                    }
                    // FIN DE DESCONTAR DEL INVENTARIO SEPARADO // 

                    double cantidad, cantPlanSepare;
                    double cantPedido;
                    double cantOrden;
                    double inventario;
                    double fisicoInventario;
                    double costeo;

                    try {
                        cantidad = Double.parseDouble(producto.getVentas().replace(",", "."));
                    } catch (Exception e) {
                        cantidad = 0;
                    }

                    try {
                        cantPedido = Double.parseDouble(producto.getPedidos().replace(",", "."));
                    } catch (Exception e) {
                        cantPedido = 0;
                    }

                    try {
                        cantPlanSepare = Double.parseDouble(producto.getPlanSepare().replace(",", "."));
                    } catch (Exception e) {
                        cantPlanSepare = 0;
                    }

                    try {
                        cantOrden = Double.parseDouble(producto.getOrdenServicio().replace(",", "."));
                    } catch (Exception e) {
                        cantOrden = 0;
                    }

                    try {
                        inventario = Double.parseDouble(producto.getInventario().replace(",", "."));
                    } catch (Exception e) {
                        inventario = 0;
                    }

                    try {
                        fisicoInventario = Double.parseDouble(producto.getFisicoInventario().replace(",", "."));
                    } catch (Exception e) {
                        fisicoInventario = Double.parseDouble(producto.getInventario().replace(",", "."));
                    }
                    
//                    try {
//                        costeo = Double.parseDouble(producto.getCosteo().replace(",", "."));
//                    } catch (Exception e) {
//                        costeo = 0;
//                    }
//                    
//                    String codigoPreparacion = instancias.getSql().tipoProductoPreparacion(producto.getIdSistema(),"COSTEO");
//                    if(codigoPreparacion.equals("COSTEO")){
//                       costeo = costeo - cant2;
//                       instancias.getSql().modificarInventario("costeo", String.valueOf(df.format(costeo)).replace(".", ","), tblProductos.getValueAt(i, 32).toString(), baseUtilizada);
//                    }
                    
                    
                    inventario = inventario - cant2;
                    fisicoInventario = fisicoInventario - cant2;
                    cantPedido = cantPedido - cant2;
                    cantOrden = cantOrden - cant2;
                    cantPlanSepare = cantPlanSepare - cant2;
                    double total = cantidad + cant2;

                    String total1 = String.valueOf(df.format(total)).replace(".", ",");
                    String inventario1 = String.valueOf(df.format(inventario)).replace(".", ",");
                    String fisicoInventario1 = String.valueOf(df.format(fisicoInventario)).replace(".", ",");
                    String cantPedido1 = String.valueOf(df.format(cantPedido)).replace(".", ",");
                    String cantOrden1 = String.valueOf(df.format(cantOrden)).replace(".", ",");
                    String cantPlanSepare1 = String.valueOf(df.format(cantPlanSepare)).replace(".", ",");

                    instancias.getSql().modificarInventario("ventas", total1, tblProductos.getValueAt(i, 32).toString(), baseUtilizada);
//                    instancias.getSql().modificarInventario("ventas", total1, tblProductos.getValueAt(i, 32).toString(), baseUtilizada);
                    instancias.getSql().modificarInventario("inventario", inventario1, tblProductos.getValueAt(i, 32).toString(), baseUtilizada);

                    String pedido = "NO", separe = "NO", orden = "NO";

                    try {
                        if (nodoOrdenServicio != null) {
                            orden = "SI";
                        }
                    } catch (Exception e) {
                    }

                    try {
                        if (ndPedido.getIdFactura() != null) {
                            pedido = "SI";
                        }
                    } catch (Exception e) {
                    }

                    try {
                        if (ndSepare.getIdFactura() != null) {
                            separe = "SI";
                        }
                    } catch (Exception e) {
                    }

                    if (pedido.equals("SI") || separe.equals("SI") || orden.equals("SI") || trasladoBod.equals("SI")) {
                        if (pedido.equals("SI")) {
                            instancias.getSql().modificarInventario("pedidos", cantPedido1, tblProductos.getValueAt(i, 32).toString(), baseUtilizada);
                        }

                        if (separe.equals("SI")) {
                            instancias.getSql().modificarInventario("planSepare", cantPlanSepare1, tblProductos.getValueAt(i, 32).toString(), baseUtilizada);
                        }

                        if (orden.equals("SI")) {
                            instancias.getSql().modificarInventario("ordenServicio", cantOrden1, tblProductos.getValueAt(i, 32).toString(), baseUtilizada);
                        }

                    } else {
                        if (descontarFisicoInventario.equals("SI")) {
                            instancias.getSql().modificarInventario("fisicoInventario", fisicoInventario1, tblProductos.getValueAt(i, 32).toString(), baseUtilizada);
                        }
                    }

                }

                descontarFisicoInventario = "SI";
                trasladoBod = "NO";

                try {
                    if ((Boolean) datos[54] && instancias.getConfiguraciones().isRestaurante()) {
                        int turno1 = Integer.parseInt(instancias.getSql().getTurno()) + 1;
                        if (turno1 > 100) {
                            turno1 = 1;
                        }

                        instancias.getSql().aumentarTurno(String.valueOf(turno1));
                        txtTurno.setText(String.valueOf(turno1));
                        instancias.getMaestra().setTurno(String.valueOf(turno1));
                        instancias.getMaestra().actualizarTurno();
                        instancias.getPedido().consultarMaestros();
                    }
                } catch (Exception e) {
                    Logs.error(e);
                }

                //PROCESO GUARDAR CUENTA POR COBRAR
                if (!txtFechaFactura.getText().equals(txtVencimiento.getText())) {
                    if (txtDiasPlazo.getText().equals("")) {
                        txtDiasPlazo.setText("0");
                    }

                    boolean cuotas = false;
                    if (facturaCredito) {
                        cuotas = true;
                    }

                    String tipoCxc = "FACT";
                    if (tipo.equals("separe")) {
                        tipoCxc = "SEPARE";
                    }

                    Object[] vectCxc = {factura, tipoCxc, "PEND", "", big.getMoneda(txtTotal.getText().replace("Total: ", "")), txtDiasPlazo.getText(),
                        metodos.fechaConsulta(txtVencimiento.getText()), instancias.getUsuario(), instancias.getTerminal(), cuotas, factura2};

                    ndCxc nodoCxc = metodos.llenarCxc(vectCxc);

                    if (!instancias.getSql().agregarCxc(nodoCxc)) {
                       if(showMsg){
                            metodos.msgError(null, "Hubo un problema al guardar la factura en cartera");
                       }else{
                            Logs.error("Hubo un problema al guardar la factura en cartera");
                       }

                    }
                }

            } else if (tipo.equals("cotizacion")) {

                ndCotizacion nodo = instancias.getSql().getDatosCotizacion(factura);

                for (int i = 0; i < tblProductos.getRowCount(); i++) {
                    if (!tblProductos.getValueAt(i, 16).equals("REALIZADO")) {
                        Object[] vector = {factura, txtIdSistema.getText(), vendedor, "", metodos.fechaConsulta(metodosGenerales.fecha()), metodos.fechaConsulta(txtVencimiento.getText()),
                            instancias.getEfectivoDevuelta(), instancias.getNcDevuelta(), instancias.getChequeDevuelta(), instancias.getTarjetaDevuelta(),
                            big.getMoneda(txtTotal.getText().replace("Total: ", "")), big.getMoneda(txtTotalDescuentos.getText()),
                            big.getMoneda(txtTotalIva.getText()), big.getMoneda(txtSubTotal.getText()), cotizacionesAsociadas,
                            factura.replace(tip + "-", ""), false, "", !txtFechaFactura.getText().equals(txtVencimiento.getText()),
                            "", instancias.getUsuario(), big.getMoneda(txtRiva.getText()), big.getMoneda("0"), big.getMoneda(txtRtf.getText()), big.getMonedaToDouble(por),
                            txtObservaciones.getText(), false, "", false, "", "", metodos.fechaConsulta(metodos.sumarFecha(txtVencimiento.getText(), cantDias)), ter,
                            estado, "", instancias.getDevuelta(), factura, instancias.getResolucion(), metodos.fechaConsulta(metodosGenerales.fecha()), "", "",
                            copago, txtPlaca1.getText(), "", "", tblProductos.getValueAt(i, 31), "",
                            "", "", tblProductos.getValueAt(i, 32), big.getMoneda((String) tblProductos.getValueAt(i, 2)),
                            tblProductos.getValueAt(i, 13).toString().replace(",", "."), big.getMoneda((String) tblProductos.getValueAt(i, 6)),
                            big.getMoneda((String) tblProductos.getValueAt(i, 9)), big.getMoneda((String) tblProductos.getValueAt(i, 33)),
                            big.getMoneda((String) tblProductos.getValueAt(i, 4)), "", big.getMoneda((String) tblProductos.getValueAt(i, 14)), "",
                            big.getBigDecimal(tblProductos.getValueAt(i, 5).toString().replace(",", ".")).setScale(2, RoundingMode.DOWN) + "",
                            tblProductos.getValueAt(i, 1), tblProductos.getValueAt(i, 12) + "", formatVal(big.formatDouble(big.getMonedaToDouble(tblProductos.getValueAt(i, 3).toString().replace(".", "")))),   //tblProductos.getValueAt(i, 3).toString().replace(",", "."),
                            "PENDIENTE", tblProductos.getValueAt(i, 7), tblProductos.getValueAt(i, 19), big.getMoneda(tblProductos.getValueAt(i, 20).toString()),
                            tblProductos.getValueAt(i, 21).toString(), txtBodega.getText()
                        };
                        
                        nodo = metodos.llenarCotizacion(vector);

                        if (!instancias.getSql().agregarCotizacion(nodo)) {

                            boolean noPuedaGuardar = false;

                            instancias.getSql().eliminarCotizacion(factura);
                            while (!noPuedaGuardar) {
                                noPuedaGuardar = instancias.getSql().eliminarCotizacion(factura);
                            }
                           if(showMsg){
                                metodos.msgError(null, "Error al guardar la cotización");
                           }else{
                                Logs.error("Error al guardar la cotización");
                           }

                            return null;
                        }
                    }
                }
            } else if (tipo.equals("orden")) {

                ndOServicio1 nodo = instancias.getSql().getDatosOServicio1(factura);
                factura2 = factura;

                for (int i = 0; i < tblProductos.getRowCount(); i++) {
                    if (!tblProductos.getValueAt(i, 16).equals("REALIZADO")) {

                        Object[] vector = {factura, txtIdSistema.getText(), vendedor, "", metodos.fechaConsulta(metodosGenerales.fecha()), metodos.fechaConsulta(txtVencimiento.getText()),
                            instancias.getEfectivoDevuelta(), instancias.getNcDevuelta(), instancias.getChequeDevuelta(), instancias.getTarjetaDevuelta(),
                            big.getMoneda(txtTotal.getText().replace("Total: ", "")), big.getMoneda(txtTotalDescuentos.getText()),
                            big.getMoneda(txtTotalIva.getText()), big.getMoneda(txtSubTotal.getText()), "",
                            factura.replace(tip + "-", ""), false, "", !txtFechaFactura.getText().equals(txtVencimiento.getText()),
                            "", instancias.getUsuario(), big.getMoneda(txtRiva.getText()), big.getMoneda("0"), big.getMoneda(txtRtf.getText()), big.getMonedaToDouble(por),
                            txtObservaciones.getText(), false, "", false, "", "", metodos.fechaConsulta(metodos.sumarFecha(txtVencimiento.getText(), cantDias)), ter,
                            "PENDIENTE", "", instancias.getDevuelta(), factura, instancias.getResolucion(), metodos.fechaConsulta(metodosGenerales.fecha()), "", "",
                            BigDecimal.ZERO, txtPlaca1.getText(), "", "", "", "", "", "", tblProductos.getValueAt(i, 32), big.getMoneda((String) tblProductos.getValueAt(i, 2)),
                            tblProductos.getValueAt(i, 13).toString().replace(",", "."), big.getMoneda((String) tblProductos.getValueAt(i, 6)),
                            big.getMoneda((String) tblProductos.getValueAt(i, 9)), big.getMoneda((String) tblProductos.getValueAt(i, 33)),
                            big.getMoneda((String) tblProductos.getValueAt(i, 4)), "", big.getMoneda((String) tblProductos.getValueAt(i, 14)), "",
                            big.getBigDecimal(tblProductos.getValueAt(i, 5).toString().replace(",", ".")).setScale(2, RoundingMode.DOWN) + "",
                            tblProductos.getValueAt(i, 1), tblProductos.getValueAt(i, 12) + "", formatVal(big.formatDouble(big.getMonedaToDouble(tblProductos.getValueAt(i, 3).toString().replace(".", "")))),//tblProductos.getValueAt(i, 3).toString().replace(",", "."),
                            "PENDIENTE", tblProductos.getValueAt(i, 7), tblProductos.getValueAt(i, 19), big.getMoneda(tblProductos.getValueAt(i, 20).toString()),
                            tblProductos.getValueAt(i, 21).toString(), txtBodega.getText()
                        };

                        nodo = metodos.llenarOServicio1(vector);

                        if (!instancias.getSql().agregarOServicio1(nodo)) {

                            boolean noPuedaGuardar = false;

                            instancias.getSql().eliminarOServicio(factura);
                            while (!noPuedaGuardar) {
                                noPuedaGuardar = instancias.getSql().eliminarOServicio(factura);
                            }
                            if(showMsg){
                                metodos.msgError(null, "Error al guardar la orden de servicio");
                            }else{
                                Logs.error("Error al guardar la orden de servicio");
                            }

                            return null;
                        }

                        ndProducto producto = instancias.getSql().getDatosProducto(tblProductos.getValueAt(i, 32).toString(), baseUtilizada);

                        double cantidad;
                        double fisicoInventario;

                        try {
                            cantidad = Double.parseDouble(producto.getOrdenServicio().replace(",", "."));
                        } catch (Exception e) {
                            cantidad = 0;
                        }

                        try {
                            fisicoInventario = Double.parseDouble(producto.getFisicoInventario().replace(",", "."));
                        } catch (Exception e) {
                            fisicoInventario = Double.parseDouble(producto.getInventario().replace(",", "."));
                        }

                        double cant2;
                        try {
                            cant2 = Double.parseDouble(tblProductos.getValueAt(i, 13).toString());
                        } catch (Exception e) {
                            cant2 = Double.parseDouble(tblProductos.getValueAt(i, 13).toString().substring(0, tblProductos.getValueAt(i, 13).toString().length() - 2));
                        }

                        fisicoInventario = fisicoInventario - cant2;
                        double total = cantidad + cant2;

                        String total1 = String.valueOf(df.format(total)).replace(".", ",");
                        String fisicoInventario1 = String.valueOf(df.format(fisicoInventario)).replace(".", ",");
                    
                        instancias.getSql().modificarInventario("ordenServicio", total1, tblProductos.getValueAt(i, 32).toString(), baseUtilizada);
                        instancias.getSql().modificarInventario("fisicoInventario", fisicoInventario1, tblProductos.getValueAt(i, 32).toString(), baseUtilizada);

                    }
                }

                //GUARDAR ORDEN SERVICIO
                Object[] vector2 = {factura, txtPlaca.getText(), txtTipoVehiculo.getText(), txtModelo.getText(), txtNumChasis.getText(),
                    metodos.fechaConsulta(metodosGenerales.fecha()), txtMarca.getText(), txtKm.getText(), txtMotor.getText(), txtColor.getText(), txtProblema.getText()};

                ndOServicio nodoOrden = metodos.llenarOServicio(vector2);
                if (!instancias.getSql().agregarOServicio(nodoOrden)) {
                    if(showMsg){
                        metodos.msgError(null, "Hubo un problema al guardar la orden de servicio");
                    }else{
                        Logs.error("Hubo un problema al guardar la orden de servicio");
                    }

                    return null;
                }

                int slz = 1;
                for (int i = 0; i < tblArticulos.getRowCount(); i++) {
                    if ((Boolean) tblArticulos.getValueAt(i, 2)) {

                        String id = tblArticulos.getValueAt(i, 0).toString();
                        String nombre = tblArticulos.getValueAt(i, 1).toString();
                        Boolean inventario = (Boolean) tblArticulos.getValueAt(i, 2);
                        String problemasDerecha = tblArticulos.getValueAt(i, 3).toString();
                        String problemasIzquierda = tblArticulos.getValueAt(i, 4).toString();
                        String observaciones = tblArticulos.getValueAt(i, 5).toString();

                        instancias.getSql().agregarDetalleOrdenServicio(factura, id, nombre, inventario, problemasDerecha, problemasIzquierda, observaciones, slz);
                        slz++;
                    }
                }

            } else if (tipo.equals("pedido")) {
                ndPedido nodo = null;
                //se comenta ya que se debe garantizar el consecutivo desde la tabla
    //            nodo = instancias.getSql().getDatosPedido(factura);
    //
    //            if (nodo.getIdFactura() != null) {
    //                if (!instancias.getSql().aumentarConsecutivo("PEDIDO", Integer.parseInt((String) instancias.getSql().getNumConsecutivo("PEDIDO")[0]) + 1)) {
    //                    if(showMsg){
    //                        metodos.msgError(null, "Error al aumentar consecutivo del pedido");
    //                    }else{
    //                        Logs.error("Error al aumentar consecutivo del pedido");
    //                    }
    //                    
    //                }
    //                factura = "PEDIDO-" + instancias.getSql().getNumConsecutivoFact("PEDIDO")[0].toString();
    //            }

                String bodega = txtBodega.getText();
                if (!instancias.getConfiguraciones().isInventarioBodegas()) {
                    bodega = "123-22";
                }

                for (int i = 0; i < tblProductos.getRowCount(); i++) {
                    if (!tblProductos.getValueAt(i, 16).equals("REALIZADO")) {

//                        if (instancias.getConfiguraciones().isRestaurante()) {
                          Map cadena = new HashMap();  
//                            String cadena = "";
                            try {
                              
                                 cadena = (Map) tblProductos.getValueAt(i, 21);
//                                cadena = tblProductos.getValueAt(i, 21).toString();
                                 //se agrega prepapracion en este punto ya que los pedidos no lo hacian
                                 String temporalComanda=factura;
                                 if(tip.equals("PEDIDO")){
                                    temporalComanda="PED-"+i; 
                                 }
                                 modificarPreparacion(temporalComanda, factura, cadena); 
                            } catch (Exception e) {
                            }

                            if (instancias.getSql().getDatosProducto(tblProductos.getValueAt(i, 32).toString(), baseUtilizada).getUsuario().equalsIgnoreCase("FACTURA")) {
                               
                                instancias.getArmado().facturarPlato(tblProductos.getValueAt(i, 32).toString(), tblProductos.getValueAt(i, 3).toString(),
                                        cadena, "fisicoInventarioPedido", bodega,"","");
                            }
                            agregarRegistrosComandas(i, turno, baseUtilizada, "", factura, "", "");
//                        }

                        Object[] vector = {factura, txtIdSistema.getText(), vendedor, "", metodos.fechaConsulta(metodosGenerales.fechaHora()), metodos.fechaConsulta(txtVencimiento.getText()),
                            big.getMoneda(txtTotal.getText().replace("Total: ", "")), instancias.getNcDevuelta(), instancias.getChequeDevuelta(), instancias.getTarjetaDevuelta(),
                            big.getMoneda(txtTotal.getText().replace("Total: ", "")), big.getMoneda(txtTotalDescuentos.getText()),
                            big.getMoneda(txtTotalIva.getText()), big.getMoneda(txtSubTotal.getText()), cotizacionesAsociadas,
                            factura.replace(tip + "-", ""), false, "", !txtFechaFactura.getText().equals(txtVencimiento.getText()),
                            "", instancias.getUsuario(), big.getMoneda(txtRiva.getText()), big.getMoneda("0"), big.getMoneda(txtRtf.getText()), big.getMonedaToDouble(por),
                            txtObservaciones.getText(), false, "", false, "", "", metodos.fechaConsulta(metodos.sumarFecha(txtVencimiento.getText(), cantDias)), ter,
                            estado, "", instancias.getDevuelta(), factura, instancias.getResolucion(), metodos.fechaConsulta(metodosGenerales.fecha()), "", "",
                            copago, txtPlaca1.getText(), txtNombre.getText(), "", tblProductos.getValueAt(i, 31), "",
                            "", "", tblProductos.getValueAt(i, 32), big.getMoneda((String) tblProductos.getValueAt(i, 2)),
                            tblProductos.getValueAt(i, 13).toString().replace(",", "."), big.getMoneda((String) tblProductos.getValueAt(i, 6)),
                            big.getMoneda((String) tblProductos.getValueAt(i, 9)), big.getMoneda((String) tblProductos.getValueAt(i, 33)),
                            big.getMoneda((String) tblProductos.getValueAt(i, 4)), "", big.getMoneda((String) tblProductos.getValueAt(i, 14)), "",
                            big.getBigDecimal(tblProductos.getValueAt(i, 5).toString().replace(",", ".")).setScale(2, RoundingMode.DOWN) + "",
                            tblProductos.getValueAt(i, 1), tblProductos.getValueAt(i, 12) + "", formatVal(big.formatDouble(big.getMonedaToDouble(tblProductos.getValueAt(i, 3).toString().replace(".", "")))),//tblProductos.getValueAt(i, 3).toString().replace(",", "."),
                            "PENDIENTE", tblProductos.getValueAt(i, 7), tblProductos.getValueAt(i, 19), big.getMoneda(tblProductos.getValueAt(i, 20).toString()),
                            tblProductos.getValueAt(i, 21).toString(), txtBodega.getText(), tblProductos.getValueAt(i, 29), tblProductos.getValueAt(i, 27)
                        };

                        nodo = metodos.llenarPedido(vector);

                        if (!instancias.getSql().agregarPedido(nodo)) {
                            boolean noPuedaGuardar = false;

//                            instancias.getSql().eliminarPedido(factura);
//                            while (!noPuedaGuardar) {
//                                noPuedaGuardar = instancias.getSql().eliminarPedido(factura);
//                            }

                            if(showMsg){
                                metodos.msgError(null, "Error al guardar el pedido");
                            }else{
                                Logs.error("Error al guardar el pedido");
                            }

                            return null;
                        }
                    }

                    ndProducto producto = instancias.getSql().getDatosProducto(tblProductos.getValueAt(i, 32).toString(), baseUtilizada);
                    double cantidad;
                    double fisicoInventario;

                    try {
                        cantidad = Double.parseDouble(producto.getPedidos().replace(",", "."));
                    } catch (Exception e) {
                        cantidad = 0;
                    }

                    try {
                        fisicoInventario = Double.parseDouble(producto.getFisicoInventario().replace(",", "."));
                    } catch (Exception e) {
                        fisicoInventario = Double.parseDouble(producto.getInventario().replace(",", "."));
                    }

                    fisicoInventario = fisicoInventario - Double.parseDouble(tblProductos.getValueAt(i, 13).toString());
                    double total = cantidad + Double.parseDouble(tblProductos.getValueAt(i, 13).toString());

                    String total1 = String.valueOf(df.format(total)).replace(".", ",");
                    String fisicoInventario1 = String.valueOf(df.format(fisicoInventario)).replace(".", ",");
                 
                    instancias.getSql().modificarInventario("pedidos", total1, tblProductos.getValueAt(i, 32).toString(), baseUtilizada);
                    instancias.getSql().modificarInventario("fisicoInventario", fisicoInventario1, tblProductos.getValueAt(i, 32).toString(), baseUtilizada);

                    // DESCONTAR DEL INVENTARIO DETALLADO //
                    String cod = "";
                    try {
                        cod = tblProductos.getValueAt(i, 29).toString();
                    } catch (Exception e) {
                    }

                    if (!cod.equals("")) {
                        String tipo = "";

                        if (producto.getTipoProducto() != null) {
                            if (producto.getTipoProducto().equals("IMEI")) {
                                tipo = "Imei";
                            } else if (producto.getTipoProducto().equals("Fecha/Lote")) {
                                tipo = "Fecha/Lote";
                            } else if (producto.getTipoProducto().equals("Color")) {
                                tipo = "Color";
                            } else if (producto.getTipoProducto().equals("Serial")) {
                                tipo = "Serial";
                            } else if (producto.getTipoProducto().equals("Talla")) {
                                tipo = "Talla";
                            } else if (producto.getTipoProducto().equals("ColorTalla")) {
                                tipo = "ColorTalla";
                            } else if (producto.getTipoProducto().equals("SerialColor")) {
                                tipo = "SerialColor";
                            } else {
                                tipo = "";
                            }
                        }

                        if (tipo.equals("Imei") || tipo.equals("Serial") || tipo.equals("SerialColor")) {
                            instancias.getSql().modificarEstadoDetalleProductos(cod, "PRESTADO");
                        } else {
                            Double cantidadActual = Double.parseDouble(instancias.getSql().getCantidadProductos(cod).replace(",", "."));
                            cantidadActual = cantidadActual - Double.parseDouble(tblProductos.getValueAt(i, 13).toString());
                            String cantidadFinal = String.valueOf(df.format(cantidadActual)).replace(".", ",");
                            instancias.getSql().modificarCantidadesDetalleProductos(cod, cantidadFinal);
                        }
                    }
                    // FIN DE DESCONTAR DEL INVENTARIO SEPARADO // 
                }

                try {
                    if ((Boolean) datos[54] && instancias.getConfiguraciones().isRestaurante()) {
                        int turno1 = Integer.parseInt(instancias.getSql().getTurno()) + 1;
                        if (turno1 > 100) {
                            turno1 = 1;
                        }

                        instancias.getSql().aumentarTurno(String.valueOf(turno1));
                        txtTurno.setText(String.valueOf(turno1));
                        instancias.getMaestra().setTurno(String.valueOf(turno1));
                        instancias.getMaestra().actualizarTurno();
                        instancias.getFactura().consultarMaestros();
                    }
                } catch (Exception e) {
                    Logs.error(e);
                }

            } else if (tipo.equals("separe")) {
                   ndPlanSepare nodo = null;
                   //se comenta ya que se  debe garantizar el consecutivo desde la tabla de consecutivos
    //            ndPlanSepare nodo = instancias.getSql().getDatosPlanSepare(factura);
    //
    //            if (nodo.getIdFactura() != null) {
    //                if (!instancias.getSql().aumentarConsecutivo("SEPARE", Integer.parseInt((String) instancias.getSql().getNumConsecutivo("SEPARE")[0]) + 1)) {
    //                    metodos.msgError(null, "Hubo un problema al aumentar el consecutivo del plan separe");
    //                }
    //                factura = "SEPARE-" + instancias.getSql().getNumConsecutivoFact("SEPARE")[0].toString();
    //            }

                for (int i = 0; i < tblProductos.getRowCount(); i++) {
                    if (!tblProductos.getValueAt(i, 16).equals("REALIZADO")) { 
                        Object[] vector = {factura, txtIdSistema.getText(), vendedor, "", metodos.fechaConsulta(metodosGenerales.fecha()),
                            metodos.fechaConsulta(txtVencimiento.getText()),
                            instancias.getEfectivoDevuelta(), instancias.getNcDevuelta(), instancias.getChequeDevuelta(), instancias.getTarjetaDevuelta(),
                            big.getMoneda(txtTotal.getText().replace("Total: ", "")), big.getMoneda(txtTotalDescuentos.getText()),
                            big.getMoneda(txtTotalIva.getText()), big.getMoneda(txtSubTotal.getText()), cotizacionesAsociadas,
                            factura.replace(tip + "-", ""), false, "", !txtFechaFactura.getText().equals(txtVencimiento.getText()),
                            "", instancias.getUsuario(), big.getMoneda(txtRiva.getText()), big.getMoneda("0"), big.getMoneda(txtRtf.getText()), big.getMonedaToDouble(por),
                            txtObservaciones.getText(), false, "", false, "", "", metodos.fechaConsulta(metodos.sumarFecha(txtVencimiento.getText(), cantDias)), ter,
                            estado, "", instancias.getDevuelta(), factura, instancias.getResolucion(), metodos.fechaConsulta(metodosGenerales.fecha()), "", "",
                            copago, txtPlaca1.getText(), "", "", tblProductos.getValueAt(i, 31), "",
                            "", "", tblProductos.getValueAt(i, 32), big.getMoneda((String) tblProductos.getValueAt(i, 2)),
                            tblProductos.getValueAt(i, 13).toString().replace(",", "."), big.getMoneda((String) tblProductos.getValueAt(i, 6)),
                            big.getMoneda((String) tblProductos.getValueAt(i, 9)), big.getMoneda((String) tblProductos.getValueAt(i, 33)),
                            big.getMoneda((String) tblProductos.getValueAt(i, 4)), "", big.getMoneda((String) tblProductos.getValueAt(i, 14)), "",
                            big.getBigDecimal(tblProductos.getValueAt(i, 5).toString().replace(",", ".")).setScale(2, RoundingMode.DOWN) + "",
                            tblProductos.getValueAt(i, 1), tblProductos.getValueAt(i, 12) + "",formatVal(big.formatDouble(big.getMonedaToDouble(tblProductos.getValueAt(i, 3).toString().replace(".", "")))), //tblProductos.getValueAt(i, 3).toString().replace(",", "."),
                            "PENDIENTE", tblProductos.getValueAt(i, 7), tblProductos.getValueAt(i, 19),
                            big.getMoneda(tblProductos.getValueAt(i, 20).toString()), tblProductos.getValueAt(i, 21).toString(), tblProductos.getValueAt(i, 27),
                            tblProductos.getValueAt(i, 29), txtBodega.getText()
                        };
                        

                        nodo = metodos.llenarPlanSepare(vector);

                        if (!instancias.getSql().agregarPlanSepare(nodo)) {

                            boolean noPuedaGuardar = false;

//                            instancias.getSql().eliminarSepare(factura);
//                            while (!noPuedaGuardar) {
//                                noPuedaGuardar = instancias.getSql().eliminarSepare(factura);
//                            }
                            if(showMsg){
                                metodos.msgError(null, "Hubo un problema al guardar el plan separe");
                            }else{
                                Logs.error("Hubo un problema al guardar el plan separe");
                            }

                            return null;
                        }
                    }

                    ndProducto producto = instancias.getSql().getDatosProducto(tblProductos.getValueAt(i, 32).toString(), baseUtilizada);
                    double cantidad;
                    double fisicoInventario;

                    try {
                        cantidad = Double.parseDouble(producto.getPlanSepare().replace(",", "."));
                    } catch (Exception e) {
                        cantidad = 0;
                    }

                    try {
                        fisicoInventario = Double.parseDouble(producto.getFisicoInventario().replace(",", "."));
                    } catch (Exception e) {
                        fisicoInventario = Double.parseDouble(producto.getInventario().replace(",", "."));
                    }

                    double cant2 = Double.parseDouble(tblProductos.getValueAt(i, 13).toString().replace(",", "."));
                    fisicoInventario = fisicoInventario - cant2;
                    double total = cantidad + cant2;

                    String total1 = String.valueOf(df.format(total)).replace(".", ",");
                    String fisicoInventario1 = String.valueOf(df.format(fisicoInventario)).replace(".", ",");
         
                    instancias.getSql().modificarInventario("planSepare", total1, tblProductos.getValueAt(i, 32).toString(), baseUtilizada);
                    instancias.getSql().modificarInventario("fisicoInventario", fisicoInventario1, tblProductos.getValueAt(i, 32).toString(), baseUtilizada);

                    // DESCONTAR DEL INVENTARIO DETALLADO //
                    if (instancias.getConfiguraciones().isProductosSerial()) {
                        String cod = "";
                        try {
                            cod = tblProductos.getValueAt(i, 29).toString();
                        } catch (Exception e) {
                        }

                        if (!cod.equals("")) {

                            String tipo = "";

                            if (producto.getTipoProducto() != null) {
                                if (producto.getTipoProducto().equals("IMEI")) {
                                    tipo = "Imei";
                                } else if (producto.getTipoProducto().equals("Fecha/Lote")) {
                                    tipo = "Fecha/Lote";
                                } else if (producto.getTipoProducto().equals("Color")) {
                                    tipo = "Color";
                                } else if (producto.getTipoProducto().equals("Serial")) {
                                    tipo = "Serial";
                                } else if (producto.getTipoProducto().equals("Talla")) {
                                    tipo = "Talla";
                                } else if (producto.getTipoProducto().equals("ColorTalla")) {
                                    tipo = "ColorTalla";
                                } else if (producto.getTipoProducto().equals("SerialColor")) {
                                    tipo = "SerialColor";
                                } else {
                                    tipo = "";
                                }
                            }

                            if (tipo.equals("Imei") || tipo.equals("Serial") || tipo.equals("SerialColor")) {
                                instancias.getSql().modificarEstadoDetalleProductos(cod, "SEPARADO");
                            } else {
                                Double cantidadActual = Double.parseDouble(instancias.getSql().getCantidadProductos(cod).replace(",", "."));
                                cantidadActual = cantidadActual - cant2;
                                String cantidadFinal = String.valueOf(df.format(cantidadActual)).replace(".", ",");
                                instancias.getSql().modificarCantidadesDetalleProductos(cod, cantidadFinal);
                            }
                        }
                    }
                    // FIN DE DESCONTAR DEL INVENTARIO SEPARADO // 

                }

                //PROCESO GUARDAR CUENTA POR COBRAR
                if (!txtFechaFactura.getText().equals(txtVencimiento.getText())) {
                    if (txtDiasPlazo.getText().equals("")) {
                        txtDiasPlazo.setText("0");
                    }

                    boolean cuotas = false;
                    if (facturaCredito) {
                        cuotas = true;
                    }

                    String tipoCxc = "SEPARE";

                    Object[] vectCxc = {factura, tipoCxc, "PEND", "", big.getMoneda(txtTotal.getText().replace("Total: ", "")), txtDiasPlazo.getText(),
                        metodos.fechaConsulta(txtVencimiento.getText()), instancias.getUsuario(), instancias.getTerminal(), cuotas, factura};

                    ndCxc nodoCxc = metodos.llenarCxc(vectCxc);

                    if (!instancias.getSql().agregarCxc(nodoCxc)) {
                        if(showMsg){
                                metodos.msgError(null, "Hubo un problema al guardar la factura en cartera");
                        }else{
                            Logs.error("Hubo un problema al guardar la factura en cartera");
                        }

                    }
                }
            } else if (tipo.equals("mesa") && !lbTitulo.getText().equals("DOMICILIO")) {
                ndCongelada nodo = null;
    //            ndCongelada nodo = instancias.getSql().getDatosCongelada(factura);
    //
    //            if (nodo.getIdFactura() != null) {
    //                if (!instancias.getSql().aumentarConsecutivo("CONGELADA", Integer.parseInt((String) instancias.getSql().getNumConsecutivo("CONGELADA")[0]) + 1)) {
    //                    metodos.msgError(null, "Hubo un problema al aumentar el consecutivo de la congelada");
    //                }
    //                factura = "CONGELADA-" + instancias.getSql().getNumConsecutivoFact("CONGELADA")[0].toString();
    //            }

                String bodega = txtBodega.getText();
                if (!instancias.getConfiguraciones().isInventarioBodegas()) {
                    bodega = "123-22";
                }

                for (int i = 0; i < tblProductos.getRowCount(); i++) {
                 
                    if (!tblProductos.getValueAt(i, 16).equals("REALIZADO")) {
                        
//                        String preparacion = "";
                        Map preparacion = new HashMap();

                        try {
                        
                            if(!tblProductos.getValueAt(i, 21).toString().equals("")){
                               preparacion = (Map) tblProductos.getValueAt(i, 21);
                            }
                            
//                            preparacion = tblProductos.getValueAt(i, 21).toString();
                        } catch (Exception e) {
                            Logs.log("Error preparacion "+e.getMessage());
                        
                        }
                      
                        if (instancias.getSql().getDatosProducto(tblProductos.getValueAt(i, 32).toString(), baseUtilizada).getUsuario().equalsIgnoreCase("FACTURA")) {
                         
                            instancias.getArmado().facturarPlato(tblProductos.getValueAt(i, 32).toString(), tblProductos.getValueAt(i, 3).toString(),
                                    preparacion, "fisicoInventario", bodega, "", "");
                        }
                        //AL GUARDAR EN MESA - RESTAURANTE
                        Object[] vector = {factura, txtIdSistema.getText(), vendedor, "", metodos.fechaConsulta(metodosGenerales.fecha()),
                            metodos.fechaConsulta(txtVencimiento.getText()),
                            instancias.getEfectivoDevuelta(), instancias.getNcDevuelta(), instancias.getChequeDevuelta(), instancias.getTarjetaDevuelta(),
                            big.getMoneda(txtTotal.getText().replace("Total: ", "")), big.getMoneda(txtTotalDescuentos.getText()),
                            big.getMoneda(txtTotalIva.getText()), big.getMoneda(txtSubTotal.getText()), cotizacionesAsociadas,
                            factura.replace(tip + "-", ""), false, "", !txtFechaFactura.getText().equals(txtVencimiento.getText()),
                            "", instancias.getUsuario(), big.getMoneda(txtRiva.getText()), big.getMoneda("0"), big.getMoneda(txtRtf.getText()), big.getMonedaToDouble(por),
                            txtObservaciones.getText(), false, "", false, "", "", metodos.fechaConsulta(metodos.sumarFecha(txtVencimiento.getText(), cantDias)), ter,
                            estado, "", instancias.getDevuelta(), factura2, instancias.getResolucion(), metodos.fechaConsulta(metodosGenerales.fecha()), "", "",
                            copago, txtPlaca1.getText(), "", "", tblProductos.getValueAt(i, 31), "",
                            "PLATO-" + i, congelada, tblProductos.getValueAt(i, 32), big.getMoneda((String) tblProductos.getValueAt(i, 2)),
                            tblProductos.getValueAt(i, 13).toString().replace(",", "."), big.getMoneda((String) tblProductos.getValueAt(i, 6)),
                            big.getMoneda((String) tblProductos.getValueAt(i, 9)), big.getMoneda((String) tblProductos.getValueAt(i, 33)),
                            big.getMoneda((String) tblProductos.getValueAt(i, 4)), "", big.getMoneda((String) tblProductos.getValueAt(i, 14)), "",
                            big.getBigDecimal(tblProductos.getValueAt(i, 5).toString().replace(",", ".")).setScale(2, RoundingMode.DOWN) + "",
                            tblProductos.getValueAt(i, 1), tblProductos.getValueAt(i, 12) + "", formatVal(big.formatDouble(big.getMonedaToDouble(tblProductos.getValueAt(i, 3).toString().replace(".", "")))), //tblProductos.getValueAt(i, 3).toString().replace(",", "."),
                            "PENDIENTE", tblProductos.getValueAt(i, 7), tblProductos.getValueAt(i, 19), big.getMoneda(tblProductos.getValueAt(i, 20).toString()),
                            preparacion.toString(), turno, tblProductos.getValueAt(i, 27), tblProductos.getValueAt(i, 29),
                            big.getMoneda(txtTotalImpoconsumo.getText()), tblProductos.getValueAt(i, 23).toString().replace(".", "").replace(",", "."),
                            big.getMoneda((String) tblProductos.getValueAt(i, 8)), txtBodega.getText(),tblProductos.getValueAt(i, 38).toString(),tblProductos.getValueAt(i, Identidad.Cant).toString().replace(",", ".")
                        };

                        nodo = metodos.llenarCongelada(vector);
                        
                      //if (!instancias.getSql().agregarCongelada(nodo)) {
                      
                        idComanda = manejoInsertUpdateCongelada(nodo);
                        if (idComanda.equals("null")) {
//                            SE COMENTA YA QUE SE SI OCURRE UN ERROR SE PIERDE TODO LO QUE ESTE REGISTRADO EN LA MESA
//                            boolean noPuedaGuardar = false;
//                            instancias.getSql().eliminarMesa(factura);
//                            while (!noPuedaGuardar) {
//                                noPuedaGuardar = instancias.getSql().eliminarMesa(factura);
//                            }

                            if(showMsg){
                                metodos.msgError(null, "Hubo un problema al guardar la factura");
                            }else{
                                Logs.error("Hubo un problema al guardar la factura");
                            }
                            return null;
                        }
                        tblProductos.setValueAt(idComanda, i, 38);
                    }
                    
                    //actualizo el id en la preparacion para asignar correctamente cuando se adicionan productos a la factura
                    if(!tblProductos.getValueAt(i, 31).toString().equals("")){
                        String [] agragdoId = new String[2]; 
                        agragdoId = tblProductos.getValueAt(i, 31).toString().split(";");
                        if(agragdoId.length>0){
                            if(agragdoId[0].equals("PRODUCTO-AGREGADO")){
                               int posicion = Integer.parseInt(agragdoId[1]);
                              
                               String idPreparada = instancias.getSql().getIdPreparacionAdicion(nodo.getProducto(),tblProductos.getValueAt(posicion, 38).toString(),factura,idComanda);
                               instancias.getSql().updatePreparacionAdiciones(nodo.getProducto(),tblProductos.getValueAt(posicion, 38).toString(),factura,idComanda,idPreparada);
                            }
                        }
                    }
                    //vamos a insertar en preparada el id de este agregado

                    String cadena = "";
                    boolean ingresoIngredientes= false; 
                    Map infDetalleProductosPrincipales = new HashMap();
                    try {
                        cadena = tblProductos.getValueAt(i, 21).toString();
                        if(cadena.equals("")){
                          String codigoPreparacion = instancias.getSql().tipoProductoPreparacion(nodo.getProducto(),"COSTEO");
                         if(!codigoPreparacion.equals("COSTEO")){
                            instancias.getSql().insertarPreparacion(factura,idComanda,nodo.getProducto());
                          }
                          
                          infDetalleProductosPrincipales = cargarPreparada(factura,idComanda,nodo.getProducto());
                          ingresoIngredientes = true;
                        }else{
                          infDetalleProductosPrincipales = (Map) tblProductos.getValueAt(i, 21);
                        }
                       
                    } catch (Exception e) {
                        Log.error("Error cadena  restaurante: ", e);
                    }

//                  if (!cadena.equals("")) {
                    if (!((ArrayList<Map>) infDetalleProductosPrincipales.get("ingredientes")).isEmpty() && !ingresoIngredientes) {
                        String opciones1 = "Con: ", ingredientes1 = "Sin: ", aderezos1 = "Aderezos: ";
                        String opciones2[], aderezos2[];

                        String observaciones = "";
                        try {
//                            observaciones = cadena.split("; ")[4];
                            observaciones = infDetalleProductosPrincipales.get("observaciones").toString();
                        } catch (Exception e) {
                            Log.error("Error observaciones restaurante: ", e);
                        }

//                        String opciones = cadena.split("; ")[3];
//                        String aderezos = cadena.split("; ")[1];
                        String sqlPreparacion=instancias.getSql().agregarPreparacionCabecera();  
                        ArrayList<Map> preparaciones = new ArrayList<Map>();
                        ArrayList<Map> aderezosL = new ArrayList<Map>();
                        ArrayList<Map> adiciones = new ArrayList<Map>();
                        String productoPrincipal;
                        String obser;
                        preparaciones = (ArrayList<Map>) infDetalleProductosPrincipales.get("ingredientes"); 
                        adiciones = (ArrayList<Map>) infDetalleProductosPrincipales.get("adiciones"); 
                        aderezosL = (ArrayList<Map>) infDetalleProductosPrincipales.get("aderezos"); 
                        productoPrincipal = infDetalleProductosPrincipales.get("producto").toString();
                        obser = infDetalleProductosPrincipales.get("observaciones").toString();
                        //INGRESAMOS LOS PRODUCTOS ESCOGIDOS EN LOS PRODUCTOS CON CAMBIO
//                        if (!opciones.equals("")) {
                        String aderezo="";
                        String comasql="";
                        if (!aderezosL.isEmpty()) {
                            aderezo="Aderezo: ";
                            String coma="";
                            for (Map adere : aderezosL) {
                              sqlPreparacion += coma+instancias.getSql().agregarPreparacion(nodo.getIdFactura(),idComanda,"aderezos", 
                                      adere.get("codigo").toString(), adere.get("descripcion").toString(), adere.get("cantidad").toString(), adere.get("estado").toString(), adere.get("posicion").toString(), productoPrincipal);
                              aderezo +=coma+adere.get("descripcion").toString();  
                              coma=", ";
                              comasql=",";
                            }
                        }
                        String adici="";
                        if (!adiciones.isEmpty()) {
                            adici="Adicion: ";
                            String coma="";
                            for (Map adicion : adiciones) {
                              sqlPreparacion += comasql+coma+instancias.getSql().agregarPreparacion(nodo.getIdFactura(),idComanda,"adiciones", 
                                      adicion.get("codigo").toString(), adicion.get("descripcion").toString(), adicion.get("cantidad").toString(), adicion.get("estado").toString(), adicion.get("posicion").toString(), productoPrincipal);
                              
                              adici +=coma+adicion.get("cantidad").toString()+" "+adicion.get("descripcion").toString();  
                              coma=", ";
                              comasql="";
                            }
                            comasql=",";
                        }
                        String ingredientes = "";
                        String sinIngredientes = "";
                        if (!preparaciones.isEmpty()) {
//                            opciones2 = opciones.split(", ");
//                            for (int k = 0; k < opciones2.length; k++) {
                                 String coma = "";
                                 String coma1 = "";
                                 for (Map preparacion : preparaciones) {
//                                String principal = opciones2[k].split("/")[0];
//                                String codigo = opciones2[k].split("/")[1];
//                                String cant = opciones2[k].split("/")[2];
//                                String estadoProducto = opciones2[k].split("/")[3];
                                 String productoPrincipalPreparacion="";
                                 if (preparacion.get("estado").toString().equals("true")) {
                                     productoPrincipalPreparacion = preparacion.get("producto").toString();
                                 }

                                 sqlPreparacion += comasql+instancias.getSql().agregarPreparacion(nodo.getIdFactura(),idComanda,"principal", 
                                      preparacion.get("codigo").toString(), preparacion.get("descripcion").toString(), preparacion.get("cantidad").toString(), preparacion.get("estado").toString(), preparacion.get("posicion").toString(), productoPrincipalPreparacion);
                              
                                     if (preparacion.get("estado").toString().equals("true")) {
                                         if (!productoPrincipal.equals(preparacion.get("producto")) && preparacion.get("producto") != null && !preparacion.get("producto").equals("")) {
                                             if (preparacion.get("codigo").toString() != preparacion.get("producto").toString()) {
                                                 ingredientes += coma1 + preparacion.get("cantidad").toString() + " " + preparacion.get("descripcion").toString();
                                                 coma1 = ", ";
                                             }
                                         }
                                     } else {
                                         sinIngredientes += coma + preparacion.get("descripcion").toString();
                                         coma = ", ";
                                     }
                                comasql=",";
//                                if (principal.equals("") || principal.equals(" ")) {
//                                    if (estadoProducto.equals(" false")) {
//                                        ndProducto nodoProd = instancias.getSql().getDatosProducto(opciones2[k].split("/")[1], baseUtilizada);
//                                        ingredientes1 = ingredientes1 + nodoProd.getDescripcion() + ", ";
//                                    }
//                                } else {
//                                    if (!principal.equals(codigo)) {
//                                        if (estadoProducto.equals(" true")) {
//                                            ndProducto nodoProd = instancias.getSql().getDatosProducto(opciones2[k].split("/")[1], baseUtilizada);
//                                            if (nodoProd.getGrupo() != null) {
//                                                if (nodoProd.getGrupo().equals("GRP-02")) {
//                                                    if (cant.substring(cant.length() - 1, cant.length()).equals("0")) {
//                                                        opciones1 = opciones1 + cant.substring(0, cant.length() - 2) + " " + nodoProd.getDescripcion() + ", ";
//                                                    } else {
//                                                        opciones1 = opciones1 + cant + " " + nodoProd.getDescripcion() + ", ";
//                                                    }
//                                                } else {
//                                                    opciones1 = opciones1 + nodoProd.getDescripcion() + ", ";
//                                                }
//                                            } else {
//                                                opciones1 = opciones1 + nodoProd.getDescripcion() + ", ";
//                                            }
//                                        }
//                                    }
//                                }
                            }
                           sqlPreparacion += comasql+instancias.getSql().agregarPreparacion(nodo.getIdFactura(),idComanda,"observaciones", 
                                      "", obser, "", "", "", productoPrincipal);
                           sqlPreparacion += comasql+instancias.getSql().agregarPreparacion(nodo.getIdFactura(),idComanda,"producto", 
                                      productoPrincipal, "", "", "", "", productoPrincipal);
                                 
                            if(ingredientes.length()>0){
                             ingredientes = "Con: "+ingredientes;
                            }
                            if(sinIngredientes.length()>0){
                              sinIngredientes = "Sin: "+sinIngredientes;
                            }
                            comasql=",";
//
//                            if (!opciones1.equals("Con: ")) {
//                                opciones1 = opciones1.substring(0, opciones1.length() - 2);
//                            }
//
//                            if (!ingredientes1.equals("Sin: ")) {
//                                ingredientes1 = ingredientes1.substring(0, ingredientes1.length() - 2);
//                            }
                        }

//                        if (!aderezos.equals("")) {
//                            aderezos2 = aderezos.split(", ");
//                            for (int k = 0; k < aderezos2.length; k++) {
//                                ndProducto nodoProd = instancias.getSql().getDatosProducto(aderezos2[k], baseUtilizada);
//                                aderezos1 = aderezos1 + nodoProd.getDescripcion() + ", ";
//                            }
//                            aderezos1 = aderezos1.substring(0, aderezos1.length() - 2);
//                        }

                        if (tipo.equals("mesa")) {
                            
                        if (!manejoInsertUpdateComanda(factura, "", tblProductos.getValueAt(i, Identidad.idSistema).toString(), tblProductos.getValueAt(i, Identidad.Descripción).toString(),
                                 sinIngredientes, ingredientes, adici, aderezo, formatVal(big.formatDouble(big.getMonedaToDouble(tblProductos.getValueAt(i, Identidad.Cant).toString().replace(".", "")))), observaciones, turno, "", "PLATO-" + i,idComanda)) {
                                if(showMsg){
                                    metodos.msgError(null, "Hubo un error al guardar la comanda.");
                                }else{
                                    Logs.error("Hubo un error al guardar la comanda.");
                                }
                           }
                            
                            if (!sqlPreparacion.equals("")) {
                                if (!instancias.getSql().ejecutarQuery(sqlPreparacion+";")) {
                                    if (showMsg) {
                                        metodos.msgError(null, "Hubo un error al guardar la Preparacion.");
                                    } else {
                                        Logs.error("Hubo un error al guardar la Preparacion.");
                                    }
                                }
                            }
                            //Almacena plato 
                            //if (!instancias.getSql().agregarComanda(factura, "", tblProductos.getValueAt(i, 32).toString(), tblProductos.getValueAt(i, 1).toString(),
                            // opciones1, ingredientes1, "", aderezos1, tblProductos.getValueAt(i, 3).toString(), observaciones, turno, "", "PLATO-" + i)) {
                            // metodos.msgError(null, "Hubo un error al guardar la comanda.");
                            //}
                        }
                    } else {

                        Logs.log("agregarComanda ################ "
                                + "insert into bdComanda (congelada, factura, cod, producto, opciones, ingredientes, adiciones,"
                                + " aderezos, cant, observaciones, turno, pedido, consecutivo VALUES (" + factura + "," + "" + "," + tblProductos.getValueAt(i, 32).toString()
                                + "," + tblProductos.getValueAt(i, 1).toString()
                                + "," + ""
                                + "," + ""
                                + "," + ""
                                + "," + ""
                                + "," + tblProductos.getValueAt(i, 3).toString()
                                + "," + ""
                                + "," + turno
                                + "," + ""
                                + "," + "PLATO-" + i
                                + ")");

    //                    if (!instancias.getSql().agregarComanda(factura2, "", tblProductos.getValueAt(i, 32).toString(), tblProductos.getValueAt(i, 1).toString(),
    //                            "", "", "", "", tblProductos.getValueAt(i, 3).toString(), "", turno, "", "PLATO-" + i)) {
    //                        metodos.msgError(null, "Hubo un error al guardar la comanda.");
    //                    }
                       if (!manejoInsertUpdateComanda(factura, "", tblProductos.getValueAt(i, Identidad.idSistema).toString(), tblProductos.getValueAt(i, Identidad.Descripción).toString(),
                                "", "", "", "", formatVal(big.formatDouble(big.getMonedaToDouble(tblProductos.getValueAt(i, Identidad.Cant).toString().replace(".", "")))), "", turno, "", "PLATO-" + i,idComanda)) {

                                if(showMsg){
                                    metodos.msgError(null, "Hubo un error al guardar la comanda.");
                                }else{
                                    Logs.error("Hubo un error al guardar la comanda.");
                                }

                        }

                        //if (!instancias.getSql().agregarComanda(factura, "", tblProductos.getValueAt(i, 32).toString(), tblProductos.getValueAt(i, 1).toString(),
                        //        "", "", "", "", tblProductos.getValueAt(i, 3).toString(), "", turno, "", "PLATO-" + i)) {
                        //    metodos.msgError(null, "Hubo un error al guardar la comanda.");
                        //}
                    }

                    ndProducto producto = instancias.getSql().getDatosProducto(tblProductos.getValueAt(i, 32).toString(), baseUtilizada);

                    double cantidad;
                    double fisicoInventario;

                    try {
                        cantidad = Double.parseDouble(producto.getCongelada().replace(",", "."));
                    } catch (Exception e) {
                        cantidad = 0;
                    }

                    try {
                        fisicoInventario = Double.parseDouble(producto.getFisicoInventario().replace(",", "."));
                    } catch (Exception e) {
                        fisicoInventario = Double.parseDouble(producto.getInventario().replace(",", "."));
                    }

                    double cant2;
                    try {
                        cant2 = Double.parseDouble(tblProductos.getValueAt(i, 13).toString().replace(",", "."));
                    } catch (Exception e) {
                        cant2 = Double.parseDouble(tblProductos.getValueAt(i, 13).toString().substring(0, tblProductos.getValueAt(i, 13).toString().length() - 2));
                    }

                    fisicoInventario = fisicoInventario - cant2;
                    double total = cantidad + cant2;

                    String total1 = String.valueOf(df.format(total)).replace(".", ",");
                    String fisicoInventario1 = String.valueOf(df.format(fisicoInventario)).replace(".", ",");
  //AGREGO COSTEO PARA QUE DESCUENTE EN CONGELADA                             
                    if (producto.getUsuario().equals("ADMIN") || producto.getUsuario().equals("COSTEO")) {
                        instancias.getSql().modificarInventario("congelada", total1, tblProductos.getValueAt(i, 32).toString(), baseUtilizada);
                    }
                    instancias.getSql().modificarInventario("fisicoInventario", fisicoInventario1, tblProductos.getValueAt(i, 32).toString(), baseUtilizada);

                    // DESCONTAR DEL INVENTARIO DETALLADO //
                    if (instancias.getConfiguraciones().isProductosSerial()) {
                        String cod = "";
                        try {
                            cod = tblProductos.getValueAt(i, 29).toString();
                        } catch (Exception e) {
                        }

                        if (!cod.equals("")) {

                            String tipo = "";
                            if (producto.getTipoProducto() != null) {
                                if (producto.getTipoProducto().equals("IMEI")) {
                                    tipo = "Imei";
                                } else if (producto.getTipoProducto().equals("Fecha/Lote")) {
                                    tipo = "Fecha/Lote";
                                } else if (producto.getTipoProducto().equals("Color")) {
                                    tipo = "Color";
                                } else if (producto.getTipoProducto().equals("Serial")) {
                                    tipo = "Serial";
                                } else if (producto.getTipoProducto().equals("Talla")) {
                                    tipo = "Talla";
                                } else if (producto.getTipoProducto().equals("ColorTalla")) {
                                    tipo = "ColorTalla";
                                } else if (producto.getTipoProducto().equals("SerialColor")) {
                                    tipo = "SerialColor";
                                } else {
                                    tipo = "";
                                }
                            }

                            if (tipo.equals("Imei") || tipo.equals("Serial") || tipo.equals("SerialColor")) {
                                instancias.getSql().modificarEstadoDetalleProductos(cod, "CONGELADO");
                            } else {
                                Double cantidadActual = Double.parseDouble(instancias.getSql().getCantidadProductos(cod).replace(",", "."));
                                cantidadActual = cantidadActual - cant2;
                                String cantidadFinal = String.valueOf(df.format(cantidadActual)).replace(".", ",");
                                instancias.getSql().modificarCantidadesDetalleProductos(cod, cantidadFinal);
                            }
                        }
                    }
                    // FIN DE DESCONTAR DEL INVENTARIO SEPARADO // 
                }

                try {
                    if ((Boolean) datos[54] && instancias.getConfiguraciones().isRestaurante()) {
                        int turno1 = Integer.parseInt(instancias.getSql().getTurno()) + 1;
                        if (turno1 > 100) {
                            turno1 = 1;
                        }
                        instancias.getSql().aumentarTurno(String.valueOf(turno1));
                        txtTurno.setText(String.valueOf(turno1));
                        instancias.getMaestra().setTurno(String.valueOf(turno1));
                        instancias.getMaestra().actualizarTurno();
                        instancias.getPedido().consultarMaestros();
                    }
                } catch (Exception e) {
                    Logs.error(e);
                }

            } else if (tipo.equals("cuentaCobro")) {

                for (int i = 0; i < tblProductos.getRowCount(); i++) {
                    if (!tblProductos.getValueAt(i, 16).equals("REALIZADO")) {
                        String hasta = "";
                        if (chkSinEstablecer.isSelected()) {
                            hasta = metodos.desdeDate(dtDesde.getCurrent());
                        } else {
                            hasta = metodos.desdeDate(dtHasta.getCurrent());
                        }

                        Object[] vector = {factura, txtIdSistema.getText(), vendedor, "", metodos.fechaConsulta(metodosGenerales.fechaHora()),
                            metodos.fechaConsulta(txtVencimiento.getText()), instancias.getEfectivoDevuelta(), instancias.getNcDevuelta(), instancias.getChequeDevuelta(), instancias.getTarjetaDevuelta(),
                            big.getMoneda(txtTotal.getText().replace("Total: ", "")), big.getMoneda(txtTotalDescuentos.getText()),
                            big.getMoneda(txtTotalIva.getText()), big.getMoneda(txtSubTotal.getText()), cotizacionesAsociadas,
                            factura.replace(tip + "-", ""), false, "", !txtFechaFactura.getText().equals(txtVencimiento.getText()),
                            "LOTECCOB-" + loteGeneral, instancias.getUsuario(), big.getMoneda(txtRiva.getText()), big.getMoneda("0"), big.getMoneda(txtRtf.getText()), big.getMonedaToDouble(por),
                            txtObservaciones.getText(), false, "", false, "", "", metodos.fechaConsulta(metodos.sumarFecha(txtVencimiento.getText(), cantDias)), ter,
                            estado, "", instancias.getDevuelta(), factura2, instancias.getResolucion(), metodos.fechaConsulta(metodosGenerales.fecha()), "", "",
                            copago, txtPlaca1.getText(), "", "", tblProductos.getValueAt(i, 31), "", "", "", tblProductos.getValueAt(i, 32), big.getMoneda((String) tblProductos.getValueAt(i, 2)),
                            tblProductos.getValueAt(i, Identidad.cant2).toString().replace(",", "."), big.getMoneda((String) tblProductos.getValueAt(i, 6)),
                            big.getMoneda((String) tblProductos.getValueAt(i, 9)), big.getMoneda((String) tblProductos.getValueAt(i, 33)),
                            big.getMoneda((String) tblProductos.getValueAt(i, 4)), "", big.getMoneda((String) tblProductos.getValueAt(i, 14)), "",
                            big.getBigDecimal(tblProductos.getValueAt(i, 5).toString().replace(",", ".")).setScale(2, RoundingMode.DOWN) + "",
                            tblProductos.getValueAt(i, 1), tblProductos.getValueAt(i, 12) + "", formatVal(big.formatDouble(big.getMonedaToDouble(tblProductos.getValueAt(i, 3).toString().replace(".", "")))), //tblProductos.getValueAt(i, 3).toString().replace(",", "."),
                            "PENDIENTE", tblProductos.getValueAt(i, 7), tblProductos.getValueAt(i, 19), big.getMoneda(tblProductos.getValueAt(i, 20).toString()),
                            cmbPeriodicidad.getSelectedItem(), metodos.desdeDate(dtDesde.getCurrent()), hasta, txtCantIncremento.getText(),
                            big.getMoneda(txtTotalImpoconsumo.getText()), tblProductos.getValueAt(i, 23).toString().replace(".", "").replace(",", "."),
                            big.getMoneda((String) tblProductos.getValueAt(i, 8)), txtBodega.getText(),tblProductos.getValueAt(i, 38).toString(),tblProductos.getValueAt(i, Identidad.Cant).toString().replace(",", ".")
                        };
                        
                        ndCongelada nodo = metodos.llenarCongelada(vector);
                        if (!instancias.getSql().agregarCuentaCobro(nodo)) {
                                if(showMsg){
                                    metodos.msgError(null, "Hubo un problema al guardar la factura");
                                }else{
                                    Logs.error("Hubo un problema al guardar la factura");
                                }

                            return null;
                        }
                    }
                }
            }

            int fila = 0;
            for (int i = 0; i < tblComprobantes.getRowCount(); i++) {
                if ((Boolean) tblComprobantes.getValueAt(i, 2)) {
                    fila = i;
                }
            }

    //        aumentarConsecutivo(fila);

            //CAMBIAR CONSECUTIVO 
            if (nodoOrdenServicio != null) {
                int cant = tblProductos.getRowCount();
                if (cantProductosOrden == cant) {
                    if (!instancias.getSql().modificarOServicio1(nodoOrdenServicio, "", "REALIZADO")) {

                            if(showMsg){
                                metodos.msgError(null, "Hubo un problema al modificar el estado de la orden");
                            }else{
                                Logs.error("Hubo un problema al guardar la factura");
                            }

                        return null;
                    }
                    instancias.getSql().cambiarEstadoOrden1(nodoOrdenServicio, "FACTURADO");
                }
            }

            if (ndPedido != null) {
                int cant = tblProductos.getRowCount();
                if (cantProductosOrden == cant) {
                    if (!instancias.getSql().modificarPedido(ndPedido.getIdFactura(), "", "REALIZADO")) {  
                        if(showMsg){
                            metodos.msgError(null, "Error al modificar estado del pedido");
                        }else{
                            Logs.error("Error al modificar estado del pedido");
                        }

                        return null;
                    }
                    instancias.getSql().cambiarEstadoPedido("FACTURADO", ndPedido.getIdFactura());
                }
            }

            if (!ndGuarderia.equals("")) {
                if (!instancias.getSql().modificarGuarderia1(ndGuarderia, factura)) {
                    if(showMsg){
                        metodos.msgError(null, "Error al modificar el estado de la guarderia");
                    }else{
                        Logs.error("Error al modificar el estado de la guarderia");
                    }

                }

                if(showMsg){
                    metodos.msgExito(null, "Guarderia Finalizada");
                }else{
                    Logs.error("Guarderia Finalizada");
                }

                instancias.getGuarderia().actualizarTabla();
            }

            if (!ndHospitalizacion.equals("")) {
                if (!instancias.getSql().modificarHospitalizacion1(ndHospitalizacion, factura, big.getMoneda(txtTotal.getText().replace("Total: ", "")))) {
                    if(showMsg){
                        metodos.msgError(null, "Error al modificar estado de la hosp");
                    }else{
                        Logs.error("Error al modificar estado de la hosp");
                    }

                }

                instancias.getSql().eliminar_registro("bdMedicamentosProcesosAlertas",
                        " idHospitalizacion = '" + ndHospitalizacion + "' ");

                if(showMsg){
                    metodos.msgExito(null, "Hospitalización Finalizada");
                }else{
                    Logs.error("Hospitalización Finalizada");
                }


                instancias.getSql().modificarHospitalizacion(ndHospitalizacion, horasHospitalizacion, diasHospitalizacion);

                instancias.getIngresoHospitalizacion().cargarRegistros();
            }

            if (!ndPeluqueria.equals("")) {
                if (!instancias.getSql().modificarPeluqueria(ndPeluqueria, "Atendido", factura)) {
                    if(showMsg){
                        metodos.msgError(null, "No fue posible modificar el estado de la Cita");
                    }else{
                        Logs.error("No fue posible modificar el estado de la Cita");
                    }

                }

                if(showMsg){
                    metodos.msgExito(null, "Cita Finalizada");
                }else{
                    Logs.error("Cita Finalizada");
                }

                instancias.getPeluqueria().cargarAgendas(instancias.getMedico());
                instancias.getPeluqueria().cargarAgendas();
            }

            actualizarConsecutivo(fila);      
            actualizarTablaComprobantes();

            lbProducto.requestFocus();

            if (tipo.equals("facturacion") || (tipo.equals("mesa") && lbTitulo.getText().equals("DOMICILIO"))) {
                //SINO SE ESTA LLAMANDO DESDE LA ORDEN MUESTRE EL MENSAJE SINO NO POR QUE SE MUESTRA MAS ABAJO.

                if (!saltarPasosFactura1) {
                    if (!desde.equals("ordenMedica") && tipo.equals("facturacion")) {
                        lbObservaciones.requestFocus();
                        if(showMsg){
                            metodos.msgExito(null, "Factura Exitosa");
                        }else{
                            Logs.error("Factura Exitosa");
                        }

                    }
                }

                if (tipo.equals("mesa") && lbTitulo.getText().equals("DOMICILIO")) {
                    if(showMsg){
                        metodos.msgExito(null, "Domicilio Exitoso");
                    }else{
                        Logs.error("Domicilio Exitoso");
                    }


                    if (instancias.getConfiguraciones().isRestaurante()) {
                        instancias.getMenu().cambiarTitulo("MESAS");
                    } else {
                        instancias.getMenu().cambiarTitulo("CONGELADAS");
                    }
                }
            } else if (tipo.equals("orden")) {
                if(showMsg){
                    metodos.msgExito(null, "Orden Exitosa");
                }else{
                    Logs.error("Orden Exitosa");
                }
            } else if (tipo.equals("cotizacion")) {
                if(showMsg){
                    metodos.msgExito(null, "Cotización Exitosa");
                }else{
                    Logs.error("Cotización Exitosa");
                }         
            } else if (tipo.equals("pedido")) {
                if(showMsg){
                    metodos.msgExito(null, "Pedido Exitoso");
                }else{
                    Logs.error("Pedido Exitoso");
                }      
            } else if (tipo.equals("separe")) {
                if(showMsg){
                    metodos.msgExito(null, "Separe Exitoso");
                }else{
                    Logs.error("Separe Exitoso");
                }

            } else if (tipo.equals("mesa") && !lbTitulo.getText().equals("DOMICILIO")) {
                if (instancias.getConfiguraciones().isRestaurante()) {
                    if(showMsg){
                        metodos.msgExito(null, "Mesa Exitosa");
                    }else{
                        Logs.error("Mesa Exitosa");
                    }

                } else {
                    if(showMsg){
                        metodos.msgExito(null, "Congelada Exitosa");
                    }else{
                        Logs.error("Congelada Exitosa");
                    }

                }

                consecutivoMesa = lbNoFactura.getText();
                btnReImprimir.setVisible(true);
                btnActualizar.setVisible(true);
                btnGuardar.setVisible(true);
                btnGuardar.setText("FACTURAR");
                btnGuardar1.setVisible(true);
            } else if (tipo.equals("cuentaCobro")) {
                if (!saltarPasosFactura) {
                    if(showMsg){
                        metodos.msgExito(null, "Plantilla Exitosa");
                    }else{
                        Logs.error("Plantilla Exitosa");
                    }

                }
            }

            if (tipo.equals("facturacion")) {
                if (txtDiasPlazo.getText().equals("0")) {
                    if ((Boolean) datos[91]) {
                        if (!saltarPasosFactura) {
                            intTotalDevuelta devueltaTotal = new intTotalDevuelta(instancias.getMenu(), true, instancias, instancias.getDevuelta());
                            devueltaTotal.setVisible(true);
                        }
                    }
                }
            }

            String impresoraComanda = "";
            try {
                impresoraComanda = datos[105].toString();
            } catch (Exception e) {
            }

            //IMPRIMIR LA COMANDA
            if (instancias.getConfiguraciones().isRestaurante()) {

                Logs.log("Entro cuando es tipo de facturaacion " + tipo);
                //if (tipo.equals("facturacion") || tipo.equals("mesa")) {
                if (tipo.equals("facturacion")) {

                    Logs.log("Entro cuando es tipo de facturaacion: " + tipo);

                    if (ndPedido == null) {
                        int generarComanda=1;
                        if(showMsg){
                          generarComanda=metodos.msgPregunta(null, "¿Desea generar comanda?");
                        }else{
                          generarComanda=1;  
                        }
                        
                        if (generarComanda == 0) {
                            Logs.log("factura 2 **************** 1... " + factura2 + " factura 1 " + factura);
    //                        generarImpresionComanda("where factura = '" + factura2 + "'", txtObservaciones.getText(), factura2, "", (Boolean) datos[103],
    //                                cmbVendedor.getSelectedItem().toString());

                            generarImpresionComanda("where factura = '" + factura + "'", txtObservaciones.getText(), factura, "", (Boolean) datos[103],
                                    cmbVendedor.getSelectedItem().toString());

                            //instancias.getReporte().ver_Comanda("where factura = '" + factura + "'", factura, txtObservaciones.getText(),
                            //factura, "", (Boolean) datos[103], impresoraComanda, cmbVendedor.getSelectedItem().toString());
                            try {
                                Thread.sleep(500);
                            } catch (Exception e) {
                                Logs.error(e);
                            }

                            String copias = "";
                            try {
                                copias = datos[101].toString();
                            } catch (Exception e) {
                            }

                            try {
                                if (copias != null || !copias.equals("")) {
                                    for (int i = 0; i < Integer.parseInt(copias); i++) {
                                        Logs.log("factura 3 **************** 2 ..." + factura2 + " factura 1 " + factura);
    //                                     generarImpresionComanda("where factura = '" + factura2 + "'", txtObservaciones.getText(),
    //                                            factura2, "", (Boolean) datos[103], cmbVendedor.getSelectedItem().toString()
    //                                    );

                                        generarImpresionComanda("where factura = '" + factura + "'", txtObservaciones.getText(),
                                                factura, "", (Boolean) datos[103], cmbVendedor.getSelectedItem().toString()
                                        );

    //                                    instancias.getReporte().ver_Comanda("where factura = '" + factura + "'", factura, txtObservaciones.getText(),
    //                                            factura, "", (Boolean) datos[103], impresoraComanda, cmbVendedor.getSelectedItem().toString());
                                    }
                                }
                            } catch (Exception e) {
                                Logs.error(e);
                            }
                        }
                    }
                }
    //                }else if (tipo.equals("mesa")) {
                if (tipo.equals("mesa")) {

                    if (lbTitulo.getText().equals("DOMICILIO")) {
                        int generarComanda=1;
                        if(showMsg){
                          generarComanda=metodos.msgPregunta(null, "¿Desea generar comanda?");
                        }else{
                          generarComanda=1;  
                        }
                        
                        if (generarComanda == 0) {

    //                           generarImpresionComanda("where factura = '" + factura2 + "'", txtObservaciones.getText(),
    //                                    factura2, "", (Boolean) datos[103],
    //                                    cmbVendedor.getSelectedItem().toString());
                            Logs.log("factura 4 **************** 3 ...." + factura2 + " factura 1 " + factura);
                            generarImpresionComanda("where factura = '" + factura + "'", txtObservaciones.getText(),
                                    factura, lbTitulo.getText(), (Boolean) datos[103],
                                    cmbVendedor.getSelectedItem().toString());

                            //instancias.getReporte().ver_Comanda("where factura = '" + factura + "'", factura, txtObservaciones.getText(),
                            //    factura, "", (Boolean) datos[103], impresoraComanda, cmbVendedor.getSelectedItem().toString());
                            String copias = "";
                            try {
                                copias = datos[101].toString();
                            } catch (Exception e) {
                            }

                            try {
                                if (copias != null || !copias.equals("")) {
                                    for (int i = 0; i < Integer.parseInt(copias); i++) {
    //                                        generarImpresionComanda("where factura = '" + factura2 + "'", txtObservaciones.getText(),
    //                                                factura2, "", (Boolean) datos[103],
    //                                                cmbVendedor.getSelectedItem().toString());
                                        Logs.log("factura 4.4 **************** 4 ..." + factura2 + " factura 1 " + factura);
                                        generarImpresionComanda("where factura = '" + factura + "'", txtObservaciones.getText(),
                                                factura, lbTitulo.getText(), (Boolean) datos[103],
                                                cmbVendedor.getSelectedItem().toString());

                                        //instancias.getReporte().ver_Comanda("where factura = '" + factura + "'", factura, txtObservaciones.getText(), factura,
                                        //    "", (Boolean) datos[103], impresoraComanda, cmbVendedor.getSelectedItem().toString());
                                    }
                                }
                            } catch (Exception e) {
                                Logs.error(e);
                            }
                        }
                    } else {
                        int generarComanda=1;
                        if(showMsg){
                          generarComanda=metodos.msgPregunta(null, "¿Desea generar comanda?");
                        }else{
                          generarComanda=1;  
                        }
                        
                        if (generarComanda == 0) {

    //                            generarImpresionComanda("where congelada = '" + factura2 + "'", txtObservaciones.getText(),
    //                                    factura2, "", (Boolean) datos[103],
    //                                    cmbVendedor.getSelectedItem().toString());
                            Logs.log("factura 5 **************** 5 ..." + factura2 + " factura 1 " + factura);
                            generarImpresionComanda("where congelada = '" + factura + "'", txtObservaciones.getText(),
                                    factura, lbTitulo.getText(), (Boolean) datos[103],
                                    cmbVendedor.getSelectedItem().toString());

    //                            instancias.getReporte().ver_Comanda("where congelada = '" + factura + "'", factura, txtObservaciones.getText(),
    //                                    factura, lbTitulo.getText(), (Boolean) datos[103], impresoraComanda, cmbVendedor.getSelectedItem().toString());
                            String copias = "";
                            try {
                                copias = datos[101].toString();
                            } catch (Exception e) {
                            }

                            try {
                                if (copias != null || !copias.equals("")) {
                                    for (int i = 0; i < Integer.parseInt(copias); i++) {

    //                                        generarImpresionComanda("where congelada = '" + factura2 + "'", txtObservaciones.getText(),
    //                                                factura2, lbTitulo.getText(), (Boolean) datos[103],
    //                                                cmbVendedor.getSelectedItem().toString());
                                        Logs.log("factura 2 **************** 6 ..." + factura2 + " factura 1 " + factura);
                                        generarImpresionComanda("where congelada = '" + factura + "'", txtObservaciones.getText(),
                                                factura, lbTitulo.getText(), (Boolean) datos[103],
                                                cmbVendedor.getSelectedItem().toString());

    //                                        instancias.getReporte().ver_Comanda("where congelada = '" + factura + "'", factura, txtObservaciones.getText(),
    //                                                factura, lbTitulo.getText(), (Boolean) datos[103], impresoraComanda, cmbVendedor.getSelectedItem().toString());
                                    }
                                }
                            } catch (Exception e) {
                                Logs.error(e);
                            }
                        }
                    }
                }

                if (tipo.equals("pedido")) {
                    int generarComanda=1;
                        if(showMsg){
                          generarComanda=metodos.msgPregunta(null, "¿Desea generar comanda?");
                        }else{
                          generarComanda=1;  
                        }
                        
                        if (generarComanda == 0) {

    //                        generarImpresionComanda("where pedido = '" + factura2 + "'", txtObservaciones.getText(),
    //                                factura2, lbTitulo.getText(), (Boolean) datos[103],
    //                                cmbVendedor.getSelectedItem().toString());
                        Logs.log("factura 6 **************** 7 ..." + factura2 + " factura 1 " + factura);
                        generarImpresionComanda("where pedido = '" + factura + "'", txtObservaciones.getText(),
                                factura, lbTitulo.getText(), (Boolean) datos[103],
                                cmbVendedor.getSelectedItem().toString());

    //                        instancias.getReporte().ver_Comanda("where pedido = '" + factura + "'", factura, txtObservaciones.getText(),
    //                                factura, lbTitulo.getText(), (Boolean) datos[103], impresoraComanda, cmbVendedor.getSelectedItem().toString());
                        String copias = "";
                        try {
                            copias = datos[101].toString();
                        } catch (Exception e) {
                        }

                        try {
                            if (copias != null || !copias.equals("")) {
                                for (int i = 0; i < Integer.parseInt(copias); i++) {

    //                                    generarImpresionComanda("where pedido = '" + factura2 + "'", txtObservaciones.getText(),
    //                                            factura2, lbTitulo.getText(), (Boolean) datos[103],
    //                                            cmbVendedor.getSelectedItem().toString());
                                    Logs.log("factura 2 **************** 8 ..." + factura2 + " factura 1 " + factura);
                                    generarImpresionComanda("where pedido = '" + factura + "'", txtObservaciones.getText(),
                                            factura, lbTitulo.getText(), (Boolean) datos[103],
                                            cmbVendedor.getSelectedItem().toString());

    //                                    instancias.getReporte().ver_Comanda("where pedido = '" + factura + "'", factura, txtObservaciones.getText(),
    //                                            factura, lbTitulo.getText(), (Boolean) datos[103], impresoraComanda, cmbVendedor.getSelectedItem().toString());
                                }
                            }
                        } catch (Exception e) {
                            Logs.error(e);
                        }
                    }
                }

            }
            // FIN DE LA IMPRESION DE LA COMANDA

            if (tipo.equals("mesa") && !lbTitulo.getText().equals("DOMICILIO")) {
                instancias.getSql().cambiarEstadoMesa(instancias.getTitulo(), "DISPONIBLE");
            }

            //SI LA GENERA DESDE LA ORDEN MEDICA SACARA ESTE MENSAJE
            if (desde.equals("ordenMedica")) {

                if (instancias.isImprimirFacturaOrdenMedica()) {
                    if (metodos.msgPregunta(null, "¿Desea imprimir la fact Nro." + factura.replace("FACT-", "") + "?") == 0) {

                        String observaciones = txtObservaciones.getText();

                        String legal = "", pie;

                        try {
                            legal = instancias.getLegal();
                        } catch (Exception ex) {
                            legal = "";
                        }

                        try {
                            pie = instancias.getPie();
                        } catch (Exception ex) {
                            pie = "";
                        }

                        String impresora = "", tipoFact = "";
                        if (rdMediaCarta.isSelected()) {
                            tipoFact = "facturaMedica";
                            impresora = datos[82].toString();
                        } else if (rdCarta.isSelected()) {
                            tipoFact = "facturaMedicaCompleta";
                            impresora = datos[83].toString();
                        } else if (rdPos.isSelected()) {
                            tipoFact = "facturaMedica";
                            impresora = datos[81].toString();
                        }

                        String impoconsumo = datos[84].toString();
                        String retenciones = datos[85].toString();

                        String condicion;
                        if ((Boolean) datos[Identidad.combinarProductos] && instancias.getConfiguraciones().isRestaurante()) {
                            condicion = metodos.sentenciaImpresionFactura("agrupada", " WHERE bdFactura.factura = '" + factura2 + "' ");
                        } else {
                            if (instancias.getConfiguraciones().isRestaurante()) {
                                condicion = metodos.sentenciaImpresionFactura("agrupada", " WHERE bdFactura.factura = '" + factura2 + "' ");
                            } else {
                                condicion = metodos.sentenciaImpresionFactura("", " WHERE bdFactura.factura = '" + factura2 + "' ");
                            }
                        }

                        Logs.log("condicion: " + condicion);

                        //IMPRESIÓN ORIGINAL
                        instancias.getReporte().ver_Factura(factura2, observaciones, instancias.getInformacionEmpresaCompleto(), legal, "Original", pie,
                                tipoFact, factura, !(Boolean) datos[68], "", impresora, impoconsumo, retenciones, condicion, false, false);

                        //COPIAS DE LA IMPRESION
                        int cantidad;
                        try {
                            cantidad = Integer.parseInt(datos[73].toString());
                        } catch (Exception e) {
                            cantidad = 0;
                        }

                        if (cantidad > 0) {
                            for (int i = 0; i < cantidad; i++) {
                                if (instancias.getRegimen().equals("")) {
                                    instancias.getReporte().ver_Factura(factura2, observaciones, instancias.getInformacionEmpresaCompleto(), legal, "Copia " + (i + 1),
                                            pie, tipoFact, factura2, !(Boolean) datos[68], "", impresora, impoconsumo, retenciones, condicion, false, false);
                                } else {
                                    instancias.getReporte().ver_Factura(factura2, observaciones, instancias.getInformacionEmpresaCompleto(), legal, "Copia " + (i + 1),
                                            pie, tipoFact, factura2, !(Boolean) datos[68], "", impresora, impoconsumo, retenciones, condicion, false, false);
                                }
                            }
                        }
                    }
                } else {
                    if(showMsg){
                         metodos.msgExito(null, "Fact Nro." + factura.replace("FACT-", "") + " exitosa");
                    }else{
                        Logs.log("Fact Nro." + factura.replace("FACT-", "") + " exitosa");
                    }

                }
            } else {
                String tipoFactura = "";
                if (null == tblComprobantes.getValueAt(fila, 7)) {
                    tipoFactura = "";
                } else {
                    tipoFactura = tblComprobantes.getValueAt(fila, 7).toString();
                }
                if (imprimir && !tipoFactura.equals("Facturación Electronica")) {
                    imprimir(factura, factura2);
                }
            }

            if (tipo.equals("facturacion")) {
                if (instancias.isUbicacion()) {
                    try {
                        if (metodos.msgPregunta(null, "¿Desea imprimir ubicación?") == 0) {
                            instancias.getReporte().ver_ubicacion(factura2, false);
                        }
                    } catch (Exception e) {
                        Logs.error(e);
                    }
                }
            }

            if (cotizaciones != null) {
                for (String cotizacion : cotizaciones) {
                    if (!instancias.getSql().modificarCotizaciones(cotizacion, factura, "FACTURADO")) {
                        if(showMsg){
                            metodos.msgError(null, "Hubo un problema al modificar el estado de la cotizacion");
                        }else{
                            Logs.log("Hubo un problema al modificar el estado de la cotizacion");
                        }

                        return null;
                    }
                }
            }

            if (tipo.equals("facturacion")) {
                int cantidad = 0;
                //PAGOS A TERCEROS
                for (int i = 0; i < tblProductos.getRowCount(); i++) {
                    BigDecimal pago = big.getMoneda(tblProductos.getValueAt(i, 19).toString());
                    if (pago.compareTo(BigDecimal.ZERO) > 0) {
                        cantidad = cantidad + 1;
                    }
                }

                Object[][] pagos = new Object[cantidad][4];

                int z = 0;
                for (int i = 0; i < tblProductos.getRowCount(); i++) {
                    BigDecimal pago = big.getMoneda(tblProductos.getValueAt(i, 19).toString());
                    if (pago.compareTo(BigDecimal.ZERO) > 0) {
                        pagos[z][0] = tblProductos.getValueAt(i, 1);
                        pagos[z][1] = tblProductos.getValueAt(i, 19);
                        pagos[z][2] = tblProductos.getValueAt(i, 32);
                        pagos[z][3] = factura;
                        z++;
                    }
                }

                if (cantidad > 0) {
                    dlgPagosProveedores pagosProveedores = new dlgPagosProveedores(null, true, pagos);
                    pagosProveedores.setLocationRelativeTo(null);
                    pagosProveedores.setVisible(true);
                }
            }

            if (tipo.equals("orden")) {
                if (!saltarPasosFactura) {
                    if (metodos.msgPregunta(null, "¿Desea generar factura?") == 0) {

                        this.tipo = "facturacion";
                        cmbCargar.setSelectedIndex(1);

                        txtCargar.setText(factura.replace("OSERV-", ""));
                        cargarMovimiento();
                        txtObservaciones.setText(factura + ". " + txtObservaciones.getText());
                        for (int i = 0; i < tblProductos.getRowCount(); i++) {
                            calcularTabla(i, true);
                        }

                        saltarPasosFactura = true;
                        instancias.setEfectivoDevuelta(big.getMoneda(txtTotal.getText().replace("Total: ", "")));
                        btnGuardar1ActionPerformed(null);
                    }
                }

                this.tipo = "orden";
            }

            if (facturaCredito) {
                instancias.getReporte().verPrestamo(credito1, instancias.getInformacionEmpresa());
            }

            //Si es diferente de medico va a ingresar, ya que es de otro tipo y puede ingresar y cambiar el estado de la cita.
            if (instancias.getConfiguraciones().isAgenda()) {

                String cliente = txtIdSistema.getText();
                String cita = "";

                try {
                    cita = instancias.getSql().getAgendasDelDia(cliente, metodos.fechaConsulta(metodosGenerales.fecha()));
                } catch (Exception e) {
                    Logs.error(e);
                }

                if (!cita.equalsIgnoreCase("")) {
                    if (!instancias.getSql().modificarCita(cita, "Atendido")) {
                        metodos.msgError(null, "No fue posible modificar el estado de la Cita");
                    }

                    instancias.getAgendaConsulta().cargarAgendas(instancias.getMedico());
                    instancias.getAgendaConsulta().cargarAgendas();
                    instancias.getAgendaConsulta().show();
                    try {
                        instancias.getAgendaConsulta().setSelected(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(pnlFactura.class
                                .getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

            fechaFacturaAutomatica = "";
            saltarPasosFactura = false;
            desdeParqueadero = false;

            if (tipoActual.equals("pedidoActual")) {
                this.tipo = "pedido";
                tipoActual = "";
            }

            if (tipo.equals("mesa")) {
                if (instancias.getConfiguraciones().isRestaurante()) {
                    instancias.getMesas().cargarRegistrosMesas();
                    instancias.getMesas().cargarRegistros();
                    instancias.getMesas().setSelected(true);
                } else {
                    instancias.getMesas1().cargarRegistros();
                    instancias.getMesas1().setSelected(true);
                }

                if (!instancias.getMenu().getSeVeElMenu()) {
                    instancias.getMenu().expandirMenu();
                }
            } else {
                limpiar(true, "");
            }

            lbNit.requestFocus();

            tblProductos.removeEditor();

            tblInventario.removeEditor();

            return factura2;   
        } catch (Exception e) {
            instancias.getSql().desbloquearConsecutivosfactura();
            throw e;
        }
    }

    public void almacenaPreparadaCambios(ndCongelada nodo , String idComanda,Map infDetalleProductosPrincipales){
                        String opciones1 = "Con: ", ingredientes1 = "Sin: ", aderezos1 = "Aderezos: ";
                        String opciones2[], aderezos2[];

                        String observaciones = "";
                        try {
                           observaciones = infDetalleProductosPrincipales.get("observaciones").toString();
                        } catch (Exception e) {
                            Log.error("Error observaciones restaurante: ", e);
                        }

                        String sqlPreparacion=instancias.getSql().agregarPreparacionCabecera();  
                        ArrayList<Map> preparaciones = new ArrayList<Map>();
                        ArrayList<Map> aderezosL = new ArrayList<Map>();
                        ArrayList<Map> adiciones = new ArrayList<Map>();
                        String productoPrincipal;
                        String obser;
                        preparaciones = (ArrayList<Map>) infDetalleProductosPrincipales.get("ingredientes"); 
                        adiciones = (ArrayList<Map>) infDetalleProductosPrincipales.get("adiciones"); 
                        aderezosL = (ArrayList<Map>) infDetalleProductosPrincipales.get("aderezos"); 
                        productoPrincipal = infDetalleProductosPrincipales.get("producto").toString();
                        obser = infDetalleProductosPrincipales.get("observaciones").toString();
                   
                        String aderezo="";
                        String comasql="";
                        if (!aderezosL.isEmpty()) {
                            aderezo="Aderezo: ";
                            String coma="";
                            for (Map adere : aderezosL) {
                              sqlPreparacion += coma+instancias.getSql().agregarPreparacion(nodo.getIdFactura(),idComanda,"aderezos", 
                                      adere.get("codigo").toString(), adere.get("descripcion").toString(), adere.get("cantidad").toString(), adere.get("estado").toString(), adere.get("posicion").toString(), productoPrincipal);
                              aderezo +=coma+adere.get("descripcion").toString();  
                              coma=", ";
                              comasql=",";
                            }
                        }
                        String adici="";
                        if (!adiciones.isEmpty()) {
                            adici="Adicion: ";
                            String coma="";
                            for (Map adicion : adiciones) {
                              sqlPreparacion += comasql+coma+instancias.getSql().agregarPreparacion(nodo.getIdFactura(),idComanda,"adiciones", 
                                      adicion.get("codigo").toString(), adicion.get("descripcion").toString(), adicion.get("cantidad").toString(), adicion.get("estado").toString(), adicion.get("posicion").toString(), productoPrincipal);
                              
                              adici +=coma+adicion.get("cantidad").toString()+" "+adicion.get("descripcion").toString();  
                              coma=", ";
                              comasql="";
                            }
                            comasql=",";
                        }
                        String ingredientes = "";
                        String sinIngredientes = "";
                        if (!preparaciones.isEmpty()) {
                                 String coma = "";
                                 String coma1 = "";
                                 for (Map preparacion : preparaciones) {
                                     
                                 String productoPrincipalPreparacion="";
                                 if (preparacion.get("estado").toString().equals("true")) {
                                     productoPrincipalPreparacion = preparacion.get("producto").toString();
                                 }    
                                 sqlPreparacion += comasql+instancias.getSql().agregarPreparacion(nodo.getIdFactura(),idComanda,"principal", 
                                      preparacion.get("codigo").toString(), preparacion.get("descripcion").toString(), preparacion.get("cantidad").toString(), preparacion.get("estado").toString(), preparacion.get("posicion").toString(), productoPrincipalPreparacion);
                              
                                     if (preparacion.get("estado").toString().equals("true")) {
                                         if (!productoPrincipal.equals(preparacion.get("producto")) && preparacion.get("producto") != null && !preparacion.get("producto").equals("")) {
                                             if (preparacion.get("codigo").toString() != preparacion.get("producto").toString()) {
                                                 ingredientes += coma1 + preparacion.get("cantidad").toString() + " " + preparacion.get("descripcion").toString();
                                                 coma1 = ", ";
                                             }
                                         }
                                     } else {
                                         sinIngredientes += coma + preparacion.get("descripcion").toString();
                                         coma = ", ";
                                     }
                                comasql=",";
                            }
                           sqlPreparacion += comasql+instancias.getSql().agregarPreparacion(nodo.getIdFactura(),idComanda,"observaciones", 
                                      "", obser, "", "", "", productoPrincipal);
                           sqlPreparacion += comasql+instancias.getSql().agregarPreparacion(nodo.getIdFactura(),idComanda,"producto", 
                                      productoPrincipal, "", "", "", "", productoPrincipal);
                              
                                 
                            if(ingredientes.length()>0){
                             ingredientes = "Con: "+ingredientes;
                            }
                            if(sinIngredientes.length()>0){
                              sinIngredientes = "Sin: "+sinIngredientes;
                            }
                            comasql=",";

                        }
                        if (!sqlPreparacion.equals("")) {
                                if (!instancias.getSql().ejecutarQuery(sqlPreparacion+";")) {
                                    if (showMsg) {
                                        metodos.msgError(null, "Hubo un error al guardar la Preparacion.");
                                    } else {
                                        Logs.error("Hubo un error al guardar la Preparacion.");
                                    }
                                }
                         }
    }
    
    
    public void actualizarTablaComprobantes() {
        while (tblComprobantes.getRowCount() > 0) {
            modeloComprobantes.removeRow(0);
        }

        Object[][] comprobantes = instancias.getSql().getTiposComprobantes();
        for (Object[] comprobante : comprobantes) {
            if(!String.valueOf(comprobante[0]).equals("DS")){
            modeloComprobantes.addRow(new Object[]{comprobante[0], comprobante[1], false, comprobante[2], comprobante[5], comprobante[3],
                comprobante[4], comprobante[7], comprobante[6], comprobante[8], comprobante[9], comprobante[10]});
            }
        }

        tblComprobantes.setValueAt(true, 0, 2);
        actualizarResolucion(0);
    }

    public void desdeLavadero(Object[][] Productos, String cliente, String diasPlazo, String placa, String obv) {
        limpiar(true, "");

        int i = 0;
        for (Object[] reg : Productos) {
            cargarProducto((String) reg[0], (String) reg[1], 1, "", "", "", true, "", "", "", "", "", "");
            tblProductos.setValueAt(big.setMonedaExacta(big.getMoneda(reg[3].toString())), i, 2);
            tblProductos.setColumnSelectionInterval(0, 0);
            tblProductos.setRowSelectionInterval(i, i);
            KeyEvent x = new KeyEvent(this, WIDTH, WIDTH, WIDTH, KeyEvent.VK_ENTER);
            tblProductosKeyReleased(x);
            i++;
        }

        txtNit.setText(cliente);
        cargarCliente(cliente);

        txtDiasPlazo.setText(diasPlazo);
        calcularDiasPlazo(null);

        txtPlaca1.setText(placa);
        instancias.getLavadero().setFactura("FACT-" + lbNoFactura.getText());
        txtObservaciones.setText(obv);

        saltarPasosFactura = true;

        if (metodos.msgPregunta(null, "¿Desea imprimir factura?") == 0) {
            btnGuardar1ActionPerformed(null);
        } else {
            btnGuardarActionPerformed(null);
        }

    }

    public String desdeLavadero(Object[][] Productos, String cliente, String placa, String obv) throws Exception{
        limpiar(true, "SI");

        int i = 0;
        for (Object[] reg : Productos) {
            cargarProducto((String) reg[0], (String) reg[1], 1, "", "", "", true, "", "", "", "", "", "");
            tblProductos.setValueAt(big.setMonedaExacta(big.getMoneda(reg[3].toString())), i, 2);
            tblProductos.setColumnSelectionInterval(0, 0);
            tblProductos.setRowSelectionInterval(i, i);
            KeyEvent x = new KeyEvent(this, WIDTH, WIDTH, WIDTH, KeyEvent.VK_ENTER);
            tblProductosKeyReleased(x);
            i++;
        }

        txtNit.setText(cliente);
        cargarCliente(cliente);
        txtPlaca1.setText(placa);
        txtObservaciones.setText(obv);

        saltarPasosFactura = true;
        return validacionInicialFactura(false);
    }

    public void actualizarOrdenServicio(Object[][] Productos, String orden) {
        limpiar(true, "SI");

        orden = orden.replace("OSERV-", "");
        txtCargar.setText(orden);
        lbNoFactura.setText(orden);
        cargarOServicio(orden, "OSERV-");

        DefaultTableModel modelo = (DefaultTableModel) tblProductos.getModel();
        while (tblProductos.getRowCount() > 0) {
            modelo.removeRow(0);
        }

        modeloInventario = (DefaultTableModel) tblInventario.getModel();
        while (tblInventario.getRowCount() > 0) {
            modeloInventario.removeRow(0);
        }

        int i = 0;
        btnActualizar.setEnabled(true);
        for (Object[] reg : Productos) {
            cargarProducto((String) reg[0], (String) reg[1], 1, "", "", "", false, "", "", "", "", "", "");

            tblProductos.setValueAt((String) reg[1], i, 3);
            tblProductos.setValueAt(big.setMonedaExacta(big.getMoneda(reg[3].toString())), i, 2);
//            tblProductos.setValueAt(big.getBigDecimal(reg[5].toString()), i, 5);

            tblProductos.setColumnSelectionInterval(0, 0);
            tblProductos.setRowSelectionInterval(i, i);
            KeyEvent x = new KeyEvent(this, WIDTH, WIDTH, WIDTH, KeyEvent.VK_ENTER);
            tblProductosKeyReleased(x);
            i++;
        }
        txtCargar.setText(orden);
        int j = tblProductos.getRowCount();
        btnActualizarActionPerformed(null);
    }

    public void facturarCongelada(Boolean imprimir) {
        Boolean bolsa = false;

        String baseUtilizada = obtenerBase();
        if (instancias.getConfiguraciones().isRestaurante()) {
            for (int i = 0; i < tblProductos.getRowCount(); i++) {
                ndProducto nodo = instancias.getSql().getDatosProducto(tblProductos.getValueAt(i, 32).toString(), baseUtilizada);

                if (nodo.getUsuario().equals("FACTURA")) {
                   
                    Map infDetalleProductosPrincipales = new HashMap();
                    ArrayList<Map> adiciones = new ArrayList<Map>();
                    
                    try {
                        infDetalleProductosPrincipales = (Map) tblProductos.getValueAt(i, 21); 
                          
//                        opciones = tblProductos.getValueAt(i, 21).toString().split("; ")[3];
                    } catch (Exception e) {
                        }

                    String opciones2[];
                     if (!infDetalleProductosPrincipales.isEmpty()) {
                        adiciones = (ArrayList<Map>) infDetalleProductosPrincipales.get("adiciones");  
//                        opciones2 = opciones.split(", ");
                        for (Map adicion : adiciones) {
                            if(adicion.get("estado").toString().equals("true")){
                                ndProducto nodo1 = instancias.getSql().getDatosProducto(adicion.get("codigo").toString(), baseUtilizada);
                                if (nodo1.getGrupo() != null) {
                                    if (nodo1.getGrupo().equals("GRP-02")) {
                                        String factura = tipo() + "-" + lbNoFactura.getText();
                                        String idComanda = "";
                                        if (factura != "") {
                                            Object[] existenciaCongelada = new Object[0];
                                            existenciaCongelada = instancias.getSql().consultarExistenciaCongelada(factura, adicion.get("codigo").toString(), "1");
                                            if (existenciaCongelada[0] != null) {
                                                idComanda = existenciaCongelada[0].toString();
                                            }
                                        }
                                        cargarProducto(adicion.get("codigo").toString(),adicion.get("cantidad").toString(), 1, "", "", "", false, "", "", "", "", "", idComanda);
                                        tblProductos.setValueAt("PRODUCTO-AGREGADO;"+i, tblProductos.getRowCount() - 1, 31);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        for (int i = 0; i < tblProductos.getRowCount(); i++) {
            if (tblProductos.getValueAt(i, 32).equals("PROD-000000032")) {
                bolsa = true;
            }

            Object[] ultimoPonderado = instancias.getSql().getUltimoPonderado(tblProductos.getValueAt(i, 32).toString());
            double costo;
            try {
                costo = big.formatDouble(ultimoPonderado[7].toString());
            } catch (Exception e) {
                costo = 0;
            }

            double valor = big.getMonedaToDouble(tblProductos.getValueAt(i, 2).toString());

            if (valor < costo) {
                metodos.msgAdvertencia(factura, "EL PRODUCTO " + tblProductos.getValueAt(i, 1) + " SE ESTA FACTURANDO POR DEBAJO DEL COSTO");
            }
        }

        if (instancias.getRegimen().equals("")) {
            if (!bolsa) {
                if (!instancias.getConfiguraciones().isParqueadero()) {
                    if ((Boolean) datos[52]) {

                        int num = 0;
                        try {
                            num = Integer.parseInt(metodos.msgIngresarEnter(null, "Ingrese # de bolsas"));
                        } catch (Exception e) {
                            borrarAdiciones();
                            metodos.msgError(factura, "Número no válido");
                            return;
                        }

                        if (num > 0) {
                            cargarProducto("IMP01", String.valueOf(num), 1, "", "", "", true, "", "", "", "", "", "");
                        }
                    }
                }
            }
        }

        intDevuelta devuelta;
        if (txtFechaFactura.getText().equals(txtVencimiento.getText())) {
            String miTipo = "";
            if (tipo.equals("facturacion")) {
                miTipo = "facturacion";
            }
            devuelta = new intDevuelta(instancias.getMenu(), true, big.getMoneda(txtTotal.getText().replace("Total: ", "")), instancias, miTipo,
                    txtIdSistema.getText(),big.getMoneda(txtSubTotal.getText()));
//            devuelta.setNC(big.getMoneda(txtNc.getText()));
            devuelta.show();
        }

        if (instancias.getCancelarFactura()) {
            borrarAdiciones();
            Logs.log("DEVOLVIO LA FACTURA");
            instancias.setCancelarFactura(false);
            return;
        } else {
//            Logs.log("Siguio con el proceso");
        }

        String factura = "", factura2 = "", prefijo = "";
        int fila = 0;
//        for (int i = 0; i < tblComprobantes.getRowCount(); i++) {
//            if ((Boolean) tblComprobantes.getValueAt(i, 2)) {
//                fila = i;
//            }
//        }
//

        //INICIO MODIFICACION PARA FACTURA ELECTRONICA
        
        //VALIDAMOS QUE TIPO DE COMPROBANTE ESTAN UTILIZANDO
        String comprobante = "";
        for (int i = 0; i < tblComprobantes.getRowCount(); i++) {
            if ((Boolean) tblComprobantes.getValueAt(i, 2)) {
                fila = i;
                if (null == tblComprobantes.getValueAt(i, 7)) {
                    comprobante = "";
                } else {
                    comprobante = tblComprobantes.getValueAt(i, 7).toString();
                }
            }
        }

        
        prefijo = tblComprobantes.getValueAt(fila, 8).toString();
                
//        String facturaEnvio=factura.replace("FACT-", "");
        String facturaEnvio=getNumeroFacturaRenvio();
        ArrayList<Map<String, String>> facturaRenvio = instancias.getSql().consultarFacturasRenvio(facturaEnvio);
            if(facturaRenvio.size()>0){
              factura2 =facturaEnvio; 
            }else{
              factura2 = getConsecutivo(fila);  
            }
        factura = factura2.replace(prefijo, "");


        //SI ES FACTURA ELECTRONICA, EL CLIENTE DEBE TENER CODIGO POSTAL POR OBLIGACIÓN
        if (comprobante.equals("Facturación Electronica")) {

            try {
                Socket s = new Socket(Propiedades.getInstancia().getHostSFTP(), Propiedades.getInstancia().getPuertoSFTP());
                if (s.isConnected()) {
                    Logs.log("Factuando electronicamente");
                }
            } catch (Exception e) {
                Logs.error(e);
                if(showMsg){
                     metodos.msgAdvertencia(null, "No se puede facturar electrónicamente sin conexión a internet !");
                }else{
                     Logs.warn("No se puede facturar electrónicamente sin conexión a internet !");
                }
                return;
            }
            
            
            //SI ES FACTURA ELECTRONICA DEBE TENER UN CLIENTE ASOCIADO POR OBLIGACIÓN
            if (txtNit.getText().equals("1010")) {
                if(showMsg){
                    metodos.msgAdvertencia(null, "Debe cargar un cliente para facturar electrónicamente");
                }else{
                    Logs.warn("Debe cargar un cliente para facturar electrónicamente");
                }

                return;
            }

            ndTercero nodo = instancias.getSql().getDatosTercero(txtIdSistema.getText());
            
             if (nodo.getCodigoMoneda() != null) {
                if (!nodo.getCodigoMoneda().equals("COP")) {
                    if (getTrmMoneda().trim().equals("")) {
                        metodos.msgAdvertencia(null, "Debe registrar el Valor Pactado ó TRM!");
                    }
                    if (getFechaMoneda().trim().equals("")) {
                        metodos.msgAdvertencia(null, "Debe registrar la fecha del Valor Pactado ó TRM!");
                    }
                }
            }
            
            if (nodo.getCategoria() != null) {
                if (nodo.getCategoria().equals("")) {
                    if(showMsg){
                         metodos.msgAdvertenciaAjustado(null, "El cliente debe tener codigo postal");
                    }else{
                         Logs.warn("El cliente debe tener codigo postal");
                    }

                   return;
                }
            }

            if (nodo.getDireccion() != null) {
                if (nodo.getDireccion().equals("")) {
                    
                    if(showMsg){
                         metodos.msgAdvertenciaAjustado(null, "El cliente debe tener una dirección");
                    }else{
                         Logs.warn("El cliente debe tener una dirección");
                    }
                    return;
                }
            }

            if (nodo.getId() != null) {
                if (nodo.getId().contains("-")) {
                    if (null == nodo.getId().split("-")[1]) {
                          if(showMsg){
                               metodos.msgAdvertencia(null, "El cliente debe tener dígito de verificación");
                          }else{
                               Logs.warn("El cliente debe tener dígito de verificación");
                          }    
                        return;
                    }
                }
//                else {
//                    metodos.msgAdvertencia(factura, "El cliente debe tener dígito de verificación");
//                    return "";
//                }
            }

            String vendedor = "";
            try {
                vendedor = cmbVendedor.getSelectedItem().toString();
            } catch (Exception e) {
            }

            if (vendedor != null) {
                if (vendedor.equals("") || vendedor.equals(" ")) {
                   if(showMsg){
                        metodos.msgAdvertencia(null, "Debe seleccionar un vendedor");
                   }else{
                        Logs.warn("Debe seleccionar un vendedor");
                   }   
                    return;
                }
            } else {
                   if(showMsg){
                        metodos.msgAdvertenciaAjustado(null, "Debe seleccionar un vendedor");
                   }else{
                        Logs.warn("Debe seleccionar un vendedor");
                   } 
                return;
            }
            
            if (facturaRenvio.size() > 0) {
                setNumeroFacturaRenvio(facturaRenvio.get(0).get("numeroFactura"));
            }
            
             try {
                boolean generacionFacturaElectronica = aplicarFacturacionElectronica(factura, factura2);
                if (!generacionFacturaElectronica) {   
                    borrarAdiciones();
                    instancias.getSql().desbloquearConsecutivosfactura();
                    facturandoPedidos = false;
                    instancias.setCancelarFactura(false);
                    return;
                }else{
                    instancias.getSql().incrementarFacturaActualYDesbloquear(tblComprobantes.getValueAt(fila, 0).toString());   
                }
                
                Gson gSon = new Gson();
                try {
                    RespuestaServicioEnvioFacturas respuestaApi;
                    respuestaApi = gSon.fromJson(getRespuesta(), RespuestaServicioEnvioFacturas.class);
                    LogsFacturaApi(respuestaApi, facturaEnvio);
                } catch (Exception e1) {
                    Respuesta respuestaError = gSon.fromJson(getRespuesta(), Respuesta.class);
                    instancias.getSql().almacenarLogsServicioFacturacion("0", facturaEnvio, "", "Error en el Servicio", "", respuestaError.getMensaje(),"0");
                } 
                
            } catch (Exception e) {
                e.printStackTrace();
                instancias.getSql().desbloquearConsecutivosfactura();
                return;
            }
        }else{
            FacturacionPos facturacionPos = new FacturacionPos(jsonFacturacion(factura,factura2),instancias.getNitEmisor(), instancias.getTokenEmisor(),instancias);
            facturacionPos.start();
        }
        
       
        //FIN MODIFICACION PARA FACTURA ELECTRONICA

        String vendedor = "";
        try {
            vendedor = cmbVendedor.getSelectedItem().toString();
        } catch (Exception e) {
            vendedor = "";
        }

        String congelada = "";
        try {
            congelada = instancias.getTitulo();
        } catch (Exception e) {
        }

        String ter = instancias.getTerminal();

        String turno = "";
        if ((Boolean) datos[54] && instancias.getConfiguraciones().isRestaurante()) {
            turno = instancias.getSql().getTurno();
        } else if (txtTurno.isVisible()) {
            turno = txtTurno.getText();
        }

        ndFactura nodo;
        instancias.getSql().agregarVerificarFactura(factura, txtIdSistema.getText(), factura2, ter,
                big.getMoneda(txtTotal.getText().replace("Total: ", "")),
                metodos.fechaConsulta(metodosGenerales.fecha()), metodos.fechaConsulta(txtVencimiento.getText()),
                metodos.fechaConsulta(metodos.sumarFecha(txtVencimiento.getText(), cantDias)), vendedor, congelada, txtPlaca1.getText(), turno);

        int diasPlazo;
        try {
            diasPlazo = Integer.parseInt(txtDiasPlazo.getText());
        } catch (Exception e) {
            diasPlazo = 0;
        }

        BigDecimal efectivo = instancias.getEfectivoDevuelta();
        if (diasPlazo > 0) {
//            efectivo = big.getMoneda(txtTotal.getText().replace("Total: ", ""));
            efectivo = big.getMoneda("0");
        }

        String por = "";
        if (cmbRtf.getSelectedIndex() == 0) {
            por = "0";
        } else {
            por = cmbRtf.getSelectedItem().toString();
        }

        if (congelada.length() > 20) {
            Object[] nombres = congelada.split("<br>");
            congelada = nombres[0].toString().substring(26, nombres[0].toString().length());
        }

        String hora = metodosGenerales.hora();

        for (int i = 0; i < tblProductos.getRowCount(); i++) {
            if (!tblProductos.getValueAt(i, 16).equals("REALIZADO")) {
                
            String bodega = txtBodega.getText();
            if (!instancias.getConfiguraciones().isInventarioBodegas()) {
                bodega = "123-22";
            }    
                 if(!instancias.getConfiguraciones().isRestaurante()) {
                try {
                    if (instancias.getSql().getDatosProducto(tblProductos.getValueAt(i, 32).toString(), baseUtilizada).getUsuario().equalsIgnoreCase("FACTURA")) {
                        
                        Map preparacion1=null;
                        String tipoMovimientos="FACTURA";
                        if(tblProductos.getValueAt(i, 30).toString().equals("Nuevo")){
                          tipoMovimientos="";  
                        }
                        instancias.getArmado().setTipoMovimiento(tipoMovimientos);
                        instancias.getArmado().facturarPreparado(tblProductos.getValueAt(i, 32).toString(),
                                tblProductos.getValueAt(i, 3).toString(), preparacion1, bodega);
                        idCosteo = instancias.getArmado().getIdCostoFactura();
                        costoCosteo=big.getMoneda(instancias.getArmado().getCostoFactura()+"");
                        instancias.getArmado().setTipoMovimiento("");
                    }
                } catch (Exception e) {
                    Logs.error(e);
                }
            }
                
                String imei = "", lote = "", idProd = "";

                if (instancias.getConfiguraciones().isProductosSerial()) {
                    imei = tblProductos.getValueAt(i, 27).toString();
                    lote = tblProductos.getValueAt(i, 28).toString();
                    idProd = tblProductos.getValueAt(i, 29).toString();
                }

                String consecutivoCosteo = idCosteo;
                BigDecimal costoCosteo1 = BigDecimal.ZERO, totalUtilidad = BigDecimal.ZERO;
                
                boolean isPreparacion = instancias.getSql().esPreparacionBool(tblProductos.getValueAt(i, 32).toString());
                if(isPreparacion){
                  Object dtDatos[][] = instancias.getSql().getArmadoCosteo(tblProductos.getValueAt(i, 32).toString());
                  costoCosteo = BigDecimal.valueOf(Double.parseDouble(dtDatos[0][0].toString().replace(",",".")));
                  consecutivoCosteo="0";
                }
                
                try {
                    costoCosteo1 = costoCosteo;
                } catch (Exception e) {
                    Logs.error(e);
                }

                if (consecutivoCosteo == null) {
                    consecutivoCosteo = "";
                }

                if (!consecutivoCosteo.equals("")) {
                    totalUtilidad = big.getMoneda(tblProductos.getValueAt(i, 9).toString()).subtract(costoCosteo1);
                } else {
                    totalUtilidad = big.getMoneda((String) tblProductos.getValueAt(i, 14));
                }

                Object[] ultimoMovimiento = instancias.getSql().getUltimoPonderado(tblProductos.getValueAt(i, 32).toString());
                double pond;
                try {
                    pond = big.formatDouble(ultimoMovimiento[4].toString());
                } catch (Exception e) {
                    pond = 0;
                }
                if(!consecutivoCosteo.equals("")){
                     pond=big.formatDouble(big.getBigDecimal(costoCosteo1));
                }
                
                String numeroOrdenCompra = "";
                 
                 if(!txtTurno.getText().trim().equals("")){
                    numeroOrdenCompra = txtTurno.getText().trim();    
                 }
                
                String trm = "", fechatrm = "";

                Object[] vector = {factura, txtIdSistema.getText(), vendedor, "", metodos.fechaConsulta(metodosGenerales.fecha()), metodos.fechaConsulta(txtVencimiento.getText()),
                    efectivo, instancias.getNcDevuelta(), instancias.getChequeDevuelta(), instancias.getTarjetaDevuelta(),
                    big.getMoneda(txtTotal.getText().replace("Total: ", "")), big.getMoneda(txtTotalDescuentos.getText()),
                    big.getMoneda(txtTotalIva.getText()), big.getMoneda(txtSubTotal.getText()), "",
                    factura.replace("FACT-", ""), false, "", !txtFechaFactura.getText().equals(txtVencimiento.getText()),
                    "", instancias.getUsuario(), big.getMoneda(txtRiva.getText()), big.getMoneda("0"), big.getMoneda(txtRtf.getText()), big.getMonedaToDouble(por),
                    txtObservaciones.getText(), false, "", false, "", "", metodos.fechaConsulta(metodos.sumarFecha(txtVencimiento.getText(), cantDias)), instancias.getTerminal(),
                    "PENDIENTE", "", instancias.getDevuelta(), factura2, instancias.getResolucion(), metodos.fechaConsulta(metodosGenerales.fecha()), "", "",
                    "0", txtPlaca1.getText(), "", "", "", "",
                    "", congelada, tblProductos.getValueAt(i, 32), big.getMoneda((String) tblProductos.getValueAt(i, 2)),
//                    tblProductos.getValueAt(i, 3).toString().replace(",", "."),
                    formatVal(big.formatDouble(big.getMonedaToDouble(tblProductos.getValueAt(i, Identidad.Cant).toString().replace(".", "")))),
                    big.getMoneda((String) tblProductos.getValueAt(i, 6)),
                    big.getMoneda((String) tblProductos.getValueAt(i, 9)), big.getMoneda((String) tblProductos.getValueAt(i, 33)),
                    big.getMoneda((String) tblProductos.getValueAt(i, 4)), "", totalUtilidad, "",
                    big.getBigDecimal(tblProductos.getValueAt(i, 5).toString().replace(",", ".")).setScale(2, RoundingMode.DOWN) + "",
                    tblProductos.getValueAt(i, 1), tblProductos.getValueAt(i, 12) + "", tblProductos.getValueAt(i, 13).toString().replace(",", "."),
                    "PENDIENTE", tblProductos.getValueAt(i, 7), tblProductos.getValueAt(i, 19), big.getMoneda(tblProductos.getValueAt(i, 20).toString()),
                    tblProductos.getValueAt(i, 21).toString(), big.getMoneda(txtImpuesto.getText()), turno, big.getMoneda(txtTotalImpoconsumo.getText()), instancias.getFranquisia(),
                    instancias.getComision(), instancias.getValorComision(), instancias.getTotalFacturaComision(), imei, lote, idProd, "",
                    instancias.getTarjetaCredito(), instancias.getTotalPropina(), instancias.getPorcPropina(), consecutivoCosteo, hora,
                    tblProductos.getValueAt(i, 23).toString().replace(".", "").replace(",", "."), big.getMoneda((String) tblProductos.getValueAt(i, 8)),
                    chkSisteCredito.isSelected(), txtBodega.getText(), big.getBigDecimal(pond), txtModeloContable.getText(), "", trm, fechatrm, numeroOrdenCompra
                };

                idCosteo = "";
                costoCosteo = BigDecimal.ZERO;
                nodo = metodos.llenarFactura(vector);

                if (!instancias.getSql().agregarFactura(nodo)) {
                    boolean noPuedaGuardar = false;
//                    instancias.getSql().eliminarFactura(factura);
//                    while (!noPuedaGuardar) {
//                        noPuedaGuardar = instancias.getSql().eliminarFactura(factura);
//                    }

                    metodos.msgError(null, "Hubo un problema al guardar la factura");
                }
            }

            String bodega = txtBodega.getText();
            if (!instancias.getConfiguraciones().isInventarioBodegas()) {
                bodega = "123-22";
            }

            if (instancias.getConfiguraciones().isRestaurante()) {
                if (instancias.getSql().getDatosProducto(tblProductos.getValueAt(i, 32).toString(), baseUtilizada).getUsuario().equalsIgnoreCase("FACTURA")) {
//                    String preparacion = "";
                      Map preparacion = new HashMap();
                      String cadena="";
                      try {
                            cadena = tblProductos.getValueAt(i, 21).toString();
                            //ESTA TIRANDO ERROR AL NO SER UN DISEÑO 17/04/2021
                            if (cadena.equals("")) {
//                                String codigoPreparacion = instancias.getSql().esPreparacion(tblProductos.getValueAt(i, 32).toString());
                                  String codigoPreparacion = instancias.getSql().tipoProductoPreparacion(tblProductos.getValueAt(i, 32).toString(),"COSTEO");
                                if(!codigoPreparacion.equals("COSTEO")){
//                                if (codigoPreparacion.equals(tblProductos.getValueAt(i, 32).toString())) {
                                    instancias.getSql().insertarPreparacion(factura, factura, tblProductos.getValueAt(i, 32).toString());
                                }
                                preparacion = cargarPreparada(factura, factura, tblProductos.getValueAt(i, 32).toString());
                                
                            } else {
                                preparacion = (Map) tblProductos.getValueAt(i, 21);
                            }
                    } catch (Exception e) {
                    }  
                      
                      
//                    try {
////                        preparacion = tblProductos.getValueAt(i, 21).toString();
//                          preparacion = (Map) tblProductos.getValueAt(i, 21);  
//                    } catch (Exception e) {
//                    }
                    
                    String fact = tipo() + "-" + lbNoFactura.getText();
                    String idCongelada="";
                    if(fact!=""){
//                     Object[] existenciaCongelada = new Object[0];                            
//                     existenciaCongelada = instancias.getSql().consultarExistenciaCongelada(fact, tblProductos.getValueAt(i, Identidad.idSistema).toString(), "1");
//                      if(existenciaCongelada[0] != null){
//                          idCongelada=existenciaCongelada[0].toString();
//                      }
                       idCongelada=tblProductos.getValueAt(i, 38) + "";
                    }
                    String descuentaInv="descontarTodo";
                    if(idCongelada.equals("")){
                       descuentaInv="descontarTodoFisico"; 
                    }
                    
                 //INGRESA EN FACTURA DE MESA
                   
                    instancias.getArmado().facturarPlato(tblProductos.getValueAt(i, 32).toString(), tblProductos.getValueAt(i, 3).toString(),
                            preparacion, descuentaInv, bodega,"","");
                }
            } 
//            else {
//                try {
//                    if (instancias.getSql().getDatosProducto(tblProductos.getValueAt(i, 32).toString(), baseUtilizada).getUsuario().equalsIgnoreCase("FACTURA")) {
//                        System.err.println("falta 21 facturarCongelada");
//                               String codigoPreparacion = instancias.getSql().esPreparacion(tblProductos.getValueAt(i, 32).toString());
//                               Map preparacion = null;
//                                if (codigoPreparacion.equals(tblProductos.getValueAt(i, 32).toString())) {
//                                    instancias.getSql().insertarPreparacion(factura, factura, tblProductos.getValueAt(i, 32).toString());
//                                }
//                                preparacion = cargarPreparada(factura, factura, tblProductos.getValueAt(i, 32).toString());
//                       String conteos = idCosteo;
//                        System.err.println("PREPARACION VA VACIO CUANDO ES UNA CONGELADA");
//                        System.err.println("PREPARACION VA VACIO CUANDO ES UNA CONGELADA costeo "+idCosteo);
//                        //PREPARACION VA VACIO CUANDO ES UNA CONGELADA
//                        System.err.println("2______________________facturarPreparado"+factura);
//                        for (int j = 0; j < tblProductos.getRowCount(); j++) {
//                            for (int k = 0; k < tblProductos.getColumnCount(); k++) {
//                                System.err.println(k+ " - "+tblProductos.getValueAt(j, k).toString());
//                            }    
//                        }
//                        Map preparacion1=null;
//                        String tipoMovimientos="FACTURA";
//                        if(tblProductos.getValueAt(i, 30).toString().equals("Nuevo")){
//                          tipoMovimientos="";  
//                        }
//                        instancias.getArmado().setTipoMovimiento(tipoMovimientos);
//                        instancias.getArmado().facturarPreparado(tblProductos.getValueAt(i, 32).toString(),
//                                tblProductos.getValueAt(i, 3).toString(), preparacion1, bodega);
//                    }
//                } catch (Exception e) {
//                    Logs.error(e);
//                }
//            }

            if (tipo.equals("facturacion") || tipo.equals("mesa")) {
                Map infDetalleProductosPrincipales = new HashMap();
                    try {
                        infDetalleProductosPrincipales = (Map) tblProductos.getValueAt(i, 21);
   //AQUI CON CARGA PARA CONGELADA                     
                    } catch (Exception e) {
                        Log.error("Error cadena  restaurante: ", e); 
                    }

                if (!infDetalleProductosPrincipales.isEmpty()) {
                    String fact = tipo() + "-" + lbNoFactura.getText();
                    String idCongelada="";
                    if(fact!=""){
                      idCongelada=tblProductos.getValueAt(i, 38) + "";  
//                     Object[] existenciaCongelada = new Object[0];                            
//                     existenciaCongelada = instancias.getSql().consultarExistenciaCongelada(fact, tblProductos.getValueAt(i, Identidad.idSistema).toString(), "1");
//                     
//                     if(existenciaCongelada[0] != null){
//                          idCongelada=existenciaCongelada[0].toString();
//                      }
                     if(idCongelada.equals("")){
                      instancias.getSql().updateFacturaPreparacion(factura,fact,idCongelada);
                     }
                    }
                     
                    //INGRESAMOS LOS PRODUCTOS ESCOJIDOS EN LOS PRODUCTOS CON CAMBIO
                 

                        String observaciones = "";
                        try {
                            observaciones = infDetalleProductosPrincipales.get("observacion").toString();
                        } catch (Exception e) {
                            Log.error("Error observaciones restaurante: ", e);
                        }

                        ArrayList<Map> preparaciones = new ArrayList<Map>();
                        ArrayList<Map> aderezosL = new ArrayList<Map>();
                        ArrayList<Map> adiciones = new ArrayList<Map>();
                        preparaciones = (ArrayList<Map>) infDetalleProductosPrincipales.get("ingredientes");
                        adiciones = (ArrayList<Map>) infDetalleProductosPrincipales.get("adiciones");
                        aderezosL = (ArrayList<Map>) infDetalleProductosPrincipales.get("aderezos");
                        String obser = "";
                        try{
                          obser = infDetalleProductosPrincipales.get("observaciones").toString();
                        }catch(Exception e){
                        }
                        String productoPrincipal ="";
                        try{
                        productoPrincipal = infDetalleProductosPrincipales.get("producto").toString(); 
                        }catch(Exception e){
                        }                      
                       
//INGRESAMOS LOS PRODUCTOS ESCOGIDOS EN LOS PRODUCTOS CON CAMBIO
                        String aderezo = "";
                        if (!aderezosL.isEmpty()) {
                            aderezo = "Aderezo: ";
                            String coma = "";
                            for (Map adere : aderezosL) {
                                aderezo += coma + adere.get("descripcion").toString();
                                coma = ", ";
                            }
                        }
                        String adici = "";
                        if (!adiciones.isEmpty()) {
                            adici = "Adicion: ";
                            String coma = "";
                            for (Map adicion : adiciones) {
                                adici += coma + adicion.get("cantidad").toString() + " " + adicion.get("descripcion").toString();
                                coma = ", ";
                            }
                        }
                        String ingredientes = "";
                        String sinIngredientes = "";
                        if (!preparaciones.isEmpty()) {
                            String coma = "";
                            String coma1 = "";
                            for (Map preparacion : preparaciones) {
                                if (preparacion.get("estado").toString().equals("true")) {
                                    if (!productoPrincipal.equals(preparacion.get("producto")) && preparacion.get("producto") != null && !preparacion.get("producto").equals("")) {
                                        if (preparacion.get("codigo").toString() != preparacion.get("producto").toString()) {
                                            ingredientes += coma1 + preparacion.get("cantidad").toString() + " " + preparacion.get("descripcion").toString();
                                            coma1 = ", ";
                                        }
                                    }
                                } else {
                                    sinIngredientes += coma + preparacion.get("descripcion").toString();
                                    coma = ", ";
                                }
                            }

                            if (ingredientes.length() > 0) {
                                ingredientes = "Con: " + ingredientes;
                            }
                            if (sinIngredientes.length() > 0) {
                                sinIngredientes = "Sin: " + sinIngredientes;
                            }
                        }                      
                   if (tipo.equals("mesa")) {
                        if (!manejoInsertUpdateComanda(factura, "", tblProductos.getValueAt(i, Identidad.idSistema).toString(), tblProductos.getValueAt(i, Identidad.Descripción).toString(),
                                sinIngredientes, ingredientes, adici, aderezo, formatVal(big.formatDouble(big.getMonedaToDouble(tblProductos.getValueAt(i, Identidad.Cant).toString().replace(".", "")))), obser, turno, "", "PLATO-" + i, idCongelada)) {
                            metodos.msgError(null, "Error al guardar la comanda.");
                        }
                    } else if (tipo.equals("facturacion")) {
                       
                        if (!manejoInsertUpdateComanda("", factura, tblProductos.getValueAt(i, Identidad.idSistema).toString(), tblProductos.getValueAt(i, Identidad.Descripción).toString(),
                                sinIngredientes, ingredientes, adici, aderezo, formatVal(big.formatDouble(big.getMonedaToDouble(tblProductos.getValueAt(i, Identidad.Cant).toString().replace(".", "")))), obser, turno, observaciones, "PLATO-" + i, idCongelada)) {
                            metodos.msgError(null, "Error al guardar la comanda.");
                        }
                    }
                }

                instancias.getSql().cambiarEstadoMesa(instancias.getTitulo(), "DISPONIBLE");
            }

            ndProducto producto = instancias.getSql().getDatosProducto(tblProductos.getValueAt(i, 32).toString(), baseUtilizada);
            double cantidad;
            double inventario;
            double fisicoInventario;
            double congeladaCant;

            try {
                congeladaCant = Double.parseDouble(producto.getCongelada().replace(",", "."));
            } catch (Exception e) {
                congeladaCant = 0;
            }
            
            try {
                cantidad = Double.parseDouble(producto.getVentas().replace(",", "."));
            } catch (Exception e) {
                cantidad = 0;
            }

            try {
                inventario = Double.parseDouble(producto.getInventario().replace(",", "."));
            } catch (Exception e) {
                inventario = 0;
            }

            try {
                fisicoInventario = Double.parseDouble(producto.getFisicoInventario().replace(",", "."));
            } catch (Exception e) {
                fisicoInventario = 0;
            }

            double cant2;
            try {
                cant2 = Double.parseDouble(tblProductos.getValueAt(i, 13).toString());
            } catch (Exception e) {
                cant2 = Double.parseDouble(tblProductos.getValueAt(i, 13).toString().substring(0, tblProductos.getValueAt(i, 13).toString().length() - 2));
            }

            inventario = inventario - cant2;
            
            //realizo las validacion ya que previamente se hadescontado esta cantidad del inventario
            if(fisicoInventario+congeladaCant >= cant2){
                if(congeladaCant >= cant2){
                 fisicoInventario=fisicoInventario;
                }else{
                  fisicoInventario = (fisicoInventario+congeladaCant) - cant2; 
                }               
            }
            
            double total = cantidad + cant2;
            double congeladaTotal = 0;
            double costeo=0;
            if(congeladaCant>0){
             congeladaTotal = congeladaCant - cant2; 
            }
            
//            try {
//                costeo = Double.parseDouble(producto.getCosteo().replace(",", "."));
//            } catch (Exception e) {
//                costeo = 0;
//            }

//            String codigoPreparacion = instancias.getSql().tipoProductoPreparacion(producto.getIdSistema(), "COSTEO");
//            if (codigoPreparacion.equals("COSTEO")) {
//                costeo = costeo - cant2;
//                instancias.getSql().modificarInventario("costeo", String.valueOf(df.format(costeo)).replace(".", ","), tblProductos.getValueAt(i, 32).toString(), baseUtilizada);
//            }
            
            String totalCongelada = String.valueOf(df.format(congeladaTotal)).replace(".", ",");
            String total1 = String.valueOf(df.format(total)).replace(".", ",");
            String inventario1 = String.valueOf(df.format(inventario)).replace(".", ",");
            String fisicoInventario1 = String.valueOf(df.format(fisicoInventario)).replace(".", ",");
          
            instancias.getSql().modificarInventario("congelada",totalCongelada, tblProductos.getValueAt(i, 32).toString(), baseUtilizada);
            instancias.getSql().modificarInventario("ventas", total1, tblProductos.getValueAt(i, 32).toString(), baseUtilizada);
            instancias.getSql().modificarInventario("inventario", inventario1, tblProductos.getValueAt(i, 32).toString(), baseUtilizada);
            instancias.getSql().modificarInventario("fisicoInventario", fisicoInventario1, tblProductos.getValueAt(i, 32).toString(), baseUtilizada);

            // DESCONTAR DEL INVENTARIO DETALLADO //
            if (instancias.getConfiguraciones().isProductosSerial()) {
                String cod = "";
                try {
                    cod = tblProductos.getValueAt(i, 29).toString();
                } catch (Exception e) {
                }

                if (!cod.equals("")) {
                    String tipoProd = "";
                    if (producto.getTipoProducto() != null) {
                        if (producto.getTipoProducto().equals("IMEI")) {
                            tipoProd = "Imei";
                        } else if (producto.getTipoProducto().equals("Fecha/Lote")) {
                            tipoProd = "Fecha/Lote";
                        } else if (producto.getTipoProducto().equals("Color")) {
                            tipoProd = "Color";
                        } else if (producto.getTipoProducto().equals("Serial")) {
                            tipoProd = "Serial";
                        } else if (producto.getTipoProducto().equals("Talla")) {
                            tipoProd = "Talla";
                        } else if (producto.getTipoProducto().equals("ColorTalla")) {
                            tipoProd = "ColorTalla";
                        } else if (producto.getTipoProducto().equals("SerialColor")) {
                            tipoProd = "SerialColor";
                        } else {
                            tipoProd = "";
                        }
                    }

                    if (tipoProd.equals("Imei") || tipoProd.equals("Serial") || tipoProd.equals("SerialColor")) {
                        instancias.getSql().modificarEstadoDetalleProductos(cod, "NO-DISPONIBLE");
                    } else {
                        Double cantidadActual = Double.parseDouble(instancias.getSql().getCantidadProductos(cod).replace(",", "."));
                        cantidadActual = cantidadActual - cant2;
                        String cantidadFinal = String.valueOf(df.format(cantidadActual)).replace(".", ",");
                        instancias.getSql().modificarCantidadesDetalleProductos(cod, cantidadFinal);
                    }
                }
            }
            // FIN DE DESCONTAR DEL INVENTARIO SEPARADO // 
        }

        this.tipo = "facturacion";
//        aumentarConsecutivo(fila);

        if (!txtFechaFactura.getText().equals(txtVencimiento.getText())) {
            if (txtDiasPlazo.getText().equals("")) {
                txtDiasPlazo.setText("0");
            }

            boolean cuotas = false;
            if (facturaCredito) {
                cuotas = true;
            }

            String tipoCxc = "FACT";

            Object[] vectCxc = {factura, tipoCxc, "PEND", "", big.getMoneda(txtTotal.getText().replace("Total: ", "")), txtDiasPlazo.getText(),
                metodos.fechaConsulta(txtVencimiento.getText()), instancias.getUsuario(), instancias.getTerminal(), cuotas, factura2
            };

            ndCxc nodoCxc = metodos.llenarCxc(vectCxc);

            if (!instancias.getSql().agregarCxc(nodoCxc)) {
                metodos.msgError(null, "Hubo un problema al guardar la factura en cartera");
            }
        }

        metodos.msgExito(null, "Factura Exitosa");
        instancias.setEfectivoDevuelta(big.getBigDecimal("0"));

        if (imprimir) {
            imprimir(factura, factura2);
        }

        this.tipo = "mesa";

        instancias.getSql().eliminarMesa("CONGELADA-" + consecutivoMesa);

        if (instancias.getConfiguraciones().isRestaurante()) {
            instancias.getMesas().cargarRegistrosMesas();
            instancias.getMesas().cargarRegistros();
            instancias.getMesas().setSelected(true);
        } else {
            instancias.getMesas1().cargarRegistros();
            instancias.getMesas1().setSelected(true);
        }

        if (!instancias.getMenu().getSeVeElMenu()) {
            instancias.getMenu().expandirMenu();
        }
    }

    public void modificarFacturaElectronica(String factura) {

        for (int i = 0; i < tblProductos.getRowCount(); i++) {
            String producto = tblProductos.getValueAt(i, 32).toString();
            String cantidad = tblProductos.getValueAt(i, 3).toString();
            String plu = tblProductos.getValueAt(i, 12).toString();
            Object[][] facturas = instancias.getSql().getTodosRegistrosFacturas(factura, producto, cantidad, plu);
            if (facturas.length > 0) {
                String por = "";
                if (cmbRtf.getSelectedIndex() == 0) {
                    por = "0";
                } else {
                    por = cmbRtf.getSelectedItem().toString();
                }

                String consecutivoCosteo = idCosteo;
                BigDecimal costoCosteo1 = BigDecimal.ZERO, totalUtilidad = BigDecimal.ZERO;

                boolean isPreparacion = instancias.getSql().esPreparacionBool(tblProductos.getValueAt(i, 32).toString());
                if (isPreparacion) {
                    Object dtDatos[][] = instancias.getSql().getArmadoCosteo(tblProductos.getValueAt(i, 32).toString());
                    costoCosteo = BigDecimal.valueOf(Double.parseDouble(dtDatos[0][0].toString().replace(",", ".")));
                    consecutivoCosteo = "0";
                }

                try {
                    costoCosteo1 = costoCosteo;
                } catch (Exception e) {
                    Logs.error(e);
                }

                if (consecutivoCosteo == null) {
                    consecutivoCosteo = "";
                }

                if (!consecutivoCosteo.equals("")) {
                    totalUtilidad = big.getMoneda(tblProductos.getValueAt(i, 9).toString()).subtract(costoCosteo1);
                } else {
                    totalUtilidad = big.getMoneda((String) tblProductos.getValueAt(i, 14));
                }
                BigDecimal porcDesc;
                try {
                    porcDesc = big.getBigDecimal(tblProductos.getValueAt(i, 5).toString().replace(",", ".")).setScale(2, RoundingMode.DOWN);
                } catch (Exception e) {
                    Logs.error(e);
                    porcDesc = BigDecimal.ZERO;
                }
                
                                
                String trm = "", fechatrm = "";
                
                ndTercero tercero = instancias.getSql().getDatosTercero(txtIdSistema.getText());
                if (tercero.getCodigoMoneda() != null) {
                    if (!tercero.getCodigoMoneda().equals("COP")) {
                        trm = getTrmMoneda().trim();
                        fechatrm = getFechaMoneda().trim();
                    }
                }
                Object[] datos = {
                    instancias.getEfectivoDevuelta(), instancias.getNcDevuelta(), instancias.getChequeDevuelta(), instancias.getTarjetaDevuelta(),
                    big.getMoneda(txtTotal.getText().replace("Total: ", "")), big.getMoneda(txtTotalDescuentos.getText()), big.getMoneda(txtTotalIva.getText()), big.getMoneda(txtSubTotal.getText()),
                    big.getMoneda(txtTotalImpoconsumo.getText()), instancias.getTarjetaCredito(), big.getMoneda(txtRiva.getText()),
                    big.getMoneda("0"), big.getMoneda(txtRtf.getText()), big.getMonedaToDouble(por), txtObservaciones.getText(),
                    instancias.getResolucion(), big.getMoneda((String) tblProductos.getValueAt(i, 6)),
                    big.getMoneda((String) tblProductos.getValueAt(i, 9)), big.getMoneda((String) tblProductos.getValueAt(i, 33)), big.getMoneda((String) tblProductos.getValueAt(i, 4)), big.getMoneda((String) tblProductos.getValueAt(i, 8)),
                     totalUtilidad, porcDesc + "", tblProductos.getValueAt(i, 7), tblProductos.getValueAt(i, 23).toString().replace(".", "").replace(",", "."),
                    big.getMoneda(tblProductos.getValueAt(i, 20).toString()), big.getMoneda(txtImpuesto.getText()), instancias.getComision(), instancias.getValorComision(),
                    instancias.getTotalFacturaComision(), instancias.getTarjetaCredito(), instancias.getTotalPropina(), instancias.getPorcPropina(),
                    trm, fechatrm,tblProductos.getValueAt(i, 31).toString()
                };
                boolean estadoModificar =  instancias.getSql().ModificarFactura(factura , producto, cantidad, plu, tblProductos.getValueAt(i, 38).toString() ,datos);
               
            }
        }
    }
    
    public void guardarCredito(String factura, String factura2) {
//        String credito = "CREDITO-" + sql.getNumConsecutivo("CREDITO")[0];
        String credito = "CREDITO-" + factura.replace("FACT-", "");
        Object[] vector = {credito, factura, instancias.getUsuario(),
            metodos.fechaConsulta(metodosGenerales.fecha()), txtIdSistema.getText(), "", "",
            metodos.fechaConsulta(metodosGenerales.fecha()), metodos.desdeDate(dtFechaDesenvolso.getCurrent()),
            txtObservaciones.getText(), big.getMoneda(txtValorVenta.getText()),
            big.getMoneda(txtValorCredito.getText()), big.getMoneda(txtCuotas.getText()),
            big.getMoneda(txtInteres.getText()), big.getMoneda(txtTotalIntereses.getText()),
            big.getMoneda(txtTotal.getText().replace("Total: ", "")), big.getMoneda(txtCuotaInicial.getText()), factura2};

        ndPrestamo nodo = metodos.llenarPrestamo(vector);
        if (!instancias.getSql().agregarPrestamo(nodo)) {
            metodos.msgError(null, "Hubo un problema al guardar el Credito");
            return;
        }

        for (int i = 0; i < tblCuotas.getRowCount(); i++) {
            Object[] vectorDos = {credito + "-" + modeloCredito.getValueAt(i, 0).toString(), credito, modeloCredito.getValueAt(i, 0).toString(),
                metodos.fechaConsulta(modeloCredito.getValueAt(i, 1).toString()), instancias.getUsuario(), metodos.fechaConsulta(metodosGenerales.fecha()),
                "", "", big.getMoneda(modeloCredito.getValueAt(i, 2).toString()), big.getMoneda(modeloCredito.getValueAt(i, 3).toString()),
                big.getMoneda(modeloCredito.getValueAt(i, 4).toString()), big.getMoneda("0"), big.getMoneda("0"), big.getMoneda("0"),
                big.getMoneda("0"), ""};

            ndCuota nodoDos = metodos.llenarCuota(vectorDos);
            if (!instancias.getSql().agregarCuota(nodoDos)) {
                metodos.msgError(null, "Error al guardar la Cuota: " + i);
                return;
            }
        }

        try {
            Thread.sleep(500);
        } catch (Exception e) {
            Logs.error(e);
        }

        credito1 = credito;

//        if (!sql.aumentarConsecutivo("CREDITO", Integer.parseInt((String) sql.getNumConsecutivo("CREDITO")[0]) + 1)) {
        //            metodos.msgError(null, "Hubo un problema al guardar en el consecutivo del credito");
        //        }
    }

    public String getTipo() {

        if (instancias.getConfiguraciones().isMedico()) {
            if (rdCarta.isSelected()) {
                return "facturaMedicaCompleta";
            } else {
                return "facturaMedica";
            }
        }

        if (rdCarta.isSelected()) {
            switch (tipo) {
                case "facturacion":
                    return "facturaCompleta" + instancias.getRegimen();
                case "cotizacion":
                    return "cotiza";
                case "orden":
                    return "";
                case "pedido":
                    return "pedidoCompleta";
                case "separe":
                    return "separeCompleta";
            }
        } else if (rdPos.isSelected()) {
            switch (tipo) {
                case "facturacion":
                    return "pos" + instancias.getRegimen();
                case "cotizacion":
                    return "cotizaPos";
                case "orden":
                    return "";
                case "pedido":
                    return "pedidoPos";
                case "separe":
                    return "separePos";
            }

        }

        /*if (instancias.getFactura().getCantidadProductos() > 6) {
         return "facturaCompleta" + instancias.getRegimen();
         }*/
        switch (tipo) {
            case "facturacion":
                return "factura" + instancias.getRegimen();
            case "cotizacion":
                return "cotiza";
            case "orden":
                return "";
            case "pedido":
                return "pedido";
            case "separe":
                return "separe";
        }
        return "";

    }

    public void ventanaProductos(String codigo) {
        String base = txtBodega.getText();
        if (base.equals("123-22")) {
            base = "productos1";
        } else if (base.equals("BODEGA-1")) {
            base = "productos1bodega1";
        } else if (base.equals("BODEGA-2")) {
            base = "productos1bodega2";
        } else if (base.equals("BODEGA-3")) {
            base = "productos1bodega3";
        } else if (base.equals("BODEGA-4")) {
            base = "productos1bodega4";
        } else {
            base = "productos1";
        }

        buscProductos buscar = new buscProductos(null, true, false, "facturacion", base);
        buscar.setOpc("factura");
        buscar.setFactura(this);
        buscar.setLocationRelativeTo(null);
        instancias.setBusProductos(buscar);
        instancias.setCampoActual(txtCodProducto);
        txtCodProducto.requestFocus();
        buscar.noEncontrado(codigo.replace("'", "//"));
        buscar.show();
    }

    public void ventanaTipoVehiculos(String nit) {
        buscTipoVehiculo buscar = new buscTipoVehiculo(instancias.getMenu(), true);
        buscar.setLocationRelativeTo(null);
        instancias.setBuscTipoVehiculo(buscar);
        instancias.setCampoActual(txtTipoVehiculo);
        txtTipoVehiculo.requestFocus();
        buscar.setInstancia(instancias);
        buscar.noEncontrado(nit);
        buscar.show();
    }

    public void ventanaProblemas() {
        buscProblemas buscar = new buscProblemas(null, true, false);
        buscar.setOpc("orden");
        buscar.setFactura(this);
        buscar.setLocationRelativeTo(null);
        instancias.setBuscarProblemas(buscar);
//        buscar.noEncontrado(codigo.replace("'", "//"));
        buscar.show();
    }

    public void ventanaProblemas1() {
        buscProblemas buscar = new buscProblemas(null, true, false);
        buscar.setOpc("orden1");
        buscar.setFactura(this);
        buscar.setLocationRelativeTo(null);
        instancias.setBuscarProblemas(buscar);
        buscar.show();
    }

    public void cargarProblema(String problemas, String tipoOrden) {
        if (tipoOrden.equals("1")) {
            tblArticulos.setValueAt(problemas, tblArticulos.getSelectedRow(), 3);
        } else {
            tblArticulos.setValueAt(problemas, tblArticulos.getSelectedRow(), 4);
        }
    }

    public void cargarPreparacion(String fila, String cadena, String prod, Map detalleProductosPrincipales) {
      
        Map infIngrediente = new HashMap();
        if (fila.equals("")) {
               
            cargarProducto(prod, "1", 1, "", "", cadena, false, "", "", "", "", "", "");
         
            tblProductos.setValueAt(detalleProductosPrincipales, tblProductos.getRowCount() - 1, 21);
        } else {
            //SI TIENE LA FILA CON PRODUCTOS
            tblProductos.setValueAt(detalleProductosPrincipales, Integer.parseInt(fila), 21);

            String congelada = tipo() + "-" + lbNoFactura.getText();
            String idComanda = tblProductos.getValueAt(Integer.parseInt(fila), 38) + "";
                     
            if (!congelada.equals("") && !idComanda.equals("")) {
             
                ArrayList<Map<String, String>> verificaPreparadas = instancias.getSql().getVerificaProductosPreparacion(congelada, idComanda);
                 for (Map verificaPreparada : verificaPreparadas) {
                   
                   eliminadosPrepearada(detalleProductosPrincipales,verificaPreparada,"aderezos");
                    
                  }
                
                if (verificaPreparadas.size() > 0) {
                    modificarPreparacion(idComanda,congelada, detalleProductosPrincipales);    
                }
            }
//            infIngrediente = (Map) tblProductos.getValueAt(Integer.parseInt(fila), 21);
           
        }
    }
    
    public void eliminadosPrepearada(Map detalleProductosPrincipales,Map verificaPreparada,String nombre){
        ArrayList<Map<String, String>> ingredientes = (ArrayList<Map<String, String>>)detalleProductosPrincipales.get(nombre);
        for (Map ingrediente : ingredientes) {
            if(ingrediente.containsValue(verificaPreparada.get("codigo"))){
               System.err.println("Encontrado::: "+verificaPreparada.get("codigo"));
           }else{
              System.err.println("No Encontrado::: "+verificaPreparada.get("codigo"));
           }   
        }    
    }
    
    public void modificarPreparacion(String idComanda, String congelada, Map preparadas) {

//       if(preparadas.get("ingredientes")){
       ArrayList<Map<String, String>> ingredientes = (ArrayList<Map<String, String>>)preparadas.get("ingredientes");
       ArrayList<Map<String, String>> adiciones = (ArrayList<Map<String, String>>)preparadas.get("adiciones");
       ArrayList<Map<String, String>> aderezos = (ArrayList<Map<String, String>>)preparadas.get("aderezos");
       
        if(ingredientes.size()>0){
          iteraModificarPreparacion(idComanda,congelada,ingredientes);
        }else{
          instancias.getSql().deletePreparacion(congelada,idComanda,"observaciones");
        }
        if(adiciones.size()>0){
          iteraModificarPreparacion(idComanda,congelada,adiciones);
        }else{
          instancias.getSql().deletePreparacion(congelada,idComanda,"adiciones");
        }
        if(aderezos.size()>0){
          iteraModificarPreparacion(idComanda,congelada,aderezos);
        }else{
          instancias.getSql().deletePreparacion(congelada,idComanda,"aderezos");
        }
          instancias.getSql().updatePreparacionObservacion(idComanda,congelada,preparadas.get("observaciones").toString(),"observaciones");
    }
    
    public void iteraModificarPreparacion(String idCongelada,String congelada,ArrayList<Map<String, String>> preparadas){

      String baseUtilizada = obtenerBase();
      String sql=instancias.getSql().agregarPreparacionCabecera();
      String coma="";
      boolean estado=false;
        for (Map preparada : preparadas) {
            String codigo=preparada.get("codigo").toString();
            String codigoCambio=preparada.get("codigo").toString();
            int cantExiste=0;
            ArrayList<Map<String, String>> verificaProducto = null;
            if(!preparada.get("codigo").toString().equals("") && !preparada.get("producto").toString().equals("")){
              codigo=preparada.get("producto").toString();
              codigoCambio=preparada.get("codigo").toString();
              verificaProducto = instancias.getSql().getVerificaProductosPreparacion(congelada,idCongelada,codigoCambio,preparada.get("tipo").toString());
              cantExiste=verificaProducto.size();
       
            }
            if(cantExiste==0){
              verificaProducto = instancias.getSql().getVerificaProductosPreparacion(congelada,idCongelada,codigo,preparada.get("tipo").toString());
            
            }
           if(verificaProducto.size() == 0){
            estado=true;  
            sql+=coma+instancias.getSql().agregarPreparacion(congelada,idCongelada,preparada.get("tipo").toString(),preparada.get("codigo").toString(),
                 preparada.get("descripcion").toString(),preparada.get("cantidad").toString(),preparada.get("estado").toString(),
                 preparada.get("posicion").toString(),preparada.get("producto").toString());  
             coma=" , ";
          }else{
              //si la un producto en adiciones cambia de true a false se debe devolver a los inventarios 
              
               if ((preparada.get("tipo").toString().equals("adiciones") || preparada.get("tipo").toString().equals("principal"))) {
                   for (Map verificar : verificaProducto) {
                       if (verificar.get("codigo").toString().equals(preparada.get("codigo")) && !preparada.get("estado").toString().equals(verificar.get("estado").toString())) {
                           if ( verificar.get("estado").toString().equals("true")) {
                               double total = Double.parseDouble(preparada.get("cantidad").toString());
                               instancias.getSql().modificarInventarioSuma("fisicoInventario", total + "", preparada.get("codigo").toString(), baseUtilizada);
                               total = total * -1;
                               instancias.getSql().modificarInventarioSuma("congelada", total + "", preparada.get("codigo").toString(), baseUtilizada);
                               
                           } else if (verificar.get("estado").toString().equals("false")) {
                               double total = Double.parseDouble(preparada.get("cantidad").toString());
                               instancias.getSql().modificarInventarioSuma("fisicoInventario", (-1 * total) + "", preparada.get("codigo").toString(), baseUtilizada);
                               instancias.getSql().modificarInventarioSuma("congelada", total + "", preparada.get("codigo").toString(), baseUtilizada);
                           }
                       }
                   }
               }
            instancias.getSql().updatePreparacion(congelada,idCongelada,codigo, preparada.get("tipo").toString(), preparada.get("cantidad").toString(), preparada.get("estado").toString(), preparada.get("producto").toString(),codigoCambio,preparada.get("descripcion").toString());
          }
       }
  
       if (estado) {
            if (!instancias.getSql().ejecutarQuery(sql+";")) {
                if (showMsg) {
                    metodos.msgError(null, "Hubo un error al guardar la Preparacion.");
                } else {
                    Logs.error("Hubo un error al guardar la Preparacion.");
                }
            }
        }
    }
    
    public void cargarPreparacion2(String fila, String cadena, String prod, Map detalleProductosPrincipales) {
      
        if (fila.equals("")) {        
            cargarProducto(prod, "1", 1, "", "", cadena, false, "", "", "", "", "", "");
            tblProductos.setValueAt(cadena, tblProductos.getRowCount() - 1, 21);
        } else {
            //recupera cadena guardada en el producto si ya se ha almacenado
            String cadenaInsertada = tblProductos.getValueAt(Integer.parseInt(fila), 21).toString();
            // valida que la cadena este llena
            if (!cadena.equals("")) {         
                // valida que la cadenaInsertada este llena
             if (!cadenaInsertada.equals("")) { 
                   //valida que la cadena del producto preparado sea igual a la cadena donde se adicionan dichos productos
                 if(validarCadenaAdiciones(cadenaInsertada).equals(validarCadenaAdiciones(cadena))){
                 // si el igual no se modifica la cadena
                 }else{
                 //si es diferente solo se adicionan los productos diferentes
                 
                 }
             }else{
                //cargue productos   
             }
            }
          
            tblProductos.setValueAt(cadena, Integer.parseInt(fila), 21);
            String producto = tblProductos.getValueAt(Integer.parseInt(fila), 1).toString();
            String valor = tblProductos.getValueAt(Integer.parseInt(fila), 2).toString();
            String valorCambio=valor.replace("$", "").replace(".", "").replace(",", ".").trim();
            double valorProducto=Double.parseDouble(valorCambio);
            tblProductos.setValueAt(producto+" Adicion : (XXX)", Integer.parseInt(fila), 1);
            valorProducto=(valorProducto+400);
            tblProductos.setValueAt(String.valueOf(valorProducto).replace(".", ","), Integer.parseInt(fila), 2);
            metodosGenerales.presionarEnter(instancias.getCampoActual(),0);
        }
        
    }
    
    public String validarCadenaAdiciones(String cadena){
      String opciones2[];
      String opciones = cadena.split("; ")[3];
                if (!opciones.equals("")) {
                    opciones2 = opciones.split(", ");
                    for (int k = 0; k < opciones2.length; k++) {
                        String principal = opciones2[k].split("/")[0];
                       
                        String codigo = opciones2[k].split("/")[1];
                     
                        String cant = opciones2[k].split("/")[2];
                        
                        String estadoProducto = opciones2[k].split("/")[3];
                      
                        if (!(principal.equals("") || principal.equals(" "))) {
                            if (!principal.equals(codigo)) {
                                if (estadoProducto.equals(" true")) {
                                    
                                }
                            }
                        }
                    }
                }
        return cadena;
    }

    public void cargarCliente(String nit) {
       
        //ver que tiene escrito enel campo nit si hay algo lo busco por ahi en caso de que venga vacio
        ndTercero nodo = instancias.getSql().getDatosTercero(nit);

        if (nodo.getId() != null) {
            
            if (nodo.isActivo()) {
                metodos.msgError(null, "Este cliente esta inactivado");
                lbNit.requestFocus();
                return;
            }

            if (tipo.equals("pedido") && nit.equals("1010")) {
                txtNombre.setEnabled(true);
                txtNombre.setEditable(true);
            } else {
                txtNombre.setEnabled(false);
                txtNombre.setEditable(false);
            }

            if(nodo.getCodigoMoneda()!=null){
              btnCambioMoneda.setVisible(true);
              jLMoneda.setVisible(true);
            }else{
              btnCambioMoneda.setVisible(false);
              jLMoneda.setVisible(false);
            }
            
            txtIdSistema.setText(nodo.getIdSistema());
            txtNit.setText(nodo.getId());
            txtNombre.setText(nodo.getNombre());
            txtObservaciones.setText(nodo.getPlacas());

            try {
                String nombreVendedor = "";
                if (!nodo.getVendedor().equals("")) {
                    nombreVendedor = instancias.getSql().getNombreEmpleado(nodo.getVendedor());
                    cmbVendedor.setSelectedItem(nombreVendedor);
                }
            } catch (Exception e) {
                 Logs.log("Error cargar cliente "+e.getMessage());
                Logs.error(e);
            }

            try {
                cmbListaPrecio.setSelectedItem(nodo.getLista());
            } catch (Exception e) {
                Logs.log("Error cmbListaPrecio "+e.getMessage());
                cmbListaPrecio.setSelectedIndex(0);
            }

            if (focusDiasPlazo) {
                txtDiasPlazo.requestFocus();
                focusDiasPlazo = false;
            } else {
                txtCodProducto.requestFocus();
            }

            if (tipo.equals("separe")) {
                txtDiasPlazo.requestFocus();
            }

            if ((Boolean) datos[95]) {
                txtDiasPlazo.setText(nodo.getPlazo());
                calcularDiasPlazo(null);
            }

            if ((Boolean) datos[Identidad.ocultarInformacionCliente]) {
                String cupo = nodo.getCupo(), plazo = nodo.getPlazo();

                if (!nodo.getId().equals("1010")) {
                    Object[] resul = instancias.getSql().getCarteraPendiente1(nodo.getIdSistema());
                    BigDecimal cartera = big.getBigDecimal(resul[0]);
                    if (cartera == null) {
                        cartera = big.getBigDecimal("0");
                    } else {
                        BigDecimal valorTotal = big.getBigDecimal(resul[1]);
                        cartera = cartera.subtract(valorTotal);
                    }

                    if (cupo.equals("") || cupo == null) {
                        cupo = "0";
                    }

                    try {
                        if (big.getBigDecimal(cupo).subtract(cartera).compareTo(BigDecimal.ZERO) != 1) {
                            lbCupo.setText("CARTERA PENDIENTE: " + big.setMoneda(cartera) + "  Y  TIENE CUPO DE: " + this.simbolo + " 0");
                            txtCupo.setText(this.simbolo + " 0");
                            txtCartera.setText(big.setMoneda(cartera));
                        } else {
                            lbCupo.setText("CARTERA PENDIENTE DE: " + big.setMoneda(cartera) + "  Y  TIENE CUPO DE: " + big.setMoneda(big.getBigDecimal(cupo).subtract(cartera)));
                            txtCupo.setText(big.setMoneda(big.getBigDecimal(cupo).subtract(cartera)));
                            txtCartera.setText(big.setMoneda(cartera));
                        }
                    } catch (Exception e) {
                        Logs.error(e);
                   
                        lbCupo.setText("CARTERA PENDIENTE DE: " + big.setMoneda(cartera) + "  Y  TIENE CUPO DE: " + this.simbolo + " 0");
                        txtCupo.setText(this.simbolo + " 0");
                        txtCartera.setText(big.setMoneda(cartera));
                    }

                    lbCupo.setVisible(true);
                }
            }

            return;
        }
        NC = null;
        ventanaTerceros(nit);
    }

    public void ventanaTerceros(String nit) {
        buscClientes buscar = new buscClientes(instancias.getMenu(), true, false, null, "");
        buscar.setOpc("factura");
        buscar.setFactura(this);
        buscar.setLocationRelativeTo(null);
        instancias.setBusClientes(buscar);
        instancias.setCampoActual(txtNit);
        txtNit.requestFocus();
        buscar.noEncontrado(nit);
        buscar.show();
    }

    public void ventanaTerceros1(String nit) {
        buscClientes buscar = new buscClientes(instancias.getMenu(), true, false, null, "");
        buscar.setOpc("factura");
        buscar.setFactura(this);
        buscar.setLocationRelativeTo(null);
        instancias.setBusClientes(buscar);
        buscar.noEncontrado(nit);
        buscar.show();
    }

    public void cargarTotales() {

        int i;
        double subtotal = 0;
        double iva = 0;
        double impoconsumo = 0;
        double total = 0;
        double descuentos = 0;
        double rtf = 0;
        double rti = 0;
        double copago = 0;
        double cantUnidades = 0;
        double impuesto = 0;
        double descGeneral = 0;
        double valorBolsa = 0;
        try{
          valorBolsa = big.getMonedaToDouble(datos[53].toString());
        }catch(Exception ex){
          valorBolsa = 0;
        }
        for (i = 0; i < tblProductos.getRowCount(); i++) {
            if (!tblProductos.getValueAt(i, 16).equals("REALIZADO") || tipo.equalsIgnoreCase("orden")) {

                if (tblProductos.getValueAt(i, 32).equals("PROD-000000032")) {
                    try {
                        impuesto = big.formatDouble(valorBolsa * big.getMonedaToDouble(tblProductos.getValueAt(i, 3).toString()));
                    } catch (Exception e) {
                        impuesto = big.formatDouble(valorBolsa * big.getMonedaToDouble(tblProductos.getValueAt(i, 3).toString()));
                    }
                }
                double sub = big.getMonedaToDouble(tblProductos.getValueAt(i, 4).toString());
                subtotal = big.formatDouble(subtotal + sub);
                descuentos = big.formatDouble(descuentos + big.getMonedaToDouble(tblProductos.getValueAt(i, 6).toString()));

                impoconsumo = big.formatDouble(impoconsumo + big.getMonedaToDouble(tblProductos.getValueAt(i, 8).toString()));
                iva = big.formatDouble(iva + big.getMonedaToDouble(tblProductos.getValueAt(i, 33).toString()));

                total = big.formatDouble(total + big.getMonedaToDouble(tblProductos.getValueAt(i, 9).toString()));
                copago = big.formatDouble(copago + big.getMonedaToDouble(tblProductos.getValueAt(i, 17).toString()));
            }

            cantUnidades = big.formatDouble(cantUnidades + big.getMonedaToDouble(tblProductos.getValueAt(i, 3).toString()));
        }

        try {
            descGeneral = big.getMonedaToDouble(txtDescGeneral.getText());
        } catch (Exception e) {
        }

        descuentos = big.formatDouble(descuentos + descGeneral);
        if (cmbRtf.getSelectedIndex() > 0) {
            
            rtf = big.formatDouble(big.formatDouble(subtotal) * (big.getMonedaToDouble(cmbRtf.getSelectedItem().toString()) / 100));
      
        }

        if (descGeneral > 0) {
            subtotal = big.formatDouble(subtotal - descGeneral);
            iva = big.formatDouble((subtotal * 1.19) - subtotal);
        }

        if (chkReteIva.isSelected()) {
            rti = big.formatDouble((iva * 15) / 100);
        }

        txtSubTotal.setText(big.setMoneda(subtotal));
        txtTotalDescuentos.setText(big.setMoneda(descuentos));
        txtTotalIva.setText(big.setMoneda(iva));
        txtTotalImpoconsumo.setText(big.setMoneda(impoconsumo));
        txtCopago.setText(big.setMoneda(copago));
        txtImpuesto.setText(big.setMoneda(impuesto));

        
        //VALIDAMOS QUE TIPO DE COMPROBANTE SE ESTAN UTILIZANDO
        String comprobante = "";
        for (int j = 0; j < tblComprobantes.getRowCount(); j++) {
            if ((Boolean) tblComprobantes.getValueAt(j, 2)) {
                if (null == tblComprobantes.getValueAt(j, 7)) {
                    comprobante = "";
                } else {
                    comprobante = tblComprobantes.getValueAt(j, 7).toString();
                }
            }
        }
        
        if (comprobante.equals("Facturación Electronica") && instancias.getConfiguraciones().isFacturaElectronica()) {
            if (facturaCredito) {
                txtValorVenta.setText(big.setMonedaExacta(total - (rti + descGeneral)));
            } else {
                txtTotal.setText("Total: " + big.setMoneda((total + impuesto) - (rti + descGeneral)));
            }
        }else{
            if (facturaCredito) {
                txtValorVenta.setText(big.setMonedaExacta(total - (rtf + rti + descGeneral)));
            } else {
                txtTotal.setText("Total: " + big.setMoneda((total + impuesto) - (rtf + rti + descGeneral)));
            } 
        }
        
        txtRtf.setText(big.setMonedaExacta(rtf));
        txtRiva.setText(big.setMonedaExacta(rti));

//        if (!txtDiasPlazo.getText().equals("0") && !txtDiasPlazo.getText().equals("")) {
//            this.setPlazo(txtDiasPlazo.getText(), big.getMoneda(txtTotal.getText().replace("Total: ", "")));
//        }
        txtCantProductos.setText(Integer.toString(tblProductos.getRowCount()));
        txtCantUnidades.setText("" + cantUnidades);

        calcularEfectivo();

    }

    public void calcularEfectivo() {
        BigDecimal total = big.getMoneda(txtTotal.getText().replace("Total: ", ""));
    }

    public void desdeTraslado(String cliente, String[][] productos) {

        limpiar(true, "SI");
        txtNit.setText(cliente);
        cargarCliente(cliente);

        for (String[] producto : productos) {
            cargarProducto((String) producto[0], new Double((String) producto[1]).intValue() + "", 1, "", "", "", true, "", "", "", "", "", "");
        }

        tblProductos.editCellAt(tblProductos.getSelectedRow(), 6);
        tblProductos.setColumnSelectionInterval(6, 6);
        tblProductos.transferFocus();

        for (int i = 0; i < tblProductos.getRowCount(); i++) {
            tblProductos.setValueAt(productos[i][1], i, 3);

            BigDecimal valor, cantidad, descuento, iva, subtotal, total, porcentaje, aux;

            tblProductos.setValueAt(big.setMonedaExacta(big.getMoneda(String.valueOf(tblProductos.getValueAt(i, 6)))), i, 6);

            valor = big.getMoneda(String.valueOf(tblProductos.getValueAt(i, 2)));
            cantidad = big.getMoneda(String.valueOf(tblProductos.getValueAt(i, 3)));
            subtotal = valor.multiply(cantidad);
            Double porcentaje2 = Double.parseDouble(String.valueOf(tblProductos.getValueAt(i, 5))) / 100;
            porcentaje = big.getBigDecimal(porcentaje2);
            descuento = big.getMoneda(big.setNumero(subtotal.multiply(porcentaje)));
            iva = big.getMoneda(String.valueOf(tblProductos.getValueAt(i, 7)));
            iva = (iva.divide(big.getBigDecimal("100"))).add(big.getBigDecimal("1"));
            aux = valor.divide(iva, 2, RoundingMode.DOWN);
            aux = valor.subtract(aux);
            subtotal = (subtotal.subtract(descuento)).subtract(aux);
            total = subtotal.add(aux);

            tblProductos.setValueAt(big.setMonedaExacta(valor), i, 2);
            tblProductos.setValueAt(big.setMonedaExacta(subtotal), i, 4);
            tblProductos.setValueAt(big.setMonedaExacta(descuento), i, 6);
            tblProductos.setValueAt(big.setMonedaExacta(aux).replace(this.simbolo + " ", ""), i, 33);
            tblProductos.setValueAt(big.setMonedaExacta(total), i, 9);
        }
        cargarTotales();
    }

    public void desdeOrden(String cliente, String productos) {

        limpiar(true, "SI");
        txtNit.setText(cliente);
        cargarCliente(cliente);
        cargarProducto(productos, "1", 1, "", "", "", true, "", "", "", "", "", "");

        for (int i = 0; i < tblProductos.getRowCount(); i++) {
//            tblProductos.setValueAt(productos[i][1], i, 3);
//            tblProductos.setValueAt(productos[i][2], i, 5);
//            tblProductos.setValueAt(productos[i][3], i, 2);

            BigDecimal valor, cantidad, descuento, iva, subtotal, total, porcentaje, aux;

            tblProductos.setValueAt(big.setMonedaExacta(big.getMoneda(String.valueOf(tblProductos.getValueAt(i, 6)))), i, 6);

            valor = big.getMoneda(String.valueOf(tblProductos.getValueAt(i, 2)));
            cantidad = big.getMoneda(String.valueOf(tblProductos.getValueAt(i, 3)));
            subtotal = valor.multiply(cantidad);
            Double porcentaje2 = Double.parseDouble(String.valueOf(tblProductos.getValueAt(i, 5))) / 100;
            porcentaje = big.getBigDecimal(porcentaje2);
            descuento = big.getMoneda(big.setNumero(subtotal.multiply(porcentaje)));
            iva = big.getMoneda(String.valueOf(tblProductos.getValueAt(i, 7)));
            iva = (iva.divide(big.getBigDecimal("100"))).add(big.getBigDecimal("1"));
            aux = valor.divide(iva, 2, RoundingMode.DOWN);
            aux = valor.subtract(aux);

            subtotal = (subtotal.subtract(descuento)).subtract(aux);
            total = subtotal.add(aux);

            tblProductos.setValueAt(big.setMonedaExacta(valor), i, 2);
            tblProductos.setValueAt(big.setMonedaExacta(subtotal), i, 4);
            tblProductos.setValueAt(big.setMonedaExacta(descuento), i, 6);
            tblProductos.setValueAt(big.setMonedaExacta(aux).replace(this.simbolo + " ", ""), i, 33);
            tblProductos.setValueAt(big.setMonedaExacta(total), i, 9);

        }

        saltarPasosFactura = false;
        cargarTotales();
        btnGuardarActionPerformed(null);
    }

    public void desdeHospitalizacion(String cliente, String consecutivo, String horas, String dias) {

        limpiar(true, "SI");
        txtNit.setText(cliente);
        cargarCliente(cliente);
        if (!horas.equals("0")) {
            
            cargarProducto("HSP1", horas, 1, "", "", "", true, "", "", "", "", "", "");
        }

        if (!dias.equals("0")) {
            cargarProducto("HSP2", dias, 1, "", "", "", true, "", "", "", "", "", "");
        }

        Object[][] productosAdicionales = instancias.getSql().getProductosHospitalizaciones(consecutivo);

        if (productosAdicionales != null) {
            for (int i = 0; i < productosAdicionales.length; i++) {
                cargarProducto(productosAdicionales[i][0].toString(), productosAdicionales[i][2].toString(), 1, "", "", "", false, "", "", "", "", "", "");
              
                tblProductos.setValueAt(productosAdicionales[i][3].toString(), tblProductos.getRowCount() - 1, 2);
                KeyEvent evento = new KeyEvent(tblProductos, 0, 0, 0, 0);
                evento.setKeyCode(KeyEvent.VK_ENTER);
                tblProductosKeyReleased(evento);
            }
        }

        cargarTotales();
        txtObservaciones.setText(consecutivo);
        saltarPasosFactura = false;
        ndHospitalizacion = consecutivo;
        diasHospitalizacion = dias;
        horasHospitalizacion = horas;
        btnGuardar1ActionPerformed(null);
    }

    public void desdeGuarderia(String cliente, String consecutivo, String horas, String dias) {

        limpiar(true, "SI");
        txtNit.setText(cliente);
        cargarCliente(cliente);
        if (!horas.equals("0")) {
            cargarProducto("GD1", horas, 1, "", "", "", true, "", "", "", "", "", "");
        }

        if (!dias.equals("0")) {
            cargarProducto("GD2", dias, 1, "", "", "", true, "", "", "", "", "", "");
        }

        Object[][] productosAdicionales = instancias.getSql().getProductosProductosServiciosAdicionales(consecutivo);
        if (productosAdicionales != null) {
            for (int i = 0; i < productosAdicionales.length; i++) {
                cargarProducto(productosAdicionales[i][0].toString(), productosAdicionales[i][1].toString(), Integer.parseInt(productosAdicionales[i][8].toString()), productosAdicionales[i][3].toString(),
                        productosAdicionales[i][6].toString(), productosAdicionales[i][7].toString(), false, "", "", "", "", "", "");
                
                tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(productosAdicionales[i][2].toString())), tblProductos.getRowCount() - 1, 2);
                KeyEvent evento = new KeyEvent(tblProductos, 0, 0, 0, 0);
                evento.setKeyCode(KeyEvent.VK_ENTER);
                tblProductosKeyReleased(evento);
            }
        }

        cargarTotales();
        txtObservaciones.setText(consecutivo);
        saltarPasosFactura = false;
        ndGuarderia = consecutivo;
        btnGuardar1ActionPerformed(null);
    }

    public void desdePeluqueria(String cliente, String productos, String consecutivo) {
        limpiar(true, "SI");
        txtNit.setText(cliente);
        cargarCliente(cliente);
        cargarProducto(productos, "1", 1, "", "", "", true, "", "", "", "", "", "");

        Object[][] productosAdicionales = instancias.getSql().getProductosProductosServiciosAdicionales(consecutivo);
        if (productosAdicionales != null) {
            for (int i = 0; i < productosAdicionales.length; i++) {
                cargarProducto(productosAdicionales[i][0].toString(), productosAdicionales[i][1].toString(), Integer.parseInt(productosAdicionales[i][8].toString()), productosAdicionales[i][3].toString(),
                        productosAdicionales[i][6].toString(), productosAdicionales[i][7].toString(), true, "", "", "", "", "", "");

                tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(productosAdicionales[i][2].toString())), tblProductos.getRowCount() - 1, 2);
                KeyEvent evento = new KeyEvent(tblProductos, 0, 0, 0, 0);
                evento.setKeyCode(KeyEvent.VK_ENTER);
                tblProductosKeyReleased(evento);
            }
        }

        cargarTotales();
        txtObservaciones.setText(consecutivo);
        saltarPasosFactura = false;
        ndPeluqueria = consecutivo;
        btnGuardar1ActionPerformed(null);
    }

    public String facturarServicioPTM(String servicio, int valor, String contrato) throws Exception{
        limpiar(true, "SI");
        txtNit.setText("1010");
        cargarCliente("1010");
        cargarProducto("PTM", "1", 1, "", "", "", true, "", "", "", "", "", "");
        tblProductos.setValueAt("SERVICIO PTM (" + servicio + ")", 0, 1);
        tblProductos.setValueAt(big.setMoneda(big.getMoneda(String.valueOf(valor))), 0, 2);
        cargarTotales();
        txtObservaciones.setText("Contrato: " + contrato);
        saltarPasosFactura = true;
        return validacionInicialFactura(false);
//        btnGuardarActionPerformed(null);
    }

    public String desdeOrdenMedica(String cliente, String[][] productos, boolean opc) throws Exception{
        limpiar(true, "");
        rdTipoNormal.setSelected(!opc);
        rdTipoCopago.setSelected(opc);

        txtNit.setText(cliente);
        cargarCliente(cliente);

        for (int i = 0; i < productos.length; i++) {
            try {
                if (!productos[i][0].equals("") || productos[i][0] != null) {
                    cargarProducto(productos[i][0], productos[i][1], 1, "", "", "", false, "", "", "", "", "", "");
                    tblProductos.setValueAt(productos[i][2], tblProductos.getRowCount() - 1, 6);
                  
                    tblProductos.setValueAt(big.getMoneda(productos[i][3]), tblProductos.getRowCount() - 1, 2);
                    tblProductos.setValueAt(productos[i][4], tblProductos.getRowCount() - 1, 17);
                    calcularTabla(tblProductos.getRowCount() - 1, false);
                }
            } catch (Exception e) {
                Logs.error(e);
            }
        }

//        intDevuelta devuelta = new intDevuelta(null, false, big.getBigDecimal("0"), null, null, cliente);<
        return facturar(null, true, "ordenMedica");
    }

    public String desdeOrdenMedica(String cliente, String[] productos, boolean opc) throws Exception{

        limpiar(true, "");

        rdTipoNormal.setSelected(!opc);
        rdTipoCopago.setSelected(opc);

        txtNit.setText(cliente);
        cargarCliente(cliente);
        cargarProducto(productos[0], productos[1], 1, "", "", "", false, "", "", "", "", "", "");

        tblProductos.setValueAt(productos[2], 0, 6);
        tblProductos.setValueAt(productos[3], 0, 2);
        tblProductos.setValueAt(productos[4], 0, 17);

        calcularTabla(0, false);

        saltarPasosFactura = true;

        return facturar(null, true, "ordenMedica");
    }

    public void setVendedores(String[] Vendedores, String[] mecanicos) {
        cmbVendedor.removeAllItems();
        for (String Vendedore : Vendedores) {
            cmbVendedor.addItem(Vendedore);
        }
        for (String Vendedore : mecanicos) {
            cmbVendedor.addItem(Vendedore);
        }
    }

    public void setVendedores(String[] Vendedores) {
        cmbVendedor.removeAllItems();
        for (String Vendedore : Vendedores) {
            cmbVendedor.addItem(Vendedore);
        }
    }

    public void setDomiciliarios(String[] Domiciliarios) {
        for (String Vendedore : Domiciliarios) {
            cmbVendedor.addItem(Vendedore);
        }
    }

    public void desdeTrasladosBodegas(Object[][] datos, String cliente, String diasPlazo) {
        limpiar(true, "");

        trasladoBod = "SI";

        txtNit.setText(cliente);
        cargarCliente(cliente);

        txtDiasPlazo.setText(diasPlazo);
        calcularDiasPlazo(null);

        for (int i = 0; i < datos.length; i++) {
            cargarProducto(datos[i][0].toString(), datos[i][1].toString(), 1, datos[i][3].toString(),
                    datos[i][4].toString(), datos[i][5].toString(), false, "", "", "", "", "", "");
           
            tblProductos.setValueAt(big.setMoneda(big.getMoneda(datos[i][2].toString())), tblProductos.getRowCount() - 1, 2);
            calcularTabla(tblProductos.getRowCount() - 1, false);
        }

        cargarTotales();

        saltarPasosFactura = true;
        btnGuardar1ActionPerformed(null);
    }

    public void nuevoTercero(String id) {
        
        txtNit.setText(id);
        ndTercero nodo = instancias.getSql().getDatosTercero(id);
        txtIdSistema.setText(nodo.getIdSistema());
        txtNombre.setText(nodo.getNombre());
        txtCodProducto.requestFocus();
    }

    public void nuevoProducto(String id) {
        cargarProducto(id, "1", 1, "", "", "", true, "", "", "", "", "", "");
    }

    public void modificarCuentaCobro(String idCuenta) throws Exception{
        try {
            txtCargar.setText(idCuenta);
            cargarMovimiento();

            BigDecimal porcAumento = BigDecimal.ZERO;
            try {
                porcAumento = big.getBigDecimal(datos[112].toString());
            } catch (Exception e) {
                porcAumento = BigDecimal.ONE;
            }

            for (int i = 0; i < tblProductos.getRowCount(); i++) {
                BigDecimal valorUnit = big.getMoneda(tblProductos.getValueAt(i, 2).toString());
                BigDecimal subtotal = valorUnit.multiply(porcAumento).divide(big.getBigDecimal(100), 2, RoundingMode.DOWN);

                valorUnit = subtotal.add(valorUnit);

                tblProductos.setValueAt(big.setMoneda(valorUnit), i, 2);
                calcularTabla(i, false);
            }

            saltarPasosFactura = true;
            actualizar();
        } catch (Exception e) {
            throw e;
        }
    }

    public void desdeMensualidad(Object[][] Productos, String cliente, String diasPlazo, String placa) {

        limpiar(true, "");
        int i = 0;
        for (Object[] reg : Productos) {
            cargarProducto((String) reg[0], (String) reg[1], 1, "", "", "", false, "", "", "", "", (String) reg[3] + " hasta " + (String) reg[4], "");
            tblProductos.setValueAt(big.setMonedaExacta(big.getBigDecimal(reg[6].toString())), i, 2);
//            tblProductos.setValueAt(big.getBigDecimal(reg[5].toString()), i, 5);
            tblProductos.setColumnSelectionInterval(0, 0);
            tblProductos.setRowSelectionInterval(i, i);
            KeyEvent x = new KeyEvent(this, WIDTH, WIDTH, WIDTH, KeyEvent.VK_ENTER);
            tblProductosKeyReleased(x);
            i++;
        }

        txtNit.setText(cliente);
        cargarCliente(cliente);

        txtDiasPlazo.setText(diasPlazo);
        calcularDiasPlazo(null);

        txtObservaciones.setText("VENTA DE MENSUALIDAD");
        txtPlaca1.setText(placa);

        saltarPasosFactura = true;
        if (metodos.msgPregunta(null, "¿Desea imprimir factura?") == 0) {
            btnGuardar1ActionPerformed(null);
        } else {
            btnGuardarActionPerformed(null);
        }
    }

    public void cargarTablaRestaurante() {

        Object[][] imagenes = instancias.getSql().getGruposVisualizarFactura();
        DefaultTableModel modelo = (DefaultTableModel) tblImagenes.getModel();

        while (tblImagenes.getRowCount() > 0) {
            modelo.removeRow(0);
        }

        int cantGrupos = imagenes.length, cant = 0;
        while (cantGrupos - 5 > 0) {
            cant = cant + 1;
            cantGrupos = cantGrupos - 5;
        }
        if (cantGrupos > 0) {
            cant = cant + 1;
        }

        for (int i = 0; i < cant * 2; i++) {
            modelo.addRow(new Object[]{"", "", "", ""});
        }

        int contador = 0;
        ImageIcon img;
        if (imagenes.length > 0) {
            for (int i = 0; i < cant * 2; i = i + 2) {
                try {
                    // se cambio el 5 por imagenes.length ya que se producia un error
                    for (int j = 0; j < imagenes.length; j++) {
                        if(imagenes[contador][2]!=""){
                            ImageIcon fot = new ImageIcon(Instancias.getInstancias().getSql().getImagen("grupos\\IMG-" + imagenes[contador][2] + ".jpg"));
                            Icon icono = new ImageIcon(fot.getImage().getScaledInstance(250, 250, Image.SCALE_DEFAULT));
                            modelo.setValueAt(new JLabel(icono), i, j);
                            tblImagenes.setRowHeight(i, 150);
                            modelo.setValueAt(imagenes[contador][1] + ". " + imagenes[contador][0], i + 1, j);
                            tblImagenes.setRowHeight(i + 1, 35);
                         }
                        contador = contador + 1;
                    }
                } catch (Exception e) {
                    Logs.error(e);
                }
            }
        }
    }
//EL QUE MODIFIQUE YO
      
    public void cargarProducto(String codigo, String cantidad, int plu, String imei, String lote, String idProd, Boolean agrupar, String talla, String color,
            String temp, String fechaVence, String detalleMensualidad,String idComanda) {
        if(cantidad.indexOf("$")  != - 1){
        cantidad = formatVal(big.formatDouble(big.getMonedaToDouble(cantidad.replace(".", ""))));
        }
        String baseUtilizada = obtenerBase();
        ndProducto nodo = null;
        int pluProducto=plu;

        String CodigoProd = "";
        if (codigo.equals("")) {
            CodigoProd = "";
        } else {
            Object[][] listado = instancias.getSql().getCodigosRelacionados(codigo, " where codigo");
            if (listado.length > 0) {
                codigo = listado[0][0].toString();
            }

            nodo = instancias.getSql().getDatosProducto(codigo, baseUtilizada);
            if (nodo.getIdSistema() != null) {
                CodigoProd = nodo.getIdSistema();
            }
             if(nodo.getTipoProducto()!= ""){
	        this.dinamico = false;                
	        }else{
	        this.dinamico = true;
            }
        }

        if (!CodigoProd.equals("")) {
            if (codigo.equals(nodo.getCodigo2())) {
                plu = 2;
            } else if (codigo.equals(nodo.getCodigo3())) {
                plu = 3;
            } else if (codigo.equals(nodo.getCodigo4())) {
                plu = 4;
            } else if (codigo.equals(nodo.getCodigo5())) {
                plu = 5;
            } else if (codigo.equals(nodo.getCodigo6())) {
                plu = 6;
            } else if (codigo.equals(nodo.getCodigo7())) {
                plu = 7;
            } else if (codigo.equals(nodo.getCodigo8())) {
                plu = 8;
            }

            //factura sin inventario
            Boolean facturarSinInventario = (Boolean) datos[Identidad.facturarSinInventario];
            if (!facturarSinInventario) {
               if (nodo.getManejaInventario()) {
                   
                String cantidadProdct =cantidad;
                cantidadProdct = cantidadProdct.replace("$","").trim();
                cantidadProdct = cantidadProdct.replace(",", ".");
                
                
                String factura = tipo() + "-" + consecutivoMesa;
                Object[] existenciaCongelada = instancias.getSql().consultarExistenciaCongelada(factura, nodo.getIdSistema(), String.valueOf(plu));

//                if (existenciaCongelada[0] == null && !(consecutivoMesa == null)) {
                if (existenciaCongelada[0] == null && !(consecutivoMesa == null)) {
                  if(Double.parseDouble(nodo.getFisicoInventario().replace(",", ".")) < Double.parseDouble(cantidadProdct)){
                    metodos.msgError(null, "No tiene inventario suficiente");
                    return;
                  }
                }
              }
            }
            
            if (instancias.getConfiguraciones().isProductosSerial()) {
                for (int j = 0; j < tblProductos.getRowCount(); j++) {
                    String idPro = tblProductos.getValueAt(j, 29).toString();
		    String detalles = tblProductos.getValueAt(j, Identidad.Detalle).toString();
                    String plut = tblProductos.getValueAt(j, Identidad.plu).toString();
                    if (!idPro.equals("")) {
                        if (idPro.equals(idProd)) {
                            
                            if (!imei.equals("") && (pluProducto == Integer.parseInt(plut))) {
                                metodos.msgError(factura, "El imei '" + imei + "' ya esta cargado.");
                                return;
                            } else if(detalles.equals(lote+"-"+fechaVence) && (pluProducto == Integer.parseInt(plut))) {
                                metodos.msgError(factura, "Este producto con el lote '" + lote + "' ya se cargó.");
                                return;

                            }
                        }
                    }
                }
            }

            tblProductos.setDefaultRenderer(Object.class, new IconCellRenderer());

            try {
                int num = Integer.parseInt(datos[49].toString());
                if (!rdPos.isSelected()) {
                    if (num > 0) {
                        if (tblProductos.getRowCount() >= num) {
                            if (metodos.msgPregunta(factura, "Limite de productos, ¿Desea continuar?") != 0) {
                                return;
                            }
                        }
                    }
                }
            } catch (Exception e) {
                Logs.error(e);
            }

//            if (cantidad.contains(".")) {
//                cantidad = cantidad.replace(".", ",");
//            }
         
            if (agrupar) {
                if (nodo.getCodigo() != null) {
                    if (nodo.getGrupo() != null) {
                        if (nodo.getCodigo().equals("IMP01") || nodo.getGrupo().equals("GRP-02")) {
                            for (int j = 0; j < tblProductos.getRowCount(); j++) {
                                if (nodo.getIdSistema().equalsIgnoreCase((String) tblProductos.getValueAt(j, 32)) && (plu + "").equals(((int) tblProductos.getValueAt(j, 12)) + "")) {
//                                    tblProductos.setValueAt((big.getMoneda(tblProductos.getValueAt(j, 3).toString().replace(".", ",")).add(big.getMoneda(cantidad))).toString().replace(".", ","), j, 3);
                                    tblProductos.setValueAt(String.valueOf(new BigDecimal(tblProductos.getValueAt(j, 3).toString().replace(".", "").replace(",", ".")).add(new BigDecimal(cantidad))).replace(".", ","), j, 3);
                                    txtCodProducto.setText("");
                                    tblProductos.setColumnSelectionInterval(0, 0);
                                    tblProductos.setRowSelectionInterval(j, j);
                                    KeyEvent x = new KeyEvent(this, WIDTH, WIDTH, WIDTH, KeyEvent.VK_ENTER);
                                    tblProductosKeyReleased(x);
                                    if (instancias.isLector()) {
                                        txtCodProducto.requestFocus();
                                    } else {
                                        tblProductos.editCellAt(0, 3);
                                        tblProductos.setColumnSelectionInterval(3, 3);
                                        tblProductos.transferFocus();
                                    }
                                    return;
                                }
                            }
                        }
                    }
                }
            }

            if (agrupar) {
                try {
                    if ((Boolean) datos[Identidad.combinarProductos]) {
                        if (nodo.getUsuario().equals("ADMIN")) {
                            for (int j = 0; j < tblProductos.getRowCount(); j++) {
                                if (nodo.getIdSistema().equalsIgnoreCase((String) tblProductos.getValueAt(j, 32)) && (plu + "").equals(((int) tblProductos.getValueAt(j, 12)) + "")) {
                                    tblProductos.setValueAt(String.valueOf(new BigDecimal(tblProductos.getValueAt(j, 3).toString().replace(".", "").replace(",", ".")).add(new BigDecimal(cantidad))).replace(".", ","), j, 3);
                                    txtCodProducto.setText("");

                                    tblProductos.setColumnSelectionInterval(0, 0);
                                    tblProductos.setRowSelectionInterval(j, j);

                                    KeyEvent x = new KeyEvent(this, WIDTH, WIDTH, WIDTH, KeyEvent.VK_ENTER);
                                    tblProductosKeyReleased(x);

                                    if (instancias.isLector()) {
                                        txtCodProducto.requestFocus();
                                    } else {
                                        tblProductos.editCellAt(0, 3);
                                        tblProductos.setColumnSelectionInterval(3, 3);
                                        tblProductos.transferFocus();
                                    }

                                    txtCant.setText(datos[87].toString());

                                    return;
                                }
                            }
                        } else {

                        }
                    }
                } catch (Exception e) {
                    Logs.error(e);
                }
            }

            if (instancias.getSql().getProdActivo(nodo.getCodigo())) {
                metodos.msgError(null, "Este producto esta inactivo");
                lbProducto.requestFocus();
                return;
            }

            String tipo = "", productoEn = "";
            if (nodo.getTipoProd() != null) {
                if (nodo.getTipoProd().equals("Variable")) {
                    productoEn = "Desarrollo";
                    cantidad = "1";
                }
            }

            if (nodo.getTipoProducto() != null) {
                if (nodo.getTipoProducto().equals("IMEI")) {
                    tipo = "Imei";
                } else if (nodo.getTipoProducto().equals("Fecha/Lote")) {
                    tipo = "Fecha/Lote";
                } else if (nodo.getTipoProducto().equals("Color")) {
                    tipo = "Color";
                } else if (nodo.getTipoProducto().equals("Serial")) {
                    tipo = "Serial";
                } else if (nodo.getTipoProducto().equals("Talla")) {
                    tipo = "Talla";
                } else if (nodo.getTipoProducto().equals("ColorTalla")) {
                    tipo = "ColorTalla";
                } else if (nodo.getTipoProducto().equals("SerialColor")) {
                    tipo = "SerialColor";
                } else {
                    tipo = "";
                }
            }

            if (!tipo.equals("") && idProd.equals("") && !this.tipo.equals("cotizacion")) {
                String lugar = "";
                if (this.tipo.equals("facturacion")) {
                    lugar = "pnlFactura";
                } else if (this.tipo.equals("separe")) {
                    lugar = "separe";
                } else if (this.tipo.equals("pedido")) {
                    lugar = "pedido";
                } else {
                    lugar = "congelada";
                }

                dlgCompraDetallada1 compraDetallada = new dlgCompraDetallada1(null, true, tipo, nodo.getIdSistema(), null, "Salida", lugar, baseUtilizada, txtBodega.getText());
                compraDetallada.setFactura(this);
                compraDetallada.setLocationRelativeTo(null);
                compraDetallada.setVisible(true);
                return;

            } else if (productoEn.equals("Desarrollo") && instancias.getConfiguraciones().isRestaurante() && idProd.equals("") && !cargandoCongelada) {
                try {
                    instancias.getMenu().ocultarMenu("preparacion");
                    instancias.getPreparacion().cargarDatos(nodo.getIdSistema(), null, mesaCongelada, "", this.tipo);
                    instancias.getPreparacion().setSelected(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(pnlFactura.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
                
                 if (this.plu) {
                    this.plu = false;
                    int cant = 0;

                    if (nodo.isPlu2()) {
                        cant++;
                    }
                    if (nodo.isPlu3()) {
                        cant++;
                    }
                    if (nodo.isPlu4()) {
                        cant++;
                    }
                    if (nodo.getPlu5()) {
                        cant++;
                    }
                    if (nodo.getPlu6()) {
                        cant++;
                    }
                    if (nodo.getPlu7()) {
                        cant++;
                    }
                    if (nodo.getPlu8()) {
                        cant++;
                    }

                    if (cant > 0) {
                        seleccionarPLU pluu = new seleccionarPLU(null, true, obtenerBase());
                        pluu.setFactura(this);
                        pluu.setInstancias(instancias, nodo.getIdSistema(),tblProductos);
                        pluu.setOpc(this.tipo);
                        pluu.setVisible(true);
                        return;
                    }
                }
                return;
            } else {

                if (this.plu) {
                    this.plu = false;
                    int cant = 0;

                    if (nodo.isPlu2()) {
                        cant++;
                    }
                    if (nodo.isPlu3()) {
                        cant++;
                    }
                    if (nodo.isPlu4()) {
                        cant++;
                    }
                    if (nodo.getPlu5()) {
                        cant++;
                    }
                    if (nodo.getPlu6()) {
                        cant++;
                    }
                    if (nodo.getPlu7()) {
                        cant++;
                    }
                    if (nodo.getPlu8()) {
                        cant++;
                    }

                    if (cant > 0) {
                        seleccionarPLU pluu = new seleccionarPLU(null, true, obtenerBase());                        
                        pluu.setFactura(this);                        
                        pluu.setOpcAlterno(this.tipo);
                        pluu.setInstancias(instancias, nodo.getIdSistema(),tblProductos);
                        pluu.setOpc("factura");                      
                        pluu.setVisible(true);
                        return;
                    }
                }

                modeloInventario = (DefaultTableModel) tblInventario.getModel();
                double aux = 0, iva, valor;
                valor = big.formatDouble(big.getBigDecimal(nodo.getL1()));
                iva = big.formatDouble(big.getBigDecimal(nodo.getIva()));
                if(iva > 0){
                    iva = iva/100;
                    aux = big.formatDouble(valor/iva);
                }
                aux = valor - aux;

                double cant = big.getMonedaToDouble(nodo.getFisicoInventario());
                double cant2 = 1;
                String desc = nodo.getDescripcion();
                String lista = nodo.getL1(), lista1 = "L1";
                
                if(!txtNit.getText().isEmpty()){
                    ndTercero tercero = instancias.getSql().getDatosTercero(txtNit.getText());
                  
                    if(tercero != null && tercero.getLista() != null && !tercero.getLista().trim().isEmpty()){
                        
                            int cantProd = 1;

                            if (nodo.isPlu2()) {
                                cantProd++;
                            }
                            if (nodo.isPlu3()) {
                                cantProd++;
                            }
                            if (nodo.isPlu4()) {
                                cantProd++;
                            }
                            if (nodo.getPlu5()) {
                                cantProd++;
                            }
                            if (nodo.getPlu6()) {
                                cantProd++;
                            }
                            if (nodo.getPlu7()) {
                                cantProd++;
                            }
                            if (nodo.getPlu8()) {
                                cantProd++;
                            }
                        
                            int pluCli = Integer.valueOf(tercero.getLista().substring(1, 2));
                            
                       if(pluCli > cantProd){
                           if(plu > cantProd){
                                plu=1;
                            }
                        }

                        
                        if(plu != pluCli){
                             //se realiza consulta para que cuando se cargue por base de datos muestre el mensaje
                             String factura = tipo() + "-" + consecutivoMesa;
                             Object[] existenciaCongelada = new Object[0];
                             existenciaCongelada = instancias.getSql().consultarExistenciaCongelada(factura,nodo.getIdSistema(),String.valueOf(plu));
                        
                            if(existenciaCongelada[0] == null){
                              if(showMsg){  
                                 metodos.msgAdvertenciaAjustado(null, "El cliente "+tercero.getNombre() +" tiene definido la lista #"+pluCli+", Esta va ser cambiada por la lista #"+plu+"."); 
                              }else{
                                Logs.error("El cliente "+tercero.getNombre() +" tiene definido la lista #"+pluCli+", Esta va ser cambiada por la lista #"+plu+".");
                              } 
                            }
                        }
                       
                    }
                }
                
               
                switch (plu) {
                    case 1:
                        cant2 = big.formatDouble("1");
                        desc = nodo.getDescripcion();
                        lista = nodo.getL1();
                        cant = big.formatDouble(cant/cant2);
                        lista1 = "L1";
                        break;
                    case 2:
                        cant2 = big.formatDouble(nodo.getCantidad2());
                        desc = nodo.getDescripcion2();
                        lista = nodo.getL2();
                        cant = big.formatDouble(cant/cant2);
                        lista1 = "L2";
                        break;
                    case 3:
                        cant2 = big.formatDouble(nodo.getCantidad3());
                        desc = nodo.getDescripcion3();
                        lista = nodo.getL3();
                        cant = big.formatDouble(cant/cant2);
                        lista1 = "L3";
                        break;
                    case 4:
                        cant2 = big.formatDouble(nodo.getCantidad4());
                        desc = nodo.getDescripcion4();
                        lista = nodo.getL4();
                        cant = big.formatDouble(cant/cant2);
                        lista1 = "L4";
                        break;
                    case 5:
                        cant2 = big.formatDouble(nodo.getCantidad5());
                        desc = nodo.getDescripcion5();
                        lista = nodo.getL5();
                        cant = big.formatDouble(cant/cant2);
                        lista1 = "L5";
                        break;
                    case 6:
                        cant2 = big.formatDouble(nodo.getCantidad6());
                        desc = nodo.getDescripcion6();
                        lista = nodo.getL6();
                        cant = big.formatDouble(cant/cant2);
                        lista1 = "L6";
                        break;
                    case 7:
                        cant2 = big.formatDouble(nodo.getCantidad7());
                        desc = nodo.getDescripcion7();
                        lista = nodo.getL7();
                        cant = big.formatDouble(cant/cant2);
                        lista1 = "L7";
                        break;
                    case 8:
                        cant2 = big.formatDouble(nodo.getCantidad8());
                        desc = nodo.getDescripcion8();
                        lista = nodo.getL8();
                        cant = big.formatDouble(cant/cant2);
                        lista1 = "L8";
                        break;
                }
                double res = 0.0;
                
                
                
             
                Object[] existenciaCongelada = {"0","0","0","0"};//new Object[4];
                
                String valorAlmacenado="0";
                if (!facturarSinInventario && !this.tipo.equals("pedido")) {
                    if(idComanda!=null && idComanda!="" && idComanda!="1" ){
                       existenciaCongelada = instancias.getSql().consultarExistenciaCongeladaId(idComanda);
                      if(existenciaCongelada[2] == null){
                       existenciaCongelada = instancias.getSql().consultarExistenciaPedidoId(idComanda);
                      }
                      valorAlmacenado=existenciaCongelada[2].toString();
                    }
                }

                double cantidadTotalinv=0;
                try {
                    cantidadTotalinv = big.formatDouble(cant) + (big.formatDouble(valorAlmacenado));
             
                    res = cantidadTotalinv - Double.parseDouble(cantidad);
                  
                } catch (Exception e) {
                     Logs.log("consumirServicioApiClickingPos "+e.getMessage());
                    try {
                        cantidadTotalinv = cant + (big.formatDouble(valorAlmacenado));
                        res = cantidadTotalinv - big.getMonedaToDouble(cantidad);
                    } catch (Exception ex) {
                        cantidadTotalinv = cant + (big.formatDouble(valorAlmacenado));
                        res = cantidadTotalinv - Double.parseDouble(cantidad);
                    }
                }
          
                if (!nodo.getManejaInventario()) {
                    modeloInventario.addRow(new Object[]{lista1, "N/A", "N/A"});
                } else {
                    modeloInventario.addRow(new Object[]{lista1, cantidadTotalinv, res});
                }

                boolean datosGrupo = true;
                try {
                    datosGrupo = (boolean) instancias.getSql().getDatosGrupo(nodo.getGrupo())[1];
                } catch (Exception e) {
                    datosGrupo = true;
                }

                Icon icono = null;
                ImageIcon fot = new ImageIcon(getClass().getResource("/imagenes/eliminar.png"));
                icono = new ImageIcon(fot.getImage().getScaledInstance(30, 25, Image.SCALE_DEFAULT));

                String cadena = "";
                if (instancias.getConfiguraciones().isRestaurante()) {

                } else {
//                    if (!idProd.equals("")) {
//                        cadena = idProd;
//                    }
                }

                String grupo = "";
                if (nodo.getGrupo() != null) {
                    grupo = nodo.getGrupo();
                }

                String detalle = "";
                if (!imei.equals("")) {
                    detalle = imei;
                }

                if (!color.equals("")) {
                    if (detalle.equals("")) {
                        detalle = color;
                    } else {
                        detalle = detalle + "-" + color;
                    }
                }

                if (!talla.equals("")) {
                    if (detalle.equals("")) {
                        detalle = talla;
                    } else {
                        detalle = detalle + "-" + talla;
                    }
                }

                if (!lote.equals("")) {
                    detalle = lote;
                }

                if (!fechaVence.equals("")) {
                    if (detalle.equals("")) {
                        detalle = fechaVence;
                    } else {
                        detalle = detalle + "-" + fechaVence;
                    }
                }

                if (!detalleMensualidad.equals("")) {
                    detalle = detalleMensualidad;
                }
               
                modeloPro.addRow(new Object[]{nodo.getCodigo(), desc, big.setMoneda(big.getBigDecimal(lista)),
                    cantidad.replace(".", ",")
                        , big.setMoneda(big.getBigDecimal(lista)), "0", "0", big.setMoneda(big.getBigDecimal(nodo.getIva())).replace(this.simbolo + " ", ""),
                    this.simbolo + " 0", big.setMoneda(big.getBigDecimal(lista)),
                    nodo.getUbicacion1(), nodo.getReferencia(), plu,
                    (big.getBigDecimal(cant2).multiply(big.getMoneda(cantidad.replace(".", ",")))), this.simbolo + " 0", "", "PENDIENTE", this.simbolo + " 0", datosGrupo, this.simbolo + " 0",
                    this.simbolo + " 0", cadena, new JLabel(icono), big.setMonedaExacta(big.getBigDecimal(nodo.getImpoconsumoVenta())).replace(this.simbolo + " ", ""), "", "", "",
                    detalle, lote, idProd, "Nuevo", "Sin-Permiso", nodo.getIdSistema(), big.setMoneda(big.getBigDecimal(aux)), grupo, nodo.getCodContable(), nodo.getUnd(),
                    nodo.getManejaInventario(),idComanda});
                txtCodProducto.setText("");

                tblProductos.scrollRectToVisible(tblProductos.getCellRect(tblProductos.getRowCount() - 1, 0, true));
                cargarTotales();

                tblProductos.setColumnSelectionInterval(0, 0);
                tblProductos.setRowSelectionInterval(modeloPro.getRowCount() - 1, modeloPro.getRowCount() - 1);

                if (!this.plu) {
                    if (cmbListaPrecio.getSelectedIndex() > 0) {
                        cmbListas.setSelectedItem(cmbListaPrecio.getSelectedItem());
//                        tblInventario.setValueAt(cmbListaPrecio.getSelectedItem(), tblInventario.getRowCount() - 1, 0);
//                        tblInventario.setColumnSelectionInterval(0, 0);
//                        tblInventario.setRowSelectionInterval(tblInventario.getRowCount() - 1, tblInventario.getRowCount() - 1);
                        isSelected = true;
                        cambiarListaCliente();
                    }
                }
            }

            calcularTabla(modeloPro.getRowCount() - 1, false);
            txtCant.setText(datos[87].toString());

            if (instancias.isLector()) {
                txtCodProducto.requestFocus();
            } else {
                if (datos[97].toString().equals("Valor")) {
                    tblProductos.editCellAt(tblInventario.getRowCount() - 1, 2);
                    tblProductos.setColumnSelectionInterval(2, 2);
                    tblProductos.transferFocus();
                } else {
                    if(!instancias.getConfiguraciones().isParqueadero()){
                    tblProductos.editCellAt(tblInventario.getRowCount() - 1, 3);
                    tblProductos.setColumnSelectionInterval(3, 3);
                    tblProductos.transferFocus();
                   }
                }
            }

            return;
        }

        if (codigo.equals("")) {
            try {
                int num = Integer.parseInt(datos[49].toString());
                if (!rdPos.isSelected()) {
                    if (num > 0) {
                        if (tblProductos.getRowCount() >= num) {
                            if (metodos.msgPregunta(factura, "Limite de productos, ¿Desea continuar?") != 0) {
                                return;
                            }
                        }
                    }
                }
            } catch (Exception e) {
                Logs.error(e);
                
            }

            ventanaProductos(codigo);
        } else {
            metodos.msgError(factura, "El codigo no existe");
            txtCodProducto.setText("");
            lbProducto.requestFocus();
        }
  }
    
    public void ventaDiseno(String mov, String cadena, String prod, String precio) {
        if (mov.equals("Guardar")) {

            for (int i = 0; i < tblProductos.getRowCount(); i++) {
                if (tblProductos.getValueAt(i, 32).equals(prod)) {
                    modeloPro.removeRow(i);
                    modeloInventario.removeRow(i);
                    break;
                }
            }

            String cant = datos[87].toString();
            cargarProducto(prod, cant, 1, "", "", cadena, false, "", "", "", "", "", "");

            tblProductos.setValueAt(precio, tblProductos.getRowCount() - 1, 2);

        } else {
            txtCodProducto.setText("");
        }
    }

    public void cargarArticulos(String tipo) {
        DefaultTableModel modelo = (DefaultTableModel) tblArticulos.getModel();

        while (tblArticulos.getRowCount() > 0) {
            modelo.removeRow(0);
        }

        Object[][] articulo = instancias.getSql().getArticulos(tipo);

        if (articulo.length > 0) {
            for (int i = 0; i < articulo.length; i++) {
                modelo.addRow(new Object[]{articulo[i][0], articulo[i][1], false, "", "", ""});
            }
            return;
        }
    }

    public void cargarPrefactura(String factura, String tip) {
        limpiar(false, "");

        Object[][] mat = null;
        if (tipo.equals("pedido")) {
            mat = instancias.getSql().getRegistrosPrePedidos(tip + factura);
        } else if (tipo.equals("orden")) {
            mat = instancias.getSql().getRegistrosOrdenes(tip + factura);
        } else if (tipo.equals("cuentaCobro")) {
            mat = instancias.getSql().getRegistrosCCobro(tip + factura);
        } else if (tipo.equals("facturacion")) {
            if (tip.equals("PEDIDO-")) {
                mat = instancias.getSql().getRegistrosPrePedidos(tip + factura);
            } else if (tip.equals("OSERV-")) {
                mat = instancias.getSql().getRegistrosOrdenes(tip + factura);
            } else if (tip.equals("CCOBRO-")) {
                mat = instancias.getSql().getRegistrosCCobro(tip + factura);
            } else {
                mat = instancias.getSql().getRegistrosPrefacturas(tip + factura);
            }
        } else if (tipo.equals("separe")) {
            mat = instancias.getSql().getRegistrosPlanSepare(tip + factura);
        }

        int ser = 0;
        productosMovimientos = new Object[mat.length];
        productosMovimientos1 = new Object[mat.length][3];

        cargandoCongelada = true;
        for (Object[] reg : mat) {
            int plu = Integer.parseInt(reg[13].toString());

            String idProd = "";
            String idPedido = "";
            if (tipo.equals("pedido") || (tipo.equals("facturacion") && tip.equals("PEDIDO-"))) {
                try {
                    idProd = reg[17].toString();
                   if(tipo.equals("pedido") || tip.equals("PEDIDO-")){
                    idPedido = reg[18].toString();
                   }
                } catch (Exception e) {
                    Logs.error(e);
                }
            }
            if (plu == 1) {
                cargarProducto((String) reg[0], big.setMonedaExacta(big.getBigDecimal(reg[3])) + "", plu, "", "", idProd, false, "", "", "", "", "", idPedido);
            } else {
                cargarProducto((String) reg[0], big.setMonedaExacta(big.getBigDecimal(reg[14])) + "", plu, "", "", idProd, false, "", "", "", "", "", idPedido);
            }

            if (plu == 1) {
                tblProductos.setValueAt(reg[3].toString().replace(".", ","), ser, 3);
            } else {
                tblProductos.setValueAt(reg[14].toString().replace(".", ","), ser, 3);
            }
            tblProductos.setValueAt(mat[ser][1], ser, 1);
//            tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(mat[ser][2].toString())), ser, 2);  

            tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(mat[ser][2].toString())), ser, 2);   
            tblProductos.setValueAt(mat[ser][5].toString(), ser, 5);
            tblProductos.setValueAt(mat[ser][6].toString(), ser, 6);
            tblProductos.setValueAt(mat[ser][12], ser, 16);
            

            try {
                tblProductos.setValueAt(mat[ser][16], ser, 31);
            } catch (Exception e) {
            }

            if (tipo.equals("cuentaCobro") || tip.equals("CCOBRO-")) {
                if(tip.equals("CCOBRO-")){
                     tblProductos.setValueAt(mat[ser][27], ser, 31);
                }
            } else {
                try {
                    
                    String codigoPreparacion = instancias.getSql().esPreparacion(mat[ser][0].toString(),"COSTEO");
                   
                    if(codigoPreparacion.equals(mat[ser][0].toString())){ 
                     Map preparacion = new HashMap();
                    ArrayList<Map<String, String>>  preparadas = instancias.getSql().getProductosPreparacion("PEDIDO-"+factura, "PED-"+ser, mat[ser][0].toString());
                        
                     if(preparadas.size()>0){
                       preparacion = cargarPreparada("PEDIDO-"+factura, "PED-"+ser, mat[ser][0].toString()); 
                     }else{
                       instancias.getSql().insertarPreparacion("PEDIDO-"+factura, "PROD-"+ser, mat[ser][0].toString());
                       preparacion = cargarPreparada("PEDIDO-"+factura, "PROD-"+ser, mat[ser][0].toString());
                     }
                     tblProductos.setValueAt(preparacion, ser, 21);
                     
                    }else{
                     tblProductos.setValueAt(mat[ser][15], ser, 21);
                    }
                } catch (Exception e) {
                }
            }

            if (tip.equalsIgnoreCase("OSERV-") || tip.equalsIgnoreCase("PEDIDO-")) {
                cantProductosOrden++;
                productosMovimientos[ser] = mat[ser][0].toString();
                productosMovimientos1[ser][0] = mat[ser][0].toString();
                productosMovimientos1[ser][1] = mat[ser][3].toString();
                productosMovimientos1[ser][2] = mat[ser][17].toString();
            }

            calcularTabla(ser, false);
            ser++;
        }

        cargandoCongelada = false;

        if (tipo.equals("pedido")) {
            ndPedido nodo = instancias.getSql().getDatosPedido(tip + factura);
            cmbVendedor.setSelectedItem(nodo.getVendedor());
            txtNit.setText(nodo.getCliente());
            txtSubTotal.setText(big.setMoneda(big.getBigDecimal(nodo.getSubtotal())));
            txtTotalDescuentos.setText(big.setMoneda(big.getBigDecimal(nodo.getDescuentoGeneral())));
            txtTotalIva.setText(big.setMoneda(big.getBigDecimal(nodo.getIva())));
            txtTotal.setText("Total: " + big.setMoneda(big.getBigDecimal(nodo.getTotal())));
            cargarCliente(nodo.getCliente());
            txtObservaciones.setText(nodo.getObservacion());
        } else if (tipo.equals("orden")) {
            ndOServicio1 nodo = instancias.getSql().getDatosOServicio1(tip + factura);
            cmbVendedor.setSelectedItem(nodo.getVendedor());
            txtNit.setText(nodo.getCliente());
            txtSubTotal.setText(big.setMoneda(big.getBigDecimal(nodo.getSubtotal())));
            txtTotalDescuentos.setText(big.setMoneda(big.getBigDecimal(nodo.getDescuentoGeneral())));
            txtTotalIva.setText(big.setMoneda(big.getBigDecimal(nodo.getIva())));
            txtTotal.setText("Total: " + big.setMoneda(big.getBigDecimal(nodo.getTotal())));
            cargarCliente(nodo.getCliente());
            txtObservaciones.setText(nodo.getObservacion());
        } else if (tipo.equals("separe")) {
            ndPlanSepare nodo = instancias.getSql().getDatosPlanSepare(tip + factura);
            cmbVendedor.setSelectedItem(nodo.getVendedor());
            txtNit.setText(nodo.getCliente());
            txtSubTotal.setText(big.setMoneda(big.getBigDecimal(nodo.getSubtotal())));
            txtTotalDescuentos.setText(big.setMoneda(big.getBigDecimal(nodo.getDescuentoGeneral())));
            txtTotalIva.setText(big.setMoneda(big.getBigDecimal(nodo.getIva())));
            txtTotal.setText("Total: " + big.setMoneda(big.getBigDecimal(nodo.getTotal())));
            cargarCliente(nodo.getCliente());
            txtObservaciones.setText(nodo.getObservacion());
        } else if (tipo.equals("cuentaCobro")) {
            ndCongelada nodo = instancias.getSql().getDatosCuentaCobro(tip + factura);
            cmbVendedor.setSelectedItem(nodo.getVendedor());
            txtNit.setText(nodo.getCliente());
            txtSubTotal.setText(big.setMoneda(big.getBigDecimal(nodo.getSubtotal())));
            txtTotalDescuentos.setText(big.setMoneda(big.getBigDecimal(nodo.getDescuentoGeneral())));
            txtTotalIva.setText(big.setMoneda(big.getBigDecimal(nodo.getIva())));
            txtCantIncremento.setText(mat[0][24].toString());
            txtCantFacturados.setText(mat[0][25].toString());

            if (null != mat[0][26]) {
                txtUltimaFacturaFecha.setText(mat[0][26].toString());
            }

            if (mat[0][23].toString().equals(mat[0][22].toString())) {
                chkSinEstablecer.setSelected(true);
            } else {
                chkSinEstablecer.setSelected(false);
            }

            dtHasta.setSelectedDate(metodos.haciaDate(mat[0][23].toString()));
            dtDesde.setSelectedDate(metodos.haciaDate(mat[0][22].toString()));
            cmbPeriodicidad.setSelectedItem(mat[0][21].toString());
            txtTotal.setText("Total: " + big.setMoneda(big.getBigDecimal(nodo.getTotal())));
            cargarCliente(nodo.getCliente());
            txtObservaciones.setText(nodo.getObservacion());
        } else if (tipo.equals("facturacion")) {

            ndFactura nodo = instancias.getSql().getDatosFactura(tip + factura);

            if (tip.equals("PEDIDO-")) {
                ndPedido nodo1 = instancias.getSql().getDatosPedido(tip + factura);
                cmbVendedor.setSelectedItem(nodo1.getVendedor());
                txtNit.setText(nodo1.getCliente());
                txtSubTotal.setText(big.setMoneda(big.getBigDecimal(nodo1.getSubtotalGeneral())));
                txtTotalDescuentos.setText(big.setMoneda(big.getBigDecimal(nodo1.getDescuentoGeneral())));
                txtTotalIva.setText(big.setMoneda(big.getBigDecimal(nodo1.getIvaGeneral())));
                txtTotal.setText("Total: " + big.setMoneda(big.getBigDecimal(nodo1.getTotalGeneral())));
                cargarCliente(nodo1.getCliente());
                txtObservaciones.setText(nodo1.getObservacion());
            } else if (tip.equals("OSERV-")) {
                ndOServicio1 nodo1 = instancias.getSql().getDatosOServicio1(tip + factura);
                cmbVendedor.setSelectedItem(nodo1.getVendedor());
                txtNit.setText(nodo1.getCliente());
                txtSubTotal.setText(big.setMoneda(big.getBigDecimal(nodo1.getSubtotalGeneral())));
                txtTotalDescuentos.setText(big.setMoneda(big.getBigDecimal(nodo1.getDescuentoGeneral())));
                txtTotalIva.setText(big.setMoneda(big.getBigDecimal(nodo1.getIvaGeneral())));
                txtTotal.setText("Total: " + big.setMoneda(big.getBigDecimal(nodo1.getTotalGeneral())));
                cargarCliente(nodo1.getCliente());
                txtObservaciones.setText(nodo1.getObservacion());
            } else if (tip.equals("CCOBRO-")) {
                ndCongelada nodo1 = instancias.getSql().getDatosCuentaCobro(tip + factura);
                cmbVendedor.setSelectedItem(nodo1.getVendedor());
                txtNit.setText(nodo1.getCliente());
                txtSubTotal.setText(big.setMoneda(big.getBigDecimal(nodo1.getSubtotalGeneral())));
                txtTotalDescuentos.setText(big.setMoneda(big.getBigDecimal(nodo1.getDescuentoGeneral())));
                txtTotalIva.setText(big.setMoneda(big.getBigDecimal(nodo1.getIvaGeneral())));
                txtTotal.setText("Total: " + big.setMoneda(big.getBigDecimal(nodo1.getTotalGeneral())));
                cargarCliente(nodo1.getCliente());
                txtObservaciones.setText(nodo1.getObservacion());
            } else {
                cmbVendedor.setSelectedItem(nodo.getVendedor());
                txtNit.setText(nodo.getCliente());
                txtSubTotal.setText(big.setMoneda(big.getBigDecimal(nodo.getSubtotalGeneral())));
                txtTotalDescuentos.setText(big.setMoneda(big.getBigDecimal(nodo.getDescuentoGeneral())));
                txtTotalIva.setText(big.setMoneda(big.getBigDecimal(nodo.getIvaGeneral())));
                txtTotal.setText("Total: " + big.setMoneda(big.getBigDecimal(nodo.getTotalGeneral())));
                cargarCliente(nodo.getCliente());
                txtObservaciones.setText(nodo.getObservacion());
            }
        }

        try {
            ndCxc nodoCxc = instancias.getSql().getDatosCxc(tip + factura);
            txtDiasPlazo.setText(Integer.toString(nodoCxc.getPlazo()));
        } catch (Exception e) {
            Logs.error(e);
            txtDiasPlazo.setText("0");
        }

        calcularDiasPlazo(null);
    }

    public void consultarMaestros() {

        try {
            datos = instancias.getSql().getDatosMaestra();

            if (tipo != null) {
                if ((tipo.equals("pedido") || tipo.equals("facturacion")) && instancias.getConfiguraciones().isRestaurante()) {
                    if ((Boolean) datos[54]) {

                        lbOtroConsecutivo.setText("Turno");
                        txtTurno.setVisible(true);
                        lbOtroConsecutivo.setVisible(true);
                        txtTurno.setEnabled(false);

                        try {
                            txtTurno.setText(datos[55].toString());
                        } catch (Exception e) {
                            txtTurno.setText("");
                        }
                    } else {
                        lbOtroConsecutivo.setVisible(false);
                        txtTurno.setVisible(false);
                    }
                } else if (tipo.equals("facturacion") && (Boolean) datos[57]) {
                    lbOtroConsecutivo.setText("Otro Consecutivo:");
                    txtTurno.setVisible(true);
                    lbOtroConsecutivo.setVisible(true);
                    txtTurno.setEnabled(true);
                } else {
                    txtTurno.setVisible(false);
                    lbOtroConsecutivo.setVisible(false);
                }
            } else {
                if (instancias.getConfiguraciones().isRestaurante()) {
                    if ((Boolean) datos[54]) {

                        lbOtroConsecutivo.setText("Turno");

                        txtTurno.setVisible(true);
                        lbOtroConsecutivo.setVisible(true);
                        txtTurno.setEnabled(false);

                        try {
                            txtTurno.setText(datos[55].toString());
                        } catch (Exception e) {
                            txtTurno.setText("");
                        }
                    } else {
                        lbOtroConsecutivo.setVisible(false);
                        txtTurno.setVisible(false);
                    }
                } else if ((Boolean) datos[57]) {
                    lbOtroConsecutivo.setText("Otro Consecutivo:");
                    txtTurno.setVisible(true);
                    lbOtroConsecutivo.setVisible(true);
                    txtTurno.setEnabled(true);
                } else {
                    txtTurno.setVisible(false);
                    lbOtroConsecutivo.setVisible(false);
                }
            }
        } catch (Exception e) {
            Logs.error(e);
        }
    }

    public void cargarProductos1(Object[][] productos) {
        String cantEstablecida = txtCant.getText();
        String baseUtilizada = obtenerBase();
         int pluCli = 0;
         if(!txtNit.getText().isEmpty()){
            ndTercero tercero = instancias.getSql().getDatosTercero(txtNit.getText());
            if(tercero != null && tercero.getLista() != null && !tercero.getLista().trim().isEmpty()){
                pluCli = Integer.valueOf(tercero.getLista().substring(1, 2));//CONSULTA EL PLU
            }
         }
        int focusIn = 0;
        for (int i = 0; i < productos.length; i++) {//ENTRA
            ndProducto nodo = instancias.getSql().getDatosProducto(productos[i][0].toString(), baseUtilizada);
          
            String codigo = productos[i][0].toString();
            String cantidad = productos[i][1].toString();
            //se crea esta variable, si trae 0 tiene plu si trae 1 no tiene plu
            this.plu = true;
            String plu = productos[i][2].toString();
            if(pluCli > 0 && "0".equals(plu) ){
              this.plu = false;
              plu = pluCli+""; 
            }
            if (cantidad.equals("0")) {
                cantidad = cantEstablecida;
            }

//            this.plu = true; //SE COMENTA POR PRUEBAS
            if (nodo.getUsuario().equals("ADMIN")) {
                    cargarProducto(codigo, cantidad, Integer.parseInt(plu), "", "", "", true, "", "", "", "", "", "");
            } else { 
                
                if(!nodo.getProductoFijo().equals("2")){                    
                    for (int j = 0; j < Integer.parseInt(cantidad); j++) {
                        cargarProducto(codigo, "1", Integer.parseInt(plu), "", "", "", true, "", "", "", "", "", "");
                    }
                }else{
                    cargarProducto(codigo, cantidad, Integer.parseInt(plu), "", "", "", true, "", "", "", "", "", "");
                }
            }
            if (nodo.getTipoProducto() != null && nodo.getTipoProducto() != "") {
                this.dinamico = false;
                focusIn = 1;
            } else {
                this.dinamico = true;
            }
        }

        tblProductos.changeSelection(tblProductos.getRowCount() - 1, 0, false, false);
        tblProductos.removeEditor();
        tblInventario.removeEditor();
               
        if (tblProductos.editCellAt(tblProductos.getRowCount() - 1, 0)) {
            tblProductos.setColumnSelectionInterval(0, 0);
            tblProductos.transferFocus();
        }

        if (datos[97].toString().equals("Valor")) {
           
            tblProductos.editCellAt(tblInventario.getRowCount() - 1, 2);
            tblProductos.setColumnSelectionInterval(2, 2);
            tblProductos.transferFocus();
        } else {  
            
            tblProductos.editCellAt(tblInventario.getRowCount() - 1, 3+focusIn);
            tblProductos.setColumnSelectionInterval(3, 3+focusIn);
            tblProductos.transferFocus();
        }
    }

    public void calcularTablaPreVentaValores() {
        int q = tblProductos.getRowCount();
        for (int i = 0; i < q; i++) {
            calcularTabla(i, false);
        }
    }

    public String desdeParqueadero(String cliente, String[][] productos, String diasPlazo, String placa) throws Exception{
        limpiar(true, "");
        desdeParqueadero = true;

        txtNit.setText(cliente);
        cargarCliente(cliente);

        txtDiasPlazo.setText(diasPlazo);
        calcularDiasPlazo(null);

        txtPlaca1.setText(placa);

        int a = 0;
        for (String[] producto : productos) {
            cargarProducto((String) producto[0], "1", 1, "", "", "", true, "", "", "", "", "", "");
            tblProductos.setValueAt(big.getMoneda(producto[1]), a, 2);
            a++;
        }

        cargarTotales();
//        for (int i = 0; i < tblProductos.getRowCount(); i++) {
//            tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(tblProductos.getValueAt(i, 2))), i, 2);
//            KeyEvent x = new KeyEvent(this, WIDTH, WIDTH, WIDTH, KeyEvent.VK_ENTER);
//            tblProductosKeyReleased(x);
//        }

        String factura = validacionInicialFactura(false);

        return factura;
    }

    public String generarFacturaExterior(String cliente, String[][] productos, String diasPlazo, boolean devueltaSino, String lote, String mes) {
        limpiar(true, "");
        txtNit.setText(cliente);
        cargarCliente(cliente);
        txtDiasPlazo.setText(diasPlazo);
        calcularDiasPlazo(null);

        loteGeneral = lote;

        for (String[] producto : productos) {
            cargarProducto((String) producto[0], "1", 1, "", "", "", true, "", "", "", "", "", "");
        }

//        tblProductos.editCellAt(tblProductos.getSelectedRow(), 6);
//        tblProductos.setColumnSelectionInterval(6, 6);
//        tblProductos.transferFocus();
        for (int i = 0; i < tblProductos.getRowCount(); i++) {
            tblProductos.setValueAt(big.setMonedaExacta(big.getBigDecimal(productos[i][1])), i, 2);
            KeyEvent x = new KeyEvent(this, WIDTH, WIDTH, WIDTH, KeyEvent.VK_ENTER);
            tblProductosKeyReleased(x);
        }

        cargarTotales();
        intDevuelta devuelta = new intDevuelta(null, false, big.getBigDecimal("0"), null, null, cliente);

        if (devueltaSino) {
            devuelta = null;
        }

        cmbMes.setSelectedItem(mes);
        saltarPasosFactura = true;

//        btnGuardar1ActionPerformed(null);
        String fact = "CCOBRO-" + (String) instancias.getSql().getNumConsecutivo("CCOBRO")[0];
        btnGuardar1ActionPerformed(null);
        return fact;
    }

    public void desdePedido(String factura) throws Exception{
        limpiar(false, "");
        Object[][] mat = instancias.getSql().getRegistrosPedidos2(factura);

        int i = 0;
        for (Object[] reg : mat) {
            cargarProducto((String) reg[0], new Double((String) reg[3]) + "", new Integer((String) reg[9]), "", "", "", false, "", "", "", "", "", "");

            tblProductos.setValueAt(big.setMonedaExacta(big.getBigDecimal(reg[2].toString())), i, 2);
            tblProductos.setValueAt(big.getBigDecimal(reg[5].toString()), i, 5);

            calcularTabla(i, false);
//            tblProductos.setColumnSelectionInterval(0, 0);
//            tblProductos.setRowSelectionInterval(i, i);
//            KeyEvent x = new KeyEvent(this, WIDTH, WIDTH, WIDTH, KeyEvent.VK_ENTER);
//            tblProductosKeyReleased(x);
            i++;
        }

        int j = tblProductos.getRowCount();

        ndPedido nodo = instancias.getSql().getDatosPedido(factura);

        txtNit.setText(nodo.getCliente());
        txtSubTotal.setText(big.setMonedaExacta(big.getBigDecimal(nodo.getSubtotal())));
        txtTotalDescuentos.setText(big.setMonedaExacta(big.getBigDecimal(nodo.getDescuentoGeneral())));
        txtTotalIva.setText(big.setMonedaExacta(big.getBigDecimal(nodo.getIva())));
        cargarCliente(nodo.getCliente());

        intDevuelta devuelta2 = new intDevuelta(null, true, null, null, null, null);
        facturar(devuelta2, true, "");

        instancias.getSql().cambiarEstadoPedido("REALIZADO", factura);

        calcularDiasPlazo(null);
    }

    public String generarFacturaExterior(String tipo, String factura, boolean devueltaSiNo, boolean estadoRealizado, String base) throws Exception{

        limpiar(false, "");
        String desde = "";
        Object[][] mat = new Object[0][0];

        if (tipo.equals("separe")) {
            desde = "facturarSepare";
            mat = instancias.getSql().getRegistrosPlanSepare(factura);
        } else {
            mat = instancias.getSql().getRegistrosCuentaCobro1(factura);
        }

        txtBodega.setText(base);

        int a = 0;
        for (Object[] reg : mat) {
            String imei = "", idProd = "";
            if (reg[15] != null) {
                imei = reg[15].toString();
            }

            if (reg[16] != null) {
                idProd = reg[16].toString();
            }

            int plu = Integer.parseInt(reg[13].toString());
            if (plu == 1) {
                cargarProducto((String) reg[0], new Double((String) reg[3]) + "", plu, imei, "", idProd, false, "", "", "", "", "", "");
            } else {
                cargarProducto((String) reg[0], new Double((String) reg[14]) + "", plu, imei, "", idProd, false, "", "", "", "", "", "");
            }

            tblProductos.setValueAt(mat[a][1], a, 1);
            
            tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(mat[a][2].toString())), a, 2);
            tblProductos.setValueAt(mat[a][5].toString().replace(",", "."), a, 5);
            tblProductos.setValueAt(mat[a][6].toString().replace(".", ","), a, 6);
            tblProductos.setValueAt(mat[a][12], a, 16);
            calcularTabla(a, false);

            a++;
        }

        if (tipo.equals("separe")) {
            ndPlanSepare nodo = instancias.getSql().getDatosPlanSepare(factura);
            cmbVendedor.setSelectedItem(nodo.getVendedor());
            txtNit.setText(nodo.getCliente());
            cargarCliente(nodo.getCliente());
            txtSubTotal.setText(big.setMoneda(big.getBigDecimal(nodo.getSubtotalGeneral())));
            txtTotalDescuentos.setText(big.setMoneda(big.getBigDecimal(nodo.getDescuentoGeneral())));
            txtTotalIva.setText(big.setMoneda(big.getBigDecimal(nodo.getIvaGeneral())));
            txtTotal.setText("Total: " + big.setMoneda(big.getBigDecimal(nodo.getTotalGeneral())));
//            cmbCargar.setSelectedIndex(4);
            txtCargar.setText(factura.replace("SEPARE-", ""));
            ndSepare = nodo;
        } else {
            ndCongelada nodo = instancias.getSql().getDatosCuentaCobro(factura);
            cmbVendedor.setSelectedItem(nodo.getVendedor());
            txtNit.setText(nodo.getCliente());
            cargarCliente(nodo.getCliente());
            txtSubTotal.setText(big.setMoneda(big.getBigDecimal(nodo.getSubtotalGeneral())));
            txtTotalDescuentos.setText(big.setMoneda(big.getBigDecimal(nodo.getDescuentoGeneral())));
            txtTotalIva.setText(big.setMoneda(big.getBigDecimal(nodo.getIvaGeneral())));
            txtTotal.setText("Total: " + big.setMoneda(big.getBigDecimal(nodo.getTotalGeneral())));
            cmbMes.setSelectedItem(nodo.getPreparacion());
        }

        intDevuelta devuelta = new intDevuelta(null, false, big.getBigDecimal("0"), null, null, null);
        if (devueltaSiNo) {
            devuelta = null;
        }

        saltarPasosFactura = true;
        return facturar(devuelta, true, desde);
    }

    public void ventanaPlacas1(String nit, String condi) {
        buscPlacas buscar = new buscPlacas(instancias.getMenu(), true, condi);
        buscar.setLocationRelativeTo(null);
        buscar.setInstancia(instancias);
        instancias.setBuscPlacas(buscar);
        instancias.setCampoActual(txtPlaca);
        txtPlaca.requestFocus();
        buscar.noEncontrado(nit);
        buscar.show();
    }

    public void limpiarTablas(){
        DefaultTableModel x = (DefaultTableModel) tblInventario.getModel();
        int i, j = tblProductos.getRowCount();
            for (i = 0; i < j; i++) {
            x.removeRow(0);
            modeloPro.removeRow(0);
        }
    }
    public void cargarClienteYProducto2(String cliente, String[][] producto) {
//        btnLimpiarActionPerformed(null);

        txtRtf.setText(this.simbolo + " 0");
        txtRiva.setText(this.simbolo + " 0");
        cmbRtf.setSelectedIndex(0);
        chkReteIva.setSelected(false);
        txtObservaciones.setText("");
        txtPorcentaje.setText("");
        txtMarca.setText("");
        txtColor.setText("");
        txtModelo.setText("");
        txtMotor.setText("");
        txtPlaca.setText("");
        nodoOrdenServicio = null;
        btnActualizar.setEnabled(false);
        btnGuardar.setEnabled(true);
        btnGuardar1.setEnabled(true);
        DefaultTableModel x = (DefaultTableModel) tblInventario.getModel();
        int i, j = tblProductos.getRowCount();

//        for (i = 0; i < j; i++) {
//            x.removeRow(0);
//            modeloPro.removeRow(0);
//        }
        txtSubTotal.setText(this.simbolo + " 0");
        txtTotal.setText("Total: " + this.simbolo + " 0");
        txtTotalIva.setText(this.simbolo + " 0");
        txtTotalDescuentos.setText(this.simbolo + " 0");
        txtNit.setText("");
        txtNombre.setText("");
        btnCambioMoneda.setVisible(false);
        jLMoneda.setVisible(false);
        
        txtDiasPlazo.setText("");
        txtVencimiento.setText(txtFechaFactura.getText());

        int fila = 0;
        for (int ser = 0; ser < tblComprobantes.getRowCount(); ser++) {
            if ((Boolean) tblComprobantes.getValueAt(ser, 2)) {
                fila = ser;
            }
        }

        Logs.log("Actualizando consecutivo 4");
        actualizarConsecutivo(fila);

        activarCampos(true);
        txtNit.setText(cliente);
        cargarCliente(cliente);
        cargarProducto(producto[0][0], producto[0][1], 1, "", "", "", true, "", "", "", "", "", "");
    }
    public void cargarClienteYProducto(String cliente, String[][] producto) {
//        btnLimpiarActionPerformed(null);

        txtRtf.setText(this.simbolo + " 0");
        txtRiva.setText(this.simbolo + " 0");
        cmbRtf.setSelectedIndex(0);
        chkReteIva.setSelected(false);
        txtObservaciones.setText("");
        txtPorcentaje.setText("");
        txtMarca.setText("");
        txtColor.setText("");
        txtModelo.setText("");
        txtMotor.setText("");
        txtPlaca.setText("");
        nodoOrdenServicio = null;
        btnActualizar.setEnabled(false);
        btnGuardar.setEnabled(true);
        btnGuardar1.setEnabled(true);
        DefaultTableModel x = (DefaultTableModel) tblInventario.getModel();
        int i, j = tblProductos.getRowCount();

        for (i = 0; i < j; i++) {
            x.removeRow(0);
            modeloPro.removeRow(0);
        }
        txtSubTotal.setText(this.simbolo + " 0");
        txtTotal.setText("Total: " + this.simbolo + " 0");
        txtTotalIva.setText(this.simbolo + " 0");
        txtTotalDescuentos.setText(this.simbolo + " 0");
        txtNit.setText("");
        txtNombre.setText("");
        btnCambioMoneda.setVisible(false);
        jLMoneda.setVisible(false);
        
        txtDiasPlazo.setText("");
        txtVencimiento.setText(txtFechaFactura.getText());

        int fila = 0;
        for (int ser = 0; ser < tblComprobantes.getRowCount(); ser++) {
            if ((Boolean) tblComprobantes.getValueAt(ser, 2)) {
                fila = ser;
            }
        }

        Logs.log("Actualizando consecutivo 4");
        actualizarConsecutivo(fila);

        activarCampos(true);
        txtNit.setText(cliente);
        cargarCliente(cliente);
        cargarProducto(producto[0][0], producto[0][1], 1, "", "", "", true, "", "", "", "", "", "");
    }

    public void cargarDescuento(int fila, String descPorc, String totalDesc, String tipo) {
        if(totalDesc == null){
           totalDesc="0.0";
        }
        boolean entra =true;
        if (descPorc == null) {
            tblProductos.setValueAt(totalDesc, fila, 6);
        }else if(Double.parseDouble(descPorc.replace(",", ".")) == 0 && Double.parseDouble(totalDesc.replace(",", ".")) > 0){
            tblProductos.setValueAt(descPorc, fila, 5);
            tblProductos.setValueAt(totalDesc.replace(".", ","), fila, 6);
            tblProductos.setValueAt(tipo, fila, 31);
            calcularTabla(fila, false);
            entra = false;
        } else {

            if (fila == 10000) {
                for (int i = 0; i < tblProductos.getRowCount(); i++) {
                    tblProductos.setValueAt(descPorc, i, 5);
                    calcularTabla(i, false);
                }
            } else {
                tblProductos.setValueAt(descPorc, fila, 5);
            }
        }
      if(entra){
        if (fila == 10000) {
            for (int i = 0; i < tblProductos.getRowCount(); i++) {
                tblProductos.setValueAt(tipo, i, 31);
                calcularTabla(i, false);
            }
        } else {
            tblProductos.setValueAt(tipo, fila, 31);
        }
      }
    }

    private void agregarRegistrosComandas(int filaUtil, String turnoUtil, String baseUtil, String facturaUtil, String pedidoUtil, String congeladaUtil, String idCongelada) {

        Map infDetalleProductosPrincipales = new HashMap();
        try {
            infDetalleProductosPrincipales = (Map) tblProductos.getValueAt(filaUtil, 21);
        } catch (Exception e) {
            Log.error("Error cadena  restaurante: ", e);
        }

        if (!infDetalleProductosPrincipales.isEmpty()) {

            String observaciones = "";
            try {
                observaciones = infDetalleProductosPrincipales.get("observaciones").toString();
            } catch (Exception e) {
                Log.error("Error observaciones restaurante: ", e);
            }

            ArrayList<Map> preparaciones = new ArrayList<Map>();
            ArrayList<Map> aderezosL = new ArrayList<Map>();
            ArrayList<Map> adiciones = new ArrayList<Map>();
            preparaciones = (ArrayList<Map>) infDetalleProductosPrincipales.get("ingredientes");
            adiciones = (ArrayList<Map>) infDetalleProductosPrincipales.get("adiciones");
            aderezosL = (ArrayList<Map>) infDetalleProductosPrincipales.get("aderezos");
            String obser = "";
            try{
              obser = infDetalleProductosPrincipales.get("observaciones").toString();
            }catch(Exception e){
            }
            String productoPrincipal ="";
            try{
            productoPrincipal = infDetalleProductosPrincipales.get("producto").toString(); 
            }catch(Exception e){
            }
            //INGRESAMOS LOS PRODUCTOS ESCOGIDOS EN LOS PRODUCTOS CON CAMBIO
            String aderezo = "";
            if (!aderezosL.isEmpty()) {
                aderezo = "Aderezo: ";
                String coma = "";
                for (Map adere : aderezosL) {
                    aderezo += coma + adere.get("descripcion").toString();
                    coma = ", ";
                }
            }
            String adici = "";
            if (!adiciones.isEmpty()) {
                adici = "Adicion: ";
                String coma = "";
                for (Map adicion : adiciones) {
                    adici += coma + adicion.get("cantidad").toString() + " " + adicion.get("descripcion").toString();
                    coma = ", ";
                }
            }
            String ingredientes = "";
            String sinIngredientes = "";
            if (!preparaciones.isEmpty()) {
                String coma = "";
                String coma1 = "";
                for (Map preparacion : preparaciones) {
                    //SE VALIDA PARA QUE AGREGUE SOLO SI HAY UN CAMBIO EN LOS PRODUCTOS PRINCIPALES
                    if (preparacion.get("estado").toString().equals("true")) {
                     if (!productoPrincipal.equals(preparacion.get("producto")) && preparacion.get("producto") != null && !preparacion.get("producto").equals("")) {
                               if (preparacion.get("codigo").toString() != preparacion.get("producto").toString()) {
                                    ingredientes += coma1 + preparacion.get("cantidad").toString() + " " + preparacion.get("descripcion").toString();
                                    coma1 = ", ";
                                }
                      }
                    } else {
                        sinIngredientes += coma + preparacion.get("descripcion").toString();
                        coma = ", ";
                    }
                }

                if (ingredientes.length() > 0) {
                    ingredientes = "Con: " + ingredientes;
                }
                if (sinIngredientes.length() > 0) {
                    sinIngredientes = "Sin: " + sinIngredientes;
                }
            }

            if (!manejoInsertUpdateComanda(congeladaUtil, facturaUtil, tblProductos.getValueAt(filaUtil, Identidad.idSistema).toString(), tblProductos.getValueAt(filaUtil, Identidad.Descripción).toString(),
                  sinIngredientes, ingredientes, adici, aderezo, formatVal(big.formatDouble(big.getMonedaToDouble(tblProductos.getValueAt(filaUtil, Identidad.Cant).toString().replace(".", "")))), obser, turnoUtil, pedidoUtil, "PLATO-" + filaUtil, idCongelada)) {
                metodos.msgError(null, "Error al guardar la comanda.");
            }
        } else {
            if (!manejoInsertUpdateComanda(congeladaUtil, facturaUtil, tblProductos.getValueAt(filaUtil, Identidad.idSistema).toString(), tblProductos.getValueAt(filaUtil, Identidad.Descripción).toString(),
                    "", "", "", "", formatVal(big.formatDouble(big.getMonedaToDouble(tblProductos.getValueAt(filaUtil, Identidad.Cant).toString().replace(".", "")))), "", turnoUtil, pedidoUtil, "PLATO-" + filaUtil, idCongelada)) {
                metodos.msgError(null, "Error al guardar la comanda.");
            }

        }
    }
/*   se comenta ya que no se necesita realizar tantas consultas para la descripcion y se cambia la estructura como se leia anteriormente 
    private void agregarRegistrosComandas(int filaUtil, String turnoUtil, String baseUtil, String facturaUtil, String pedidoUtil, String congeladaUtil, String idCongelada) {

        String cadena = "";
        try {
            cadena = tblProductos.getValueAt(filaUtil, 21).toString();
        } catch (Exception e) {
            Logs.error(e);
        }

        if (!cadena.equals("")) {
            String opciones1 = "Con: ", ingredientes1 = "Sin: ", aderezos1 = "Aderezos: ";
            String opciones2[], aderezos2[];

            String observaciones = "";
            try {
                observaciones = cadena.split("; ")[4];
            } catch (Exception e) {
                Logs.error(e);
            }

            String opciones = cadena.split("; ")[3];
            String aderezos = cadena.split("; ")[1];

            //INGRESAMOS LOS PRODUCTOS ESCOJIDOS EN LOS PRODUCTOS CON CAMBIO
            if (!opciones.equals("")) {
                opciones2 = opciones.split(", ");
                for (int k = 0; k < opciones2.length; k++) {

                    String principal = opciones2[k].split("/")[0];
                    String codigo = opciones2[k].split("/")[1];
                    String cant = opciones2[k].split("/")[2];
                    String estadoProducto = opciones2[k].split("/")[3];

                    if (principal.equals("") || principal.equals(" ")) {
                        if (estadoProducto.equals(" false")) {
                            ndProducto nodoProd = instancias.getSql().getDatosProducto(opciones2[k].split("/")[1], baseUtil);
                            ingredientes1 = ingredientes1 + nodoProd.getDescripcion() + ", ";
                        }
                    } else {
                        if (!principal.equals(codigo)) {
                            if (estadoProducto.equals(" true")) {
                                ndProducto nodoProd = instancias.getSql().getDatosProducto(opciones2[k].split("/")[1], baseUtil);
                                if (nodoProd.getGrupo() != null) {
                                    if (nodoProd.getGrupo().equals("GRP-02")) {
                                        if (cant.substring(cant.length() - 1, cant.length()).equals("0")) {
                                            opciones1 = opciones1 + cant.substring(0, cant.length() - 2) + " " + nodoProd.getDescripcion() + ", ";
                                        } else {
                                            opciones1 = opciones1 + cant + " " + nodoProd.getDescripcion() + ", ";
                                        }
                                    } else {
                                        opciones1 = opciones1 + nodoProd.getDescripcion() + ", ";
                                    }
                                } else {
                                    opciones1 = opciones1 + nodoProd.getDescripcion() + ", ";
                                }
                            }
                        }
                    }
                }

                if (!opciones1.equals("Con: ")) {
                    opciones1 = opciones1.substring(0, opciones1.length() - 2);
                }

                if (!ingredientes1.equals("Sin: ")) {
                    ingredientes1 = ingredientes1.substring(0, ingredientes1.length() - 2);
                }
            }

            if (!aderezos.equals("")) {
                aderezos2 = aderezos.split(", ");
                for (int k = 0; k < aderezos2.length; k++) {
                    ndProducto nodoProd = instancias.getSql().getDatosProducto(aderezos2[k], baseUtil);
                    aderezos1 = aderezos1 + nodoProd.getDescripcion() + ", ";
                }
                aderezos1 = aderezos1.substring(0, aderezos1.length() - 2);
            }
            if (!manejoInsertUpdateComanda(congeladaUtil, facturaUtil, tblProductos.getValueAt(filaUtil, Identidad.idSistema).toString(), tblProductos.getValueAt(filaUtil, Identidad.Descripción).toString(),
                    "", "", "", "", formatVal(big.formatDouble(big.getMonedaToDouble(tblProductos.getValueAt(filaUtil, Identidad.Cant).toString().replace(".", "")))),observaciones, turnoUtil, pedidoUtil, "PLATO-" + filaUtil, idCongelada)) {
                metodos.msgError(null, "Error al guardar la comanda.");
            }
        } else {
            //Agrega comanda al modificar un pedido
           if (!manejoInsertUpdateComanda(congeladaUtil, facturaUtil, tblProductos.getValueAt(filaUtil, Identidad.idSistema).toString(), tblProductos.getValueAt(filaUtil, Identidad.Descripción).toString(),
                    "", "", "", "", formatVal(big.formatDouble(big.getMonedaToDouble(tblProductos.getValueAt(filaUtil, Identidad.Cant).toString().replace(".", "")))), "", turnoUtil, pedidoUtil, "PLATO-" + filaUtil, idCongelada)) {
                metodos.msgError(null, "Error al guardar la comanda.");
            }
        }
    }
*/
    private void agregarAdicionesATabla(String baseUtilizada) {
        Map infDetalleProductosPrincipales = new HashMap();
        for (int i = 0; i < tblProductos.getRowCount(); i++) {
            ndProducto nodo = instancias.getSql().getDatosProducto(tblProductos.getValueAt(i, 32).toString(), baseUtilizada);

            if (nodo.getUsuario().equals("FACTURA") && tblProductos.getValueAt(i, 21).toString() !="") {
                String opciones = "";

                try {
                  
                     infDetalleProductosPrincipales = (Map) tblProductos.getValueAt(i, 21);
                    //EXTRAE TODOS LOS INGREDIENTES
//                    opciones = tblProductos.getValueAt(i, 21).toString().split("; ")[3];

                } catch (Exception e) {
                    Logs.error("Error agregarAdicionesATabla: "+e);
                }

                String opciones2[];
                //REALIZA ESTE CODIGO PARA ASIGNAR LOS PRODUCTOS ADICIONALES
                
//SE COMENTA PORQUE SE EMPIEZA A REALIZAR CON MAP que nos AHORRA MUCHO TRABAJO
              if(infDetalleProductosPrincipales.size()>0){
               ArrayList<Map> infAdiciones = (ArrayList<Map>) infDetalleProductosPrincipales.get("adiciones"); 
               if (infAdiciones.size()> 0) {
                   for (int k = 0; k < infAdiciones.size(); k++) {
                       Map infAdicion = new HashMap();
                       infAdicion = infAdiciones.get(k);
                       if ((infAdicion.get("estado").toString()).equals("true")) {
                           String factura = tipo() + "-" + lbNoFactura.getText();
//                           String idComanda="";
                           if(factura!="" && tblProductos.getValueAt(i, 38).toString()!=""){
//                               Object[][] existenciaCongelada = instancias.getSql().consultarExistenciaCongeladaAll(factura, infAdicion.get("codigo").toString(), "1");
//                               String plato="PLATO"+i;
                                String codigo=infAdicion.get("codigo").toString();
                                String congeladaId=tblProductos.getValueAt(i, 38).toString();
                               String existenciaCongelada = instancias.getSql().consultarAdicionesIdCongelada(codigo,congeladaId,factura);
//                               Object[][] existenciaCongelada =instancias.getSql().consultarExistenciaCongeladaAll(factura, infAdicion.get("codigo").toString(), "1",plato);  
                               //SE RECORRE TODAS LAS COMANDAS ENCONTRADAS PARA ASIGNARLAS A LAS ADICIONES PARA QUE NO GUARDE UNA ADICION
                               //MAS DE UNA VEZ, ESTO DE DA CUANDO SE ESCOGE EL MISMO DISEÑO CON LA MISMA ADICION 
                               String idComandaAdicion = "";
                              if(!existenciaCongelada.equals("")) {
                               idComandaAdicion = existenciaCongelada;
                              }
                              
                                cargarProducto(infAdicion.get("codigo").toString(), infAdicion.get("cantidad").toString(), 1, "", "", "", false, "", "", "", "", "", idComandaAdicion);
                                tblProductos.setValueAt("PRODUCTO-AGREGADO;"+i, tblProductos.getRowCount() - 1, 31);
                               
                           }else{
                                cargarProducto(infAdicion.get("codigo").toString(), infAdicion.get("cantidad").toString(), 1, "", "", "", false, "", "", "", "", "", "1");
                                tblProductos.setValueAt("PRODUCTO-AGREGADO;"+i, tblProductos.getRowCount() - 1, 31);
                           }
                       }
                   }
//                if (!opciones.equals("")) {
//                    opciones2 = opciones.split(", ");
//                    for (int k = 0; k < opciones2.length; k++) {
//                        String codigo = opciones2[k].split("/")[1];
//                        String cant = opciones2[k].split("/")[2];
//                        String estado = opciones2[k].split("/")[3];
//
//                        if (estado.equals(" true")) {
//                            ndProducto nodo1 = instancias.getSql().getDatosProducto(codigo, baseUtilizada);
//
//                            if (nodo1.getGrupo() != null) {
//                                if (nodo1.getGrupo().equals("GRP-02")) {
//                                    //CONSULTAR idPedido codigo 
//                                    cargarProducto(codigo, cant, 1, "", "", "", false, "", "", "", "", "", "");
//                                    tblProductos.setValueAt("PRODUCTO-AGREGADO", tblProductos.getRowCount() - 1, 31);
//                                }
//                            }
//                        }
//                    }
                }
              }
            }
        }
    }

    private void calcularTabla(int fila, boolean mostrarAlerta) {
       
//        Boolean facturarSinInventarios = (Boolean) datos[Identidad.facturarSinInventario];
//         if (!facturarSinInventarios) {
//             if(!validaInventario(fila)){
//               return;
//             }
//         }
        
        String baseUtilizada = obtenerBase();
        ndProducto nodo = instancias.getSql().getDatosProducto(tblProductos.getValueAt(fila, 32).toString(), baseUtilizada);

        double impoconsumo = 0;
        double iva = 0;
        double totalImpoconsumo = 0;
        double totalIva = 0;
        double valor = 0;
        double cantidad = 0;
        double descuento = 0;
        double subtotal = 0;
        double total = 0;
        double totalItem = 0;
        double porcentaje2 = 0;
        double compra = 0;
        double utilidadMax = 0;
        double utilidadMin = 0;
        double copago = 0;
        double valorDescuento = 0;
        boolean entro = false;
        System.err.println("valor "+tblProductos.getValueAt(fila, 6).toString());
        try {
            valorDescuento = big.getMonedaToDouble(tblProductos.getValueAt(fila, 6).toString());
        } catch (Exception e) {
        }
        
//        try {
//            totalItem = big.getMonedaToDouble(tblProductos.getValueAt(fila, 9).toString()); 
//            if(valorDescuento > totalItem){
//               return;
//            }
//        } catch (Exception e) {
//        }
        
        tblProductos.setValueAt(big.setMonedaExacta(valorDescuento), fila, 6);
     
        try {
            valor = big.getMonedaToDouble(String.valueOf(tblProductos.getValueAt(fila, 2)));

            if (!(Boolean) datos[Identidad.modificarPrecio]) {
             
                String lista = tblInventario.getValueAt(fila, 0).toString();
                if (lista.equals("L1")) {
                    if (big.formatDouble(nodo.getL1()) != 0) {
                        tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(nodo.getL1())), fila, 2);
                    }
                } else if (lista.equals("L2")) {
                    if (big.formatDouble(nodo.getL2()) != 0) {
                        tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(nodo.getL2())), fila, 2);
                    }
                } else if (lista.equals("L3")) {
                    if (big.formatDouble(nodo.getL3()) != 0) {
                        tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(nodo.getL3())), fila, 2);
                    }
                } else if (lista.equals("L4")) {
                    if (big.formatDouble(nodo.getL4()) != 0) {
                        tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(nodo.getL4())), fila, 2);
                    }
                }
            }

            tblProductos.setValueAt(big.setMoneda(valor), fila, 2);
        } catch (Exception e) {
            Logs.error(e);
            String lista = tblInventario.getValueAt(fila, 0).toString();
            if (lista.equals("L1")) {
                if (big.formatDouble(nodo.getL1()) != 0) {
                    tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(nodo.getL1())), fila, 2);
                }
            } else if (lista.equals("L2")) {
                if (big.formatDouble(nodo.getL2()) != 0) {
                    tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(nodo.getL2())), fila, 2);
                }
            } else if (lista.equals("L3")) {
                if (big.formatDouble(nodo.getL3()) != 0) {
                    tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(nodo.getL3())), fila, 2);
                }
            } else if (lista.equals("L4")) {
                if (big.formatDouble(nodo.getL4()) != 0) {
                    tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(nodo.getL4())), fila, 2);
                }
            }
        }

        try {
            cantidad = big.getMonedaToDouble(tblProductos.getValueAt(fila, 3).toString());
        } catch (Exception e) {
        }

        String tipo = "", productoEn = "";
        try {
            if (nodo.getTipoProd().equals("Variable") || nodo.getTipoProd().equals("Fijas")) {
                productoEn = "Desarrollo";
            }
        } catch (Exception e) {
            Logs.error(e);
        }

        if (nodo.getTipoProducto() != null) {
            if (nodo.getTipoProducto().equals("IMEI")) {
                tipo = "Imei";
            } else if (nodo.getTipoProducto().equals("Fecha/Lote")) {
                tipo = "Fecha/Lote";
            } else if (nodo.getTipoProducto().equals("Color")) {
                tipo = "Color";
            } else if (nodo.getTipoProducto().equals("Serial")) {
                tipo = "Serial";
            } else if (nodo.getTipoProducto().equals("Talla")) {
                tipo = "Talla";
            } else if (nodo.getTipoProducto().equals("ColorTalla")) {
                tipo = "ColorTalla";
            } else if (nodo.getTipoProducto().equals("SerialColor")) {
                tipo = "SerialColor";
            } else {
                tipo = "";
            }
        }

        if (!this.tipo.equals("cotizacion")) {
            if (!productoEn.equals("")) {
                if(!nodo.getProductoFijo().equals("2")){
                  cantidad = 1;
                }
            }
        }

        subtotal = big.formatDouble(valor * cantidad);
        copago = big.getMonedaToDouble(String.valueOf(tblProductos.getValueAt(fila, 17)));
        iva = big.formatDouble(tblProductos.getValueAt(fila, 7).toString());
        impoconsumo = big.formatDouble(tblProductos.getValueAt(fila, 23).toString());
        if (tblProductos.getSelectedColumn() == 8) {
            //valor impoconsumo
            totalImpoconsumo = big.getMonedaToDouble(tblProductos.getValueAt(fila, 8).toString());
        }

        double porcImpoconsumo = 0;

        if (instancias.isPvpConIva() || instancias.isPvpConImpoconsumo()) {
            double subIva = 0, subImpo = 0;
            if (instancias.isPvpConIva() && instancias.isPvpConImpoconsumo()) {
                //SE SUMAN LOS IMPUESTOS
                double totalImpuestos = iva + impoconsumo;

                if (totalImpuestos > 0) {
                    totalImpuestos = (totalImpuestos / 100) + 1;

                    //SE CALCULA EL SUBTOTAL SUMANDO TODOS LOS IMPUESTOS
                    subtotal = big.formatDouble(subtotal / totalImpuestos);
                }

                //se calcula el descuento
                if (tblProductos.getValueAt(fila, 6).toString().equals("") || tblProductos.getValueAt(fila, 5).toString().equals("")) {
                    porcentaje2 = 0;
                    descuento = 0;
                }else if(big.getMonedaToDouble(tblProductos.getValueAt(fila, 6).toString())> 0 && tblProductos.getValueAt(fila, 5).toString().equals("0")){
                    descuento = big.getMonedaToDouble(tblProductos.getValueAt(fila, 6).toString());
                    porcentaje2 = 0;
                } else {
                    double[] datos = calcularDescuento(fila, subtotal, mostrarAlerta);
                    descuento = datos[0];
                    porcentaje2 = datos[1];
                }
                subtotal = big.formatDouble(subtotal - descuento);

                totalIva = big.formatDouble(subtotal * (iva / 100));
                totalImpoconsumo = big.formatDouble(subtotal * (impoconsumo / 100));

            } else if (instancias.isPvpConIva()) {
                //OBTENEMOS EL PORCENTAJE DEL IVA
                if (iva > 0) {
                    subIva = big.formatDouble(subtotal / ((iva / 100) + 1));
                    totalIva = subtotal - subIva;
                }
                subtotal = big.formatDouble(subtotal - totalIva);

                //se calcula el descuento
                if (tblProductos.getValueAt(fila, 6).toString().equals("") || tblProductos.getValueAt(fila, 5).toString().equals("")) {
                    porcentaje2 = 0;
                    descuento = 0;
                }else if(big.getMonedaToDouble(tblProductos.getValueAt(fila, 6).toString())> 0 && tblProductos.getValueAt(fila, 5).toString().equals("0")){
                    descuento = big.getMonedaToDouble(tblProductos.getValueAt(fila, 6).toString());
                    porcentaje2 = 0;
                } else {
                    double[] datos = calcularDescuento(fila, subtotal, mostrarAlerta);
                    descuento = datos[0];
                    porcentaje2 = datos[1];
                }
                subtotal = big.formatDouble(subtotal - descuento);

                //SE CALCULA EL IMPOCONSUMO
                if (impoconsumo > 0) {
                    totalImpoconsumo = big.formatDouble(subtotal * (impoconsumo / 100));
                }

                //SE RECALCULA EL IVA         
                if (iva > 0) {
                    totalIva = big.formatDouble(subtotal * (iva / 100));
                }

            } else if (instancias.isPvpConImpoconsumo()) {
                if (impoconsumo > 0) {
                    subImpo = big.formatDouble(subtotal / ((impoconsumo / 100) + 1));
                }

                totalImpoconsumo = subtotal - subImpo;
                subtotal = big.formatDouble(subtotal - totalImpoconsumo);

                //se calcula el descuento
                if (tblProductos.getValueAt(fila, 6).toString().equals("") || tblProductos.getValueAt(fila, 5).toString().equals("")) {
                    porcentaje2 = 0;
                    descuento = 0;
                }else if(big.getMonedaToDouble(tblProductos.getValueAt(fila, 6).toString()) > 0 && tblProductos.getValueAt(fila, 5).toString().equals("0")){
                    descuento = big.getMonedaToDouble(tblProductos.getValueAt(fila, 6).toString());
                    porcentaje2 = 0;
                } else {
                    double[] datos = calcularDescuento(fila, subtotal, mostrarAlerta);
                    descuento = datos[0];
                    porcentaje2 = datos[1];
                }
                subtotal = big.formatDouble(subtotal - descuento);

                //OBTENEMOS EL PORCENTAJE DEL IVA          
                if (iva > 0) {
                    totalIva = big.formatDouble(subtotal * (iva / 100));
                }

                //SE RECALCULA EL IMPOCONSUMO
                if (impoconsumo > 0) {
                    totalImpoconsumo = big.formatDouble(subtotal * (impoconsumo / 100));
                }
            }
        } else {

            if (tblProductos.getValueAt(fila, 6).toString().equals("") || tblProductos.getValueAt(fila, 5).toString().equals("")) {
                porcentaje2 = 0;
                descuento = 0;
            } else if(big.getMonedaToDouble(tblProductos.getValueAt(fila, 6).toString()) > 0 && tblProductos.getValueAt(fila, 5).toString().equals("0")){
                descuento = big.getMonedaToDouble(tblProductos.getValueAt(fila, 6).toString());
                porcentaje2 = 0;
            }else {
                double[] datos = calcularDescuento(fila, subtotal, mostrarAlerta);
                descuento = datos[0];
                porcentaje2 = datos[1];
            }

            subtotal = big.formatDouble(subtotal - descuento);

            //OBTENEMOS EL PORCENTAJE DEL IVA
            if (iva > 0) {
                iva = (iva / 100) + 1;
                totalIva = big.formatDouble(subtotal * iva);
                totalIva = big.formatDouble(totalIva - subtotal);
            }

            if (impoconsumo > 0) {
                impoconsumo = (impoconsumo / 100) + 1;
                totalImpoconsumo = big.formatDouble(subtotal * impoconsumo);
                totalImpoconsumo = big.formatDouble(totalImpoconsumo - subtotal);
            }

        }

        total = big.formatDouble(subtotal + totalIva + totalImpoconsumo);

        if (rdTipoNormal.isSelected()) {
            if (copago > 0) {
                total = subtotal - copago;
            }
        } else {
            if (copago > 0) {
                total = copago;
                valor = 0;
                subtotal = 0;
            }
        }

        if (tblProductos.getSelectedColumn() == 8) {
            tblProductos.setValueAt(porcImpoconsumo, fila, 23);
        }

        tblProductos.setValueAt(big.setMoneda(subtotal), fila, 4);
        tblProductos.setValueAt(big.setMoneda(totalIva), fila, 33);
        tblProductos.setValueAt(big.setMoneda(totalImpoconsumo), fila, 8);
        tblProductos.setValueAt(big.setMoneda(total), fila, 9);
        tblProductos.setValueAt(big.setNumero(porcentaje2), fila, 5);
        tblProductos.setValueAt(big.setMonedaExacta(descuento), fila, 6);
        tblProductos.setValueAt(big.setMoneda(copago), fila, 17);

        switch (tblProductos.getValueAt(fila, 12).toString()) {
            case "1":
                tblProductos.setValueAt(cantidad, fila, 13);
                break;
            case "2":
                tblProductos.setValueAt(cantidad * big.formatDouble(nodo.getCantidad2()), fila, 13);
                break;
            case "3":
                tblProductos.setValueAt(cantidad * big.formatDouble(nodo.getCantidad3()), fila, 13);
                break;
            case "4":
                tblProductos.setValueAt(cantidad * big.formatDouble(nodo.getCantidad4()), fila, 13);
                break;
            case "5":
                tblProductos.setValueAt(cantidad * big.formatDouble(nodo.getCantidad5()), fila, 13);
                break;
            case "6":
                tblProductos.setValueAt(cantidad * big.formatDouble(nodo.getCantidad6()), fila, 13);
                break;
            case "7":
                tblProductos.setValueAt(cantidad * big.formatDouble(nodo.getCantidad7()), fila, 13);
                break;
            case "8":
                tblProductos.setValueAt(cantidad * big.formatDouble(nodo.getCantidad8()), fila, 13);
                break;
        }

        tblProductos.setValueAt(big.setNumero(cantidad), fila, 3);

        double costo = 0;
        try {
            Object[] promedio = instancias.getSql().getUltimoPonderado(nodo.getIdSistema());
            costo = big.formatDouble(big.getBigDecimal(promedio[4].toString()));
        } catch (Exception e) {
            Logs.error(e);
            costo = 0;
        }

        double utilidad, valorUnidad;

        valorUnidad = big.getMonedaToDouble(tblProductos.getValueAt(fila, 4).toString()) / big.formatDouble(tblProductos.getValueAt(fila, 13).toString());

        utilidad = valorUnidad - costo;
        utilidad = utilidad * (big.formatDouble(tblProductos.getValueAt(fila, 13).toString()));
//        if(utilidad.contains("$")){
//        
//        }
       try{
        tblProductos.setValueAt(big.setMoneda(utilidad), fila, 14);
       }catch(Exception exp){
         tblProductos.setValueAt(big.setMoneda(0), fila, 14);  
       }
       
        if (nodo.getIva().equals("0") || nodo.getIva().equals(".00")) {
            compra = (costo * (big.formatDouble(nodo.getIvaC()) / 100)) + costo;
        } else {
            compra = costo;
        }

        utilidadMin = (compra * (big.formatDouble(nodo.getMinima()) / 100)) + compra;
        utilidadMax = (compra * (big.formatDouble(nodo.getMaxima()) / 100)) + compra;

        if (utilidadMin == -1) {
            tblProductos.setValueAt("ERROR1", fila, 15);
        } else if (utilidadMax == 1) {
            tblProductos.setValueAt("ERROR2", fila, 15);
        } else {
            tblProductos.setValueAt("OK", fila, 15);
        }

        cargarTotales();
    }

    public void generarImpresionComanda(String condicionOrigen, String observaciones, String factura2, String var1,
            Boolean previsualizar, String vendedor) {

        Logs.log("generarImpresionComanda ################### condicionOrigen " + condicionOrigen + ", observaciones " + observaciones + ", factura2 " + factura2 + ", var1 " + var1 + ", previsualizar " + previsualizar + ", vendedor " + vendedor);
        String condicion = "";
      
        if ((Boolean) datos[Identidad.impresionPorGrupo]) {

            //CREAMOS OBJETO PARA HACER CONTEO DE GRUPOS 
            Object[] grupos = new Object[tblProductos.getRowCount()];

            //HACEMOS CONTEO DE GRUPOS DE LOS PRODUCTOS DE FACTURA
            int ser = 0;
            if ((Boolean) datos[Identidad.impresionPorGrupo]) {
                for (int i = 0; i < tblProductos.getRowCount(); i++) {
                    String grupo = tblProductos.getValueAt(i, 34).toString();

                    Boolean entro = false;
                    for (int j = 0; j < grupos.length; j++) {
                        if (grupo.equals(grupos[j])) {
                            entro = true;
                        }
                    }

                    if (!entro) {
                        grupos[ser] = grupo;
                        ser++;
                    }
                }
            }

            for (int i = 0; i < ser; i++) {

                String impresoraGrupo = "Sin_impresora";
                Object[] datosGrupo;

                String grupoActual = grupos[i].toString();

                if (!grupoActual.equals("")) {
                    datosGrupo = instancias.getSql().getDatosGrupo(grupoActual);
                    impresoraGrupo = datosGrupo[5].toString();

                } else {
                    impresoraGrupo = "Sin_impresora";
                }
                Logs.log("Usando impresora " + impresoraGrupo);
               
//                if ((Boolean) datos[Identidad.combinarProductos] && instancias.getConfiguraciones().isRestaurante()) {
                if (instancias.getConfiguraciones().isRestaurante()) {
                    if (grupoActual.equals("")) {
//                        condicion = condicionOrigen + " and Grupo is Null ";
                        condicion = condicionOrigen + " and Grupo is Null ";
                    } else {
                        condicion = condicionOrigen + " and Grupo = '" + grupos[i] + "' ";
                    }
                }

                Logs.log("Usando impresora condicionOrigen " + condicionOrigen);
                Logs.log("Usando impresora condicion " + condicion);
                //debe preguntar si ver o imprimir creeria
                 if(condicion.equals("")){
                  instancias.getReporte().ver_Comanda(condicionOrigen, observaciones, factura2, var1, previsualizar, impresoraGrupo, vendedor,""); 
                }else{
                  instancias.getReporte().ver_Comanda(condicion, observaciones, factura2, var1, previsualizar, impresoraGrupo, vendedor,"");  
                }
//                como estaba antes de arreglar impresiones instancias.getReporte().ver_Comanda 

                try {
                    Thread.sleep(500);
                } catch (Exception e) {
                    Logs.error(e);
                }
            }
        } else {
            String impresoraComanda = "";
            try {
                impresoraComanda = datos[105].toString();
            } catch (Exception e) {
            }

            instancias.getReporte().ver_Comanda(condicionOrigen, observaciones, factura2, var1, previsualizar, impresoraComanda, vendedor,"");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnBusProd;
    private javax.swing.JButton btnBuscTerceros;
    private javax.swing.JButton btnBuscTerceros1;
    private javax.swing.JButton btnCambiarMesa;
    private javax.swing.JButton btnCambioMoneda;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnGuardar1;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnNuevaParte;
    private javax.swing.JButton btnNuevaParte1;
    private javax.swing.JButton btnOcultarInfoCliente;
    private javax.swing.JButton btnPendientes;
    private javax.swing.JButton btnReImprimir;
    private javax.swing.JLabel btnVolver;
    private javax.swing.JLabel btnVolver1;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkReteIva;
    private javax.swing.JCheckBox chkSinEstablecer;
    private javax.swing.JCheckBox chkSisteCredito;
    private javax.swing.JComboBox cmbCargar;
    private javax.swing.JComboBox cmbFuncionamiento;
    private javax.swing.JComboBox cmbListaPrecio;
    private javax.swing.JComboBox cmbListas;
    private javax.swing.JComboBox cmbMes;
    private javax.swing.JComboBox cmbPeriodicidad;
    private javax.swing.JComboBox cmbRtf;
    private javax.swing.JComboBox cmbSeñal;
    private javax.swing.JComboBox cmbTipoOperacion;
    private javax.swing.JComboBox cmbTipoPlazo;
    private javax.swing.JComboBox cmbVendedor;
    private datechooser.beans.DateChooserCombo dtDesde;
    private datechooser.beans.DateChooserCombo dtFechaDesenvolso;
    private datechooser.beans.DateChooserCombo dtHasta;
    private datechooser.beans.DateChooserCombo expFE;
    private javax.swing.ButtonGroup grpCopago;
    private javax.swing.ButtonGroup grupoTipoFactura;
    private javax.swing.ButtonGroup grupoTipoImpresion;
    private javax.swing.JLabel jLMoneda;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lbBodega;
    private javax.swing.JLabel lbCambiarMesa;
    private javax.swing.JLabel lbCar;
    private javax.swing.JLabel lbCelular1;
    private javax.swing.JLabel lbCupo;
    private javax.swing.JLabel lbDiasPlazo;
    private javax.swing.JLabel lbDireccion3;
    private javax.swing.JLabel lbDireccion4;
    private javax.swing.JLabel lbDireccion5;
    private javax.swing.JLabel lbDireccion6;
    private javax.swing.JLabel lbDireccion7;
    private javax.swing.JLabel lbDireccion8;
    private javax.swing.JTextField lbFacturaNo;
    private javax.swing.JLabel lbFechaVencimiento;
    private javax.swing.JLabel lbImpoconsumo;
    private javax.swing.JLabel lbImpuestoBolsa;
    private javax.swing.JTextField lbModeloContable;
    private javax.swing.JLabel lbNit;
    private javax.swing.JLabel lbNit1;
    public javax.swing.JTextField lbNoFactura;
    private javax.swing.JLabel lbNombre10;
    private javax.swing.JLabel lbNombre11;
    private javax.swing.JLabel lbNombre13;
    private javax.swing.JLabel lbNombre14;
    private javax.swing.JLabel lbNombre5;
    private javax.swing.JLabel lbNombre6;
    private javax.swing.JLabel lbNombre7;
    private javax.swing.JLabel lbNombre8;
    private javax.swing.JLabel lbNombre9;
    private javax.swing.JLabel lbObservaciones;
    private javax.swing.JTextField lbOtroConsecutivo;
    private javax.swing.JLabel lbProducto;
    private javax.swing.JLabel lbProducto1;
    private javax.swing.JLabel lbSubtotal;
    private javax.swing.JLabel lbTelefono3;
    private javax.swing.JLabel lbTipoOperacion;
    private javax.swing.JLabel lbTitulo;
    private javax.swing.JLabel lbTotalDescuento;
    private javax.swing.JLabel lbTotalDescuento1;
    private javax.swing.JLabel lbTotalDescuento2;
    private javax.swing.JLabel lbVendedor;
    private javax.swing.JLabel lbVendedor1;
    private javax.swing.JLabel lbVendedor10;
    private javax.swing.JLabel lbVendedor11;
    private javax.swing.JLabel lbVendedor12;
    private javax.swing.JLabel lbVendedor13;
    private javax.swing.JLabel lbVendedor7;
    private javax.swing.JLabel lbVendedor8;
    private javax.swing.JLabel lbVendedor9;
    private javax.swing.JPanel pnlCambiarMesa;
    private javax.swing.JPanel pnlComprobante;
    private javax.swing.JPanel pnlCredito;
    private javax.swing.JPanel pnlCuentaCobro;
    private javax.swing.JPanel pnlFormulario;
    private javax.swing.JPanel pnlGarantia;
    private javax.swing.JPanel pnlInformacion;
    private javax.swing.JPanel pnlOcultar;
    private javax.swing.JPanel pnlVisor;
    private javax.swing.JMenuItem popBorrar;
    private javax.swing.JRadioButton rdCarta;
    private javax.swing.JRadioButton rdMediaCarta;
    private javax.swing.JRadioButton rdPos;
    private javax.swing.JRadioButton rdTipoCopago;
    private javax.swing.JRadioButton rdTipoNormal;
    private javax.swing.JScrollPane scrInventario;
    private javax.swing.JScrollPane scrProductos1;
    private javax.swing.JTabbedPane tapControl;
    private javax.swing.JTable tblArticulos;
    private javax.swing.JTable tblComprobantes;
    private javax.swing.JTable tblCuotas;
    private javax.swing.JTable tblImagenes;
    private javax.swing.JTable tblInventario;
    private javax.swing.JTable tblProductos;
    private javax.swing.JTextField txtBodega;
    private javax.swing.JTextField txtCant;
    private javax.swing.JTextField txtCantFacturados;
    private javax.swing.JTextField txtCantIncremento;
    private javax.swing.JLabel txtCantProductos;
    private javax.swing.JLabel txtCantUnidades;
    private javax.swing.JTextField txtCargar;
    private javax.swing.JTextField txtCartera;
    private javax.swing.JTextField txtCodProducto;
    private javax.swing.JTextField txtColor;
    private javax.swing.JTextField txtCopago;
    private javax.swing.JTextField txtCuotaInicial;
    private javax.swing.JTextField txtCuotas;
    private javax.swing.JTextField txtCupo;
    private javax.swing.JTextField txtDescGeneral;
    private javax.swing.JTextField txtDiasPlazo;
    private javax.swing.JTextField txtFechaFactura;
    private javax.swing.JTextField txtGarantiaFuncionamiento;
    private javax.swing.JTextField txtGarantiaSeñal;
    private javax.swing.JTextField txtIdSistema;
    private javax.swing.JLabel txtImpuesto;
    private javax.swing.JTextField txtInteres;
    private javax.swing.JLabel txtIva;
    private javax.swing.JTextField txtKm;
    private javax.swing.JTextField txtMarca;
    private javax.swing.JTextField txtModelo;
    private javax.swing.JTextField txtModeloContable;
    private javax.swing.JTextField txtMotor;
    private javax.swing.JTextField txtNit;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtNumChasis;
    private javax.swing.JTextArea txtObservaciones;
    private javax.swing.JTextField txtPlaca;
    private javax.swing.JTextField txtPlaca1;
    private javax.swing.JTextField txtPorcentaje;
    private javax.swing.JTextArea txtProblema;
    private javax.swing.JLabel txtRiva;
    private javax.swing.JLabel txtRtf;
    private javax.swing.JLabel txtSubTotal;
    private javax.swing.JTextField txtTipoVehiculo;
    private javax.swing.JLabel txtTotal;
    private javax.swing.JTextField txtTotalCredito;
    private javax.swing.JLabel txtTotalDescuentos;
    private javax.swing.JLabel txtTotalImpoconsumo;
    private javax.swing.JTextField txtTotalIntereses;
    private javax.swing.JLabel txtTotalIva;
    private javax.swing.JTextField txtTurno;
    private javax.swing.JTextField txtUltimaFacturaFecha;
    private javax.swing.JTextField txtValorCredito;
    private javax.swing.JTextField txtValorVenta;
    private javax.swing.JTextField txtVencimiento;
    // End of variables declaration//GEN-END:variables

    private boolean aplicarFacturacionElectronica(String factura, String factura2) throws Exception{

        int fila = 0;
        boolean documentoExitoso = false;

        for (int i = 0; i < tblComprobantes.getRowCount(); i++) {
            if ((Boolean) tblComprobantes.getValueAt(i, 2)) {
                fila = i;
            }
        }

        String tipoFactura = "";
        if (null == tblComprobantes.getValueAt(fila, 7)) {
            tipoFactura = "";
        } else {
            tipoFactura = tblComprobantes.getValueAt(fila, 7).toString();
        }

        if (tipoFactura.equals("Facturación Electronica")) {

            String paisFact = instancias.getConfiguraciones().getPais();
            if (paisFact.equals("Panama")) {
                documentoExitoso = factuaracionElectronicaPanama(factura2);
            } else if (paisFact.equals("Colombia")) {
                documentoExitoso = factuaracionElectronicaColombia(factura, factura2, fila);
            }
        }

        return documentoExitoso;
    }
    
     public void LogsFacturaApi(RespuestaServicioEnvioFacturas respuesta,String facturaEnvio) {
        
        ArrayList<Map<String, String>> datos = null;
        try {
//            datos = instancias.getSql().getLogsFacturaApi(facturaEnvio, "");
            datos = instancias.getSql().getLogsFacturaApi(respuesta.getDato().getNumeroFactura(), "");

            if (datos.size() > 0) {
//                instancias.getSql().modificarLogsServicioFacturacion("0", facturaEnvio, respuesta.getMensaje(), getRespuesta(), "");
                instancias.getSql().modificarLogsServicioFacturacion("0", respuesta.getDato().getNumeroFactura(), respuesta.getMensaje(), getRespuesta(), "",respuesta.getDato().getId(),"0");
            } else {
                String respuestaDomina = "";
//                instancias.getSql().almacenarLogsServicioFacturacion("0", facturaEnvio, respuesta.getDato().getId(), respuesta.getMensaje() + " " + respuestaDomina, getRespuesta(), "");
                instancias.getSql().almacenarLogsServicioFacturacion("0", respuesta.getDato().getNumeroFactura(), respuesta.getDato().getId(), respuesta.getMensaje() + " " + respuestaDomina, getRespuesta(), "","0");
            }
        } catch (Exception e) {
//            instancias.getSql().almacenarLogsServicioFacturacion("2", facturaEnvio, "", "Error en la respuesta del servicio "+e.getMessage(), "Error en el Servicio - Respuesta: "+getRespuesta(), "");
            instancias.getSql().almacenarLogsServicioFacturacion("2", facturaEnvio, "", "Error en la respuesta del servicio "+e.getMessage(), "Error en el Servicio - Respuesta: "+getRespuesta(), "","0");
           
            Log.error("Error en LogsFacturaApi: "+e.getMessage());
        }
    }

   
    private boolean factuaracionElectronicaPanama(String factura2) {

        ndTercero nodoTerc = instancias.getSql().getDatosTercero(txtIdSistema.getText());
        JsonObject comprobante = new JsonObject();
        comprobante.addProperty("apicode", Propiedades.getInstancia().getAppiCodePanama());
        comprobante.addProperty("documentNumber", factura2);
        comprobante.addProperty("documentType", "A"); //A = FACTURA D = NOTA DE CREDITO B = NOTA DE DEBITO
        comprobante.addProperty("customerId", nodoTerc.getId());
        comprobante.addProperty("customerName", nodoTerc.getNombre());
        comprobante.addProperty("customerAddress", nodoTerc.getEmail());

        JsonArray items = new JsonArray();

        for (int i = 0; i < tblProductos.getRowCount(); i++) {
            JsonObject item = new JsonObject();
            String tipo = "";
            if ((Boolean) tblProductos.getValueAt(i, 37)) {
                tipo = "01";
            } else {
                tipo = "02";
            }

            item.addProperty("code", tblProductos.getValueAt(i, 32).toString());
            item.addProperty("description", tblProductos.getValueAt(i, 1).toString());
            item.addProperty("qty", big.getMonedaToDouble(tblProductos.getValueAt(i, 3).toString()));
            item.addProperty("price", big.getMonedaToDouble(tblProductos.getValueAt(i, 2).toString()));
            item.addProperty("discount", big.getMonedaToDouble(tblProductos.getValueAt(i, 6).toString()));
            item.addProperty("discountDescription", tblProductos.getValueAt(i, 27).toString());
            item.addProperty("tax", tblProductos.getValueAt(i, 7).toString());
            item.addProperty("type", tipo);
            if (tipo.equalsIgnoreCase("02")) {
                item.addProperty("detail", tblProductos.getValueAt(i, 27).toString());
            }

            items.add(item);
        }

        JsonObject pago = new JsonObject();

        if (!txtFechaFactura.getText().equals(txtVencimiento.getText())) {
            pago.addProperty("title", "otros");
            pago.addProperty("amount", big.getMonedaToDouble(txtTotal.getText().replace("Total: ", "")));
            pago.addProperty("type", "4");
        } else {
            if (instancias.getEfectivoDevuelta().compareTo(BigDecimal.ZERO) > 0) {
                pago.addProperty("title", "Efectivo");
                pago.addProperty("amount", instancias.getEfectivoDevuelta().doubleValue());
                pago.addProperty("type", "1");
            } else if (instancias.getChequeDevuelta().compareTo(BigDecimal.ZERO) > 0 && instancias.getEfectivoDevuelta().compareTo(BigDecimal.ZERO) == 0) {
                pago.addProperty("title", "otros");
                pago.addProperty("amount", instancias.getChequeDevuelta().doubleValue());
                pago.addProperty("type", "4");
            } else if (instancias.getTarjetaCredito().compareTo(BigDecimal.ZERO) > 0 && instancias.getEfectivoDevuelta().compareTo(BigDecimal.ZERO) == 0) {
                pago.addProperty("title", "Tarjeta de crédito");
                pago.addProperty("amount", instancias.getTarjetaCredito().doubleValue());
                pago.addProperty("type", "3");
            } else if (instancias.getTarjetaDevuelta().compareTo(BigDecimal.ZERO) > 0 && instancias.getEfectivoDevuelta().compareTo(BigDecimal.ZERO) == 0) {
                pago.addProperty("title", "Tarjeta de debito");
                pago.addProperty("amount", instancias.getTarjetaDevuelta().doubleValue());
                pago.addProperty("type", "2");
            }
        }

        JsonArray payments = new JsonArray();
        payments.add(pago);

        comprobante.add("payments", payments);
        comprobante.add("items", items);

        Double dsPorcentajeDescuento = big.getMonedaToDouble(txtTotalDescuentos.getText()) / big.getMonedaToDouble(txtSubTotal.getText());
        dsPorcentajeDescuento = dsPorcentajeDescuento * 100;

        JsonArray globalDiscount = new JsonArray();
        JsonObject discount = new JsonObject();
        discount.addProperty("description", formatVal(big.getMonedaToDouble(txtTotalDescuentos.getText())));
        discount.addProperty("percentaje", formatVal(dsPorcentajeDescuento));

        globalDiscount.add(discount);
        comprobante.add("globalDiscount", globalDiscount);

        JsonArray header = new JsonArray();

//        for (String linea : Utils.dividirTextoEnLineas(9, 42, Utils.quitarEtiquetas(instancias.getInformacionEmpresaCompleto()))) {
//            if (linea != null && !linea.isEmpty()) {
//                JsonElement element = new JsonPrimitive(linea);
//                header.add(element);
//            }
//        }
//        comprobante.add("header", header);

        JsonElement h = new JsonPrimitive("");
        header.add(h);
        comprobante.add("header", header);

        JsonArray footer = new JsonArray();

        for (String linea : Utils.dividirTextoEnLineas(10, 42, Utils.quitarEtiquetas(instancias.getPie()))) {
            if (linea != null && !linea.isEmpty()) {
                JsonElement element = new JsonPrimitive(linea);
                footer.add(element);
            }
        }

        comprobante.add("footer", footer);

        Logs.log("json requestComprobante: " + comprobante.toString());
        facturacionElectronicaPanama fep = new facturacionElectronicaPanama();
        String resultado = null;
        try {
            resultado = fep.consumirServicio("comprobante", comprobante.toString());
        } catch (Exception ex) {
            Logs.error(ex);
        }

        if (resultado != null) {
            codigoAutorizacion = resultado;
            return true;
        } else {
            return false;
        }

    }

    private boolean factuaracionElectronicaColombia(String factura, String factura2, int fila) throws Exception{
       
        JsonObject adquiriente = new JsonObject();
        ndTercero nodoTerc = instancias.getSql().getDatosTercero(txtIdSistema.getText());
        Object[][] paises = instancias.getSql().getPais(nodoTerc.getPais());
        String dsPrefijo = "";
        if (null == tblComprobantes.getValueAt(fila, 8)) {
            dsPrefijo = "";
        } else {
            dsPrefijo = tblComprobantes.getValueAt(fila, 8).toString();
        }

        String dsNumeroFactura = factura.replaceAll("FACT", "");
        dsNumeroFactura = dsNumeroFactura.replaceAll("-", "");
     try{
         
        String fechaExpedicionVt = metodos.desdeDate(expFE.getSelectedDate());
        String fechaExpedicion="";
        if(!getFechaExpedicionUltimoDiaMesAnterior().equals("")){            
          fechaExpedicion=getFechaExpedicionUltimoDiaMesAnterior()+ " " + metodosGenerales.fechaHora().split(" ")[1];
        }else{            
          fechaExpedicion=fechaExpedicionVt + " " + metodosGenerales.fechaHora().split(" ")[1];
        } 
        
        String fechaEmision = metodos.fecha4(metodosGenerales.fecha()) + " " + metodosGenerales.fechaHora().split(" ")[1];
        String fechaVencimiento = metodos.fecha4(txtVencimiento.getText());
        String emailAdquiriente = nodoTerc.getEmail();
        String tipoIdentificacionAdquiriente = getTipoDocumentoEquivalente(nodoTerc.getTipo());

        String identificacionAdquiriente = nodoTerc.getId();
        String codigoPostalAdquirente = nodoTerc.getCategoria();
//        String tipoPersonaAdquiriente = "NATURAL";
        String tipoPersonaAdquiriente = "NATURAL";
        if (nodoTerc.getNaturaleza() != null) {
            if (nodoTerc.getNaturaleza().equals("Persona juridica")) {
                tipoPersonaAdquiriente = "JURIDICA";
//                tipoPersonaAdquiriente = "JURIDICA";
            }
        }

        String tipoIdent = "", nombresAdquiriente = "";
        if (null != nodoTerc.getTipo()) {
            tipoIdent = nodoTerc.getTipo();
        }

        if (tipoIdent.equals("Nit") || tipoIdent.equals("NIT de otro país")) {
            nombresAdquiriente = nodoTerc.getNombre();
        } else {
            nombresAdquiriente = nodoTerc.getpNombre();
        }

        
        String moneda = "COP";
        String descripcionMoneda = "";
        JsonObject monedaCambio = new JsonObject();
        if(nodoTerc.getCodigoMoneda()!= null){
            if(nodoTerc.getCodigoMoneda()!= ""){
              moneda = nodoTerc.getCodigoMoneda();
              if(moneda.equals("USD")){
               descripcionMoneda = "DÓLARES";
               monedaCambio.addProperty("fechaTipoCambio", getFechaMoneda());
               monedaCambio.addProperty("valorTipoCambio", getTrmMoneda());
              } 
             }
        }
        
        String segundoNombre = nodoTerc.getsNombre();
        String primerApellido = nodoTerc.getpApellido();
        String segundoApellido = nodoTerc.getsApellido();
//        String segundoApellido = "";
//        try{
//          segundoApellido = nodoTerc.getsApellido().equals("")?null:nodoTerc.getsApellido();  
//        }catch(Exception expt){
//          segundoApellido = null;
//        }
        String direccionAdquiriente = nodoTerc.getDireccion();
        Boolean adquirenteResponsable = nodoTerc.isResponsableIva();
        String regimenAdquirente = "NO_RESPONSABLE_IVA";
        if (adquirenteResponsable) {
            regimenAdquirente = "RESPONSABLE_IVA";
        }

        String telefonoAdquiriente = nodoTerc.getTelefono();

        String cdIso = paises[0][2].toString(); //"CO";
        String pais = nodoTerc.getPais();
        String ciudad = nodoTerc.getCiudad();
        String departamento = nodoTerc.getDepartamento();
        String cdDaneDepartamento = "";
        String cdDaneCiudad = "";
        try {
            Object[][] codigo = instancias.getSql().getCodigoLugar(departamento, ciudad);
            cdDaneDepartamento = codigo[0][0].toString();
            cdDaneCiudad = codigo[0][1].toString();
        } catch (Exception e) {
            metodos.msgAdvertenciaAjustado(null, "La ciudad del cliente es requerida.");
            Logs.error(e);
            return false;
        }

        String snDistribucionFisica = "N";
        String tipoDocumentoElectronico = "VENTA";

        String rtf = cmbRtf.getSelectedItem().toString();
        if (rtf.equals("RtF")) {
            rtf = "0.00";
        }
        double dsPorcentajeReteFuente = big.getMonedaToDouble(rtf);

        int cargoTotal = 0, anticipoTotal = 0;

        String tipoOperacion = cmbTipoOperacion.getSelectedItem().toString();
        String dsResolucionDian = tblComprobantes.getValueAt(fila, 3).toString();
        String versionDian = "2";

       // String[] responsabilidades = datos[113].toString().split(", ");
        String[] responsabilidades = {"R-99-PN /No responsable"};
        String responsabilidadesFiscales = "";
        for (int i = 0; i < responsabilidades.length; i++) {
            responsabilidadesFiscales = responsabilidadesFiscales + responsabilidades[i].split(" /")[0] + ";";
        }

        if (!responsabilidadesFiscales.equals("")) {
            responsabilidadesFiscales = responsabilidadesFiscales.substring(0, responsabilidadesFiscales.length() - 1);
        }

        //ESTOS SON LOS METODOS DE PAGO
        String minutos = metodosGenerales.hora().split(":")[0], segundos = metodosGenerales.hora().split(":")[1];
        if (minutos.length() == 1) {
            minutos = "0" + minutos;
        }

        if (segundos.length() == 1) {
            segundos = "0" + segundos;
        }

        Object[] metodosPagos = new Object[4];
        if (!txtFechaFactura.getText().equals(txtVencimiento.getText())) {
            metodosPagos[0] = "CREDITO";
            metodosPagos[1] = "CREDITO_ACH";
            metodosPagos[2] = fechaVencimiento + " " + minutos + ":" + segundos + ":00";
            metodosPagos[3] = "";
        } else {
            if (instancias.getEfectivoDevuelta().compareTo(BigDecimal.ZERO) > 0) {
                metodosPagos[0] = "CONTADO";
                metodosPagos[1] = "EFECTIVO";
                metodosPagos[2] = fechaVencimiento + " " + minutos + ":" + segundos + ":00";
                metodosPagos[3] = instancias.getSql().getIDPago(factura2, "EFECTIVO");
            } else if (instancias.getChequeDevuelta().compareTo(BigDecimal.ZERO) > 0 && instancias.getEfectivoDevuelta().compareTo(BigDecimal.ZERO) == 0) {
                metodosPagos[0] = "CONTADO";
                metodosPagos[1] = "CHEQUE";
                metodosPagos[2] = fechaVencimiento + " " + minutos + ":" + segundos + ":00";
                metodosPagos[3] = instancias.getSql().getIDPago(factura2, "CHEQUE");
            } else if (instancias.getTarjetaCredito().compareTo(BigDecimal.ZERO) > 0 && instancias.getEfectivoDevuelta().compareTo(BigDecimal.ZERO) == 0) {
                metodosPagos[0] = "CONTADO";
                metodosPagos[1] = "TARJETA_CREDITO";
                metodosPagos[2] = fechaVencimiento + " " + minutos + ":" + segundos + ":00";
                metodosPagos[3] = instancias.getSql().getIDPago(factura2, "TARJETA_CREDITO");
            } else if (instancias.getTarjetaDevuelta().compareTo(BigDecimal.ZERO) > 0 && instancias.getEfectivoDevuelta().compareTo(BigDecimal.ZERO) == 0) {
                metodosPagos[0] = "CONTADO";
                metodosPagos[1] = "TARJETA_DEBITO";
                metodosPagos[2] = fechaVencimiento + " " + minutos + ":" + segundos + ":00";
                metodosPagos[3] = instancias.getSql().getIDPago(factura2, "TARJETA_DEBITO");
            }else{
                metodosPagos[0] = "CONTADO";
                metodosPagos[1] = "EFECTIVO";
                metodosPagos[2] = fechaVencimiento + " " + minutos + ":" + segundos + ":00";
                metodosPagos[3] = instancias.getSql().getIDPago(factura2, "EFECTIVO");
            }
        }
        //FIN METODOS DE PAGO

        int contadorIvas = 0, contadorImpos = 0;
        Object[][] arregloImpuestosIva = new Object[tblProductos.getRowCount()][3];
        Object[][] arregloImpuestosImpo = new Object[tblProductos.getRowCount()][3];

        for (int i = 0; i < tblProductos.getRowCount(); i++) {
            int posicionImpuestoIva = 0, posicionImpuestoImpo = 0;
            Boolean impuestoExistenteIva = false, impuestoExistenteImpo = false;

            for (int j = 0; j < arregloImpuestosIva.length; j++) {
                if (arregloImpuestosIva[j][0] != null) {
                    if (arregloImpuestosIva[j][0].equals(tblProductos.getValueAt(i, 7))) {
                        posicionImpuestoIva = j;
                        impuestoExistenteIva = true;
                    }
                }
            }

            for (int j = 0; j < arregloImpuestosImpo.length; j++) {
                if (arregloImpuestosImpo[j][0] != null) {
                    if (arregloImpuestosImpo[j][0].equals(tblProductos.getValueAt(i, 23))) {
                        posicionImpuestoImpo = j;
                        impuestoExistenteImpo = true;
                    }
                }
            }

            if (impuestoExistenteIva) {
                if (big.getMonedaToDouble(tblProductos.getValueAt(i, 7).toString()) > 0) {
                    arregloImpuestosIva[posicionImpuestoIva][1] = big.formatDouble(((double) arregloImpuestosIva[posicionImpuestoIva][1])) + big.getMonedaToDouble(tblProductos.getValueAt(i, 4).toString());
                    arregloImpuestosIva[posicionImpuestoIva][2] = big.formatDouble(((double) arregloImpuestosIva[posicionImpuestoIva][2])) + big.getMonedaToDouble(tblProductos.getValueAt(i, 33).toString());
                }
            } else {
                if (big.getMonedaToDouble(tblProductos.getValueAt(i, 7).toString()) > 0) {
                    arregloImpuestosIva[contadorIvas][0] = big.formatDouble(tblProductos.getValueAt(i, 7).toString());
                    arregloImpuestosIva[contadorIvas][1] = big.getMonedaToDouble(tblProductos.getValueAt(i, 4).toString());
                    arregloImpuestosIva[contadorIvas][2] = big.getMonedaToDouble(tblProductos.getValueAt(i, 33).toString());
                    contadorIvas = contadorIvas + 1;
                }
            }

            if (impuestoExistenteImpo) {
                if (big.getMonedaToDouble(tblProductos.getValueAt(i, 23).toString()) > 0) {
                    arregloImpuestosImpo[posicionImpuestoImpo][1] = big.formatDouble(((double) arregloImpuestosImpo[posicionImpuestoImpo][1]) + big.getMonedaToDouble(tblProductos.getValueAt(i, 4).toString()));
                    arregloImpuestosImpo[posicionImpuestoImpo][2] = big.formatDouble(((double) arregloImpuestosImpo[posicionImpuestoImpo][1]) + big.getMonedaToDouble(tblProductos.getValueAt(i, 8).toString()));
                }
            } else {
                if (big.getMonedaToDouble(tblProductos.getValueAt(i, 23).toString()) > 0) {
                    arregloImpuestosImpo[contadorImpos][0] = big.formatDouble(tblProductos.getValueAt(i, 23).toString());
                    arregloImpuestosImpo[contadorImpos][1] = big.getMonedaToDouble(tblProductos.getValueAt(i, 4).toString());
                    arregloImpuestosImpo[contadorImpos][2] = big.getMonedaToDouble(tblProductos.getValueAt(i, 8).toString());
                    contadorImpos = contadorImpos + 1;
                }
            }
        }

        double totalIvas = 0.0;
        for (int i = 0; i < contadorIvas; i++) {
            totalIvas = big.sumaExacta(totalIvas , (double) arregloImpuestosIva[i][2]);
        }

        double totalImpos = 0.0;
        for (int i = 0; i < contadorImpos; i++) {
            totalImpos = big.sumaExacta(((double) arregloImpuestosImpo[i][2]), totalImpos);
        }

        //se crea el json 
         
        adquiriente.addProperty("dsPrefijo", dsPrefijo);
        adquiriente.addProperty("tipoFactura", 0);
        adquiriente.addProperty("dsNumeroFactura", dsNumeroFactura);
        String turno = txtTurno.getText().trim();
        if(turno!=""){
         adquiriente.addProperty("OrdenReference", turno);
         JsonObject numero = new JsonObject();
         //numero.addProperty("numero", turno);
         adquiriente.add("ordenCompra", numero);
          numero.addProperty("numero", turno);
        }
        adquiriente.addProperty("fechaEmision", fechaEmision);
        adquiriente.addProperty("fechaExpedicion", fechaExpedicion);
        adquiriente.addProperty("fechaVencimiento", fechaVencimiento);
        adquiriente.addProperty("emailAdquiriente", emailAdquiriente);
        adquiriente.addProperty("tipoIdentificacionAdquiriente", tipoIdentificacionAdquiriente);
//        adquiriente.addProperty("tipoIdentificacionAdquiriente", "werr");
        adquiriente.addProperty("identificacionAdquiriente", identificacionAdquiriente.replaceAll(" ", "").trim());
        if (nodoTerc.getId().contains("-")) {
            String digitoVerificacionAdquirente = nodoTerc.getId().split("-")[1];
            adquiriente.addProperty("digitoVerificacionAdquirente", digitoVerificacionAdquirente.trim());
        }
        adquiriente.addProperty("codigoPostalAdquirente", codigoPostalAdquirente);
        adquiriente.addProperty("tipoPersonaAdquiriente", tipoPersonaAdquiriente);
        adquiriente.addProperty("nombresAdquiriente", nombresAdquiriente);
        adquiriente.addProperty("segundoNombre", segundoNombre);
        adquiriente.addProperty("primerApellido", primerApellido);
        adquiriente.addProperty("segundoApellido", segundoApellido);        
        adquiriente.addProperty("direccionAdquiriente", direccionAdquiriente);
        
        datos = instancias.getSql().getDatosMaestra();
        ndMaestra maestra = metodos.llenarMaestra(datos);
        if(maestra.isTieneSucursal()){
           adquiriente.addProperty("dsRazonComercial", maestra.getD1());
           adquiriente.addProperty("dsDireccionEmisor", maestra.getD6());
           adquiriente.addProperty("dsTelefonoEmisor", maestra.getD7());
           adquiriente.addProperty("dsEmailEmisor", maestra.getGmail());
           adquiriente.addProperty("cdTipoPlantilla", maestra.getNumeroSucursal());
        }
        
        adquiriente.addProperty("adquirenteResponsable", "" + adquirenteResponsable);
        adquiriente.addProperty("regimenAdquirente", regimenAdquirente);
        adquiriente.addProperty("telefonoAdquiriente", telefonoAdquiriente);

        adquiriente.addProperty("snDistribucionFisica", snDistribucionFisica);

        adquiriente.addProperty("dsObservacion", txtObservaciones.getText());
      
        adquiriente.addProperty("tipoDocumentoElectronico", tipoDocumentoElectronico);
//                if(Double.valueOf(dsPorcentajeReteFuente1) >0 ){
//                    adquiriente.addProperty("dsPorcentajeReteFuente",dsPorcentajeReteFuente1);
//                }
//                if(Double.valueOf(dsRetencionFuente1) >0 ){
//                    adquiriente.addProperty("dsRetencionFuente",dsRetencionFuente1);
//                }

        //adquiriente.addProperty("valorBaseImponible", valorBaseImponible1);
        adquiriente.addProperty("cargoTotal", formatVal(cargoTotal));
        adquiriente.addProperty("anticipoTotal", formatVal(anticipoTotal));
        adquiriente.addProperty("moneda", moneda);
        if(moneda.equals("USD")){
         adquiriente.add("tipoCambio", monedaCambio);
        }
        adquiriente.addProperty("tipoOperacion", tipoOperacion);
        adquiriente.addProperty("dsResolucionDian", dsResolucionDian);
        adquiriente.addProperty("versionDian", versionDian);
        adquiriente.addProperty("responsabilidadesFiscales", responsabilidadesFiscales);
       
        // AQUI FALTARIA UN VALOR IVA


        //se adiciona la ciudad
        JsonObject ciudadAdquiriente = new JsonObject();

        ciudadAdquiriente.addProperty("cdDane", cdDaneCiudad);
        ciudadAdquiriente.addProperty("dsNombre", ciudad);

        JsonObject departamentoAdquiriente = new JsonObject();
        departamentoAdquiriente.addProperty("cdDane", cdDaneDepartamento);
        departamentoAdquiriente.addProperty("dsNombre", departamento);
//        if(cdIso.equals("CO")){
            departamentoAdquiriente.addProperty("cdIso", cdIso + "-" + departamento.substring(0, 3));
//        }else{
//            departamentoAdquiriente.addProperty("cdIso", "");
//        } 
        JsonObject paisAdquiriente = new JsonObject();
        paisAdquiriente.addProperty("cdIso", cdIso);
        paisAdquiriente.addProperty("dsNombre", pais);

        departamentoAdquiriente.add("pais", paisAdquiriente);

        ciudadAdquiriente.add("departamento", departamentoAdquiriente);

        adquiriente.add("ciudadAdquiriente", ciudadAdquiriente);
        //fin adicion ciudad

        JsonObject pagoJson = new JsonObject();
        pagoJson.addProperty("formaPago", "" + metodosPagos[0]);
        pagoJson.addProperty("medioPago", "" + metodosPagos[1]);
        if (!txtFechaFactura.getText().equals(txtVencimiento.getText())) {
            pagoJson.addProperty("fechaVencimientoPago", "" + metodosPagos[2]);
            //pagoJson.addProperty("idPago", ""+metodosPagos[3]);
        }

        Logs.log("adquiriente: " + adquiriente.toString());

        Logs.log("pago: " + pagoJson.toString());
        adquiriente.add("pago", pagoJson);

        JsonArray impuestosRetenciones = new JsonArray();
        if (contadorIvas > 0) {
            JsonObject impuestosRetencionesIva = new JsonObject();
            JsonArray arraySubTotalesIva = new JsonArray();

            impuestosRetencionesIva.addProperty("valorTotal", formatVal(totalIvas));
            impuestosRetencionesIva.add("subtotales", arraySubTotalesIva);
            
            for (int i = 0; i < contadorIvas; i++) {
                JsonObject subTotal = new JsonObject();
                subTotal.addProperty("valorBase", formatVal(arregloImpuestosIva[i][1]));
                subTotal.addProperty("valorImpuestoRetencion", formatVal(arregloImpuestosIva[i][2]));
                subTotal.addProperty("porcentaje", formatVal(arregloImpuestosIva[i][0]));
                subTotal.addProperty("tributo", "IVA");
                arraySubTotalesIva.add(subTotal);
            }
            impuestosRetenciones.add(impuestosRetencionesIva);
        }

        //Cadena del impoconsumo
        if (contadorImpos > 0) {
            JsonObject impuestosRetencionesInc = new JsonObject();
            JsonArray arraySubTotalesInc = new JsonArray();

            impuestosRetencionesInc.addProperty("valorTotal", formatVal(totalImpos));
            impuestosRetencionesInc.add("subtotales", arraySubTotalesInc);

            for (int i = 0; i < contadorImpos; i++) {
                JsonObject subTotal = new JsonObject();
                subTotal.addProperty("valorBase", formatVal(arregloImpuestosImpo[i][1]));
                subTotal.addProperty("valorImpuestoRetencion", formatVal(arregloImpuestosImpo[i][2]));
                subTotal.addProperty("porcentaje", formatVal(arregloImpuestosImpo[i][0]));
                subTotal.addProperty("tributo", "INC");
                arraySubTotalesInc.add(subTotal);
            }
            impuestosRetenciones.add(impuestosRetencionesInc);
        }

        if (big.getMonedaToDouble(txtRiva.getText()) > 0) {

            JsonObject impuestosRetencionesRteIva = new JsonObject();
            JsonArray arraySubTotalesRteIva = new JsonArray();

            //impuestosRetencionesRteIva.addProperty("valorTotal", formatVal(totalImpos));
            impuestosRetencionesRteIva.addProperty("valorTotal", formatVal(big.getMonedaToDouble(txtRiva.getText())));
            impuestosRetencionesRteIva.add("subtotales", arraySubTotalesRteIva);
            JsonObject subTotal = new JsonObject();

            subTotal.addProperty("valorBase", formatVal(big.getMonedaToDouble(txtTotalIva.getText())));
            subTotal.addProperty("valorImpuestoRetencion", formatVal(big.getMonedaToDouble(txtRiva.getText())));
            subTotal.addProperty("porcentaje", "15.00");
            subTotal.addProperty("tributo", "RETE_IVA");
            arraySubTotalesRteIva.add(subTotal);
            impuestosRetenciones.add(impuestosRetencionesRteIva);
        }

        if (big.getMonedaToDouble(txtRtf.getText()) > 0) {
            JsonObject impuestosRetencionesRteFuente = new JsonObject();
            JsonArray arraySubTotalesRteFuente = new JsonArray();

            impuestosRetencionesRteFuente.addProperty("valorTotal", formatVal(big.getMonedaToDouble(txtRtf.getText())));
            impuestosRetencionesRteFuente.add("subtotales", arraySubTotalesRteFuente);
            JsonObject subTotal = new JsonObject();

            subTotal.addProperty("valorBase", "" + formatVal(big.getMonedaToDouble(txtSubTotal.getText())));
            subTotal.addProperty("valorImpuestoRetencion", formatVal(big.getMonedaToDouble(txtRtf.getText())));
            subTotal.addProperty("porcentaje", formatVal(dsPorcentajeReteFuente));
            subTotal.addProperty("tributo", "RETE_FUENTE");
            arraySubTotalesRteFuente.add(subTotal);
            impuestosRetenciones.add(impuestosRetencionesRteFuente);
        }

        JsonObject impuestosRetencionesImpBolsa = new JsonObject();
        JsonArray arraySubTotalesImpBolsa = new JsonArray();

        impuestosRetencionesImpBolsa.addProperty("valorTotal", formatVal(totalImpos));
        impuestosRetencionesImpBolsa.add("subtotales", arraySubTotalesImpBolsa);

        Logs.log("impuestosRetenciones: " + impuestosRetenciones.toString());

        if (impuestosRetenciones.size() > 0) {
            adquiriente.add("impuestosRetenciones", impuestosRetenciones);
        }

        double valorBaseImponible = 0.00;
        Object[][] detalladoProductos = new Object[tblProductos.getRowCount()][20];

        double valorBrutoTotal = 0.0;
        for (int i = 0; i < tblProductos.getRowCount(); i++) {
            //se valida el impuesto a la bolsa
            if (tblProductos.getValueAt(i, 0).equals("IMP01")) {
                JsonObject subTotal = new JsonObject();

                double totalBolsas = big.getMonedaToDouble(tblProductos.getValueAt(i, 2).toString());

                subTotal.addProperty("valorBase", formatVal(totalBolsas));
                subTotal.addProperty("valorImpuestoRetencion", formatVal(big.getMonedaToDouble(txtImpuesto.getText())));
                subTotal.addProperty("porcentaje", "0.00");
                subTotal.addProperty("tributo", "BOLSAS");
                subTotal.addProperty("unidadMedida", tblProductos.getValueAt(i, 36).toString());
                subTotal.addProperty("valorUnitario", formatVal(totalBolsas));
                arraySubTotalesImpBolsa.add(subTotal);
            }
            
            //numeroFactura
//            detalladoProductos[i][0] = factura.replace("FACT-", "");
            detalladoProductos[i][0] = dsNumeroFactura;

            //codigoArticulo
            detalladoProductos[i][1] = tblProductos.getValueAt(i, 0);

            //estandarProducto
            String estandar = tblProductos.getValueAt(i, 35).toString();
            if (estandar.equals("Código Estándar de Productos y Servicios de Naciones Unidas")) {
                estandar = "UNSPSC";
            } else if (estandar.equals("Números Globales de Identificación de Productos")) {
                estandar = "GTIN";
            } else if (estandar.equals("Partida Arancelaria")) {
                estandar = "PARTIDA_ARANCELARIA";
            } else if (estandar.equals("Estándar de adopción del contribuyente")) {
                estandar = "ESTANDAR_CONTRIBUYENTE";
            }
            detalladoProductos[i][2] = estandar;

            //descripcionArticulo
            detalladoProductos[i][3] = tblProductos.getValueAt(i, 1);

            //porcentajeIva
            double porcIva = big.getMonedaToDouble(tblProductos.getValueAt(i, 7).toString());
            detalladoProductos[i][4] = porcIva;

            //porcentajeIca
            detalladoProductos[i][5] = "0.00";

            //porcentajeConsumo
            double porcImpo = big.getMonedaToDouble(tblProductos.getValueAt(i, 23).toString());
            detalladoProductos[i][6] = porcImpo;

            //cantidad
            double cantidad = big.getMonedaToDouble(tblProductos.getValueAt(i, 3).toString());
            detalladoProductos[i][7] = cantidad;

            //precioUnitario
            double precioUnitario = 0;
            
            if (instancias.isPvpConIva() || instancias.isPvpConImpoconsumo()) {
                precioUnitario = big.getMonedaToDouble(tblProductos.getValueAt(i, 9).toString()) / big.getMonedaToDouble(tblProductos.getValueAt(i, 3).toString());
            }else{
                //antes de modificar
                precioUnitario = big.getMonedaToDouble(tblProductos.getValueAt(i, 2).toString());
            }
            detalladoProductos[i][8] = precioUnitario;

            //valorTotalArticulo
            double valorTotalArticulo = big.getMonedaToDouble(tblProductos.getValueAt(i, 9).toString()) / big.getMonedaToDouble(tblProductos.getValueAt(i, 3).toString());

            detalladoProductos[i][9] = valorTotalArticulo;

            //valorIva
            double valorIva = big.getMonedaToDouble(tblProductos.getValueAt(i, 33).toString());
            detalladoProductos[i][10] = valorIva;

            //valorImpo
            double valorImpo = big.getMonedaToDouble(tblProductos.getValueAt(i, 8).toString());
            detalladoProductos[i][11] = valorImpo;

            //unidadMedida
            detalladoProductos[i][12] = tblProductos.getValueAt(i, 36).toString();

            
            //valorTotalBruto
            double valorDescuento = big.getMonedaToDouble(tblProductos.getValueAt(i, 6).toString());
            double valorTotalBruto = big.getMonedaToDouble(tblProductos.getValueAt(i, 4).toString());
           //valorTotalBruto = valorTotalBruto + valorDescuento; se reemplaza porque no redondeba correctamente
            valorTotalBruto = big.formatDouble(valorTotalBruto + valorDescuento);
            valorBrutoTotal = big.formatDouble(valorBrutoTotal + valorTotalBruto);
            detalladoProductos[i][13] = valorTotalBruto;

            //unidadesEmpaque
            detalladoProductos[i][14] = big.getMonedaToDouble(tblProductos.getValueAt(i, 13).toString()) / big.getMonedaToDouble(tblProductos.getValueAt(i, 3).toString());

            //valorTotalImpuestosRetenciones
            double valorTotalImpuestosRetenciones = big.getMonedaToDouble(tblProductos.getValueAt(i, 8).toString())
                    + big.getMonedaToDouble(tblProductos.getValueAt(i, 33).toString());

            detalladoProductos[i][17] = valorTotalImpuestosRetenciones;

            //codigoVendedor
            String codigoVendedor = instancias.getSql().getIdEmpleado(cmbVendedor.getSelectedItem().toString());
            detalladoProductos[i][18] = codigoVendedor;

            //detalle Producto
            detalladoProductos[i][19] = tblProductos.getValueAt(i, 27);

            detalladoProductos[i][19] = tblProductos.getValueAt(i, 27);

        }

        if (arraySubTotalesImpBolsa.size() > 0) {
            impuestosRetenciones.add(impuestosRetencionesImpBolsa);
        }

        JsonArray arrayDetalles = new JsonArray(); 
        double valorDecuentoTotalDouble  = 0.0; 
        double valorDescuento = 0.0;
        double valorRtf = 0.0;
        JsonArray arraydescuentosGeneral = new JsonArray();
        for (int i = 0; i < tblProductos.getRowCount(); i++) {

            JsonObject detalle = new JsonObject();
            detalle.addProperty("numeroFactura", "" + detalladoProductos[i][0]);
            detalle.addProperty("codigoArticulo", "" + detalladoProductos[i][1]);
            //detalle.addProperty("estandarProducto", ""+ detalladoProductos[i][2]);
            detalle.addProperty("descripcionArticulo", "" + detalladoProductos[i][3]);
            detalle.addProperty("cantidad", formatVal(big.getBigDecimal(detalladoProductos[i][7])));
            detalle.addProperty("precioUnitario", formatVal(detalladoProductos[i][8]));
            
            
            
            detalle.addProperty("valorTotalArticulo", formatVal(detalladoProductos[i][9]));
            //detalle.addProperty("nota", ""+detalladoProductos[i][19]);
            //detalle.addProperty("observacionDetalle", ""+detalladoProductos[i][19]);
            detalle.addProperty("unidadMedida", "" + detalladoProductos[i][12]);
            detalle.addProperty("valorTotalBruto", formatVal(detalladoProductos[i][13]));
            detalle.addProperty("valorTotalImpuestosRetenciones", formatVal(Double.valueOf(detalladoProductos[i][17].toString()) + big.getMonedaToDouble(txtRtf.getText())));

            //detalle.addProperty("porcentajeIva", ""+detalladoProductos[i][4]);
            //detalle.addProperty("porcentajeIca", ""+detalladoProductos[i][5]);
            //detalle.addProperty("porcentajeConsumo", ""+detalladoProductos[i][6]);
            //detalle.addProperty("valorIva", ""+detalladoProductos[i][10]);
            //detalle.addProperty("unidadesEmpaque", ""+detalladoProductos[i][14]);
            //detalle.addProperty("codigoVendedor", ""+detalladoProductos[i][18] );
            System.err.println("Descuento----->>>");
            System.err.println("5----->>>"+big.getBigDecimal(tblProductos.getValueAt(i, 5).toString().replace(",", ".")).compareTo(big.getBigDecimal("0")));
            System.err.println("6----->>>"+big.getMonedaToDouble(tblProductos.getValueAt(i, 6).toString()));
            if (big.getBigDecimal(tblProductos.getValueAt(i, 5).toString().replace(",", ".")).compareTo(big.getBigDecimal("0")) > 0 || big.getMonedaToDouble(tblProductos.getValueAt(i, 6).toString())>0) {
                Logs.error("ENTRO POR DESCUENTOS ");
                JsonArray cargosDescuentos = new JsonArray();
                boolean descuentoExiste = false;
                JsonObject descuento = new JsonObject();
                descuento.addProperty("tipo", "" + false);
               try{ 
//                descuento.addProperty("codigoDescuento", "" + tblProductos.getValueAt(i, 31).toString().split("///")[0]);
                descuento.addProperty("codigoDescuento", "DESCUENTO_NO_CONDICIONADO");
                descuento.addProperty("razon", "" + tblProductos.getValueAt(i, 31).toString().split("///")[1]);
                descuento.addProperty("porcentaje", formatVal(big.formatDouble(tblProductos.getValueAt(i, 5).toString().replace(",", "."))));
               }catch(Exception exp){
                  throw new ClassCastException("Error en la razon del descuento o codigo descuento: "+exp.getMessage()); 
               }
                double valorDesc = big.getMonedaToDouble(tblProductos.getValueAt(i, 6).toString());
                valorDescuento = valorDescuento + valorDesc;
                descuento.addProperty("valor", formatVal(valorDesc));
//                 descuento.addProperty("valorBase", formatVal(big.getMonedaToDouble(tblProductos.getValueAt(i, 4).toString())+valorDesc));//se modifica por descuento
                   descuento.addProperty("valorBase", formatVal(big.formatDouble(big.getMonedaToDouble(tblProductos.getValueAt(i, 4).toString().replace(".", ""))+ valorDesc )));
                   BigDecimal valorDesDestalle  = new BigDecimal(formatVal(big.formatDouble(big.getMonedaToDouble(tblProductos.getValueAt(i, 4).toString().replace(".", ""))+ valorDesc )));
                   valorDecuentoTotalDouble  = valorDecuentoTotalDouble +  Double.parseDouble(valorDesDestalle+"");
                   
//                       
                   cargosDescuentos.add(descuento);
                
                JsonObject descuentoTmp = null;
                for (JsonElement cargosDescuento : arraydescuentosGeneral) {
                    descuentoTmp = cargosDescuento.getAsJsonObject();
                    String codigoDescuento = tblProductos.getValueAt(i, 31).toString().split("///")[0];
                    if (descuentoTmp != null && descuentoTmp.get("codigoDescuento").getAsString().equalsIgnoreCase(codigoDescuento) && descuentoTmp.get("porcentaje").getAsString().equalsIgnoreCase(descuento.get("porcentaje").getAsString())) {
                        valorDesc = descuentoTmp.get("valor").getAsDouble() + valorDesc;
                        descuentoTmp.addProperty("valor",formatVal(big.formatDouble(valorDesc+"")));                                             
//                      descuentoTmp.addProperty("valorBase", formatVal(descuentoTmp.get("valorBase").getAsDouble() + big.getMonedaToDouble(tblProductos.getValueAt(i, 4).toString())+ valorDesc));
                        descuentoTmp.addProperty("valorBase", formatVal(valorDecuentoTotalDouble));
                        descuentoExiste = true;
                    }
                }
                if (!descuentoExiste) {
                    descuentoTmp = deepCopy(descuento.getAsJsonObject(), JsonObject.class);
                    arraydescuentosGeneral.add(descuentoTmp);
                }
                detalle.add("cargosDescuentos", cargosDescuentos);

            }

            JsonArray impuestosRetencionesProducto = new JsonArray();
            boolean baseSumada = false;
            if (detalladoProductos[i][1].toString().equals("IMP01")) {
                JsonObject impuestoRetencionBolsa = new JsonObject();
                JsonArray subTotales = new JsonArray();

                impuestoRetencionBolsa.addProperty("valorTotal", formatVal(big.getMonedaToDouble(txtImpuesto.getText())));
                impuestoRetencionBolsa.add("subtotales", subTotales);
                JsonObject subTotal = new JsonObject();

                subTotal.addProperty("valorBase", formatVal(detalladoProductos[i][8]));
                subTotal.addProperty("valorImpuestoRetencion", formatVal(big.getMonedaToDouble(datos[53].toString())));
                subTotal.addProperty("porcentaje", "0.00");
                subTotal.addProperty("tributo", "BOLSAS");
                subTotal.addProperty("unidadMedida", "" + detalladoProductos[i][12]);
                subTotal.addProperty("valorUnitario", formatVal(detalladoProductos[i][8]));

                subTotales.add(subTotal);
                impuestosRetencionesProducto.add(impuestoRetencionBolsa);
            }

            double baseImponibleProducto = big.getMonedaToDouble(tblProductos.getValueAt(i, 4).toString());

            if (cmbRtf.getSelectedIndex() > 0) {
                
                JsonObject impuestoRetencionRtf = new JsonObject();
                JsonArray subTotalesRtf = new JsonArray();

                impuestoRetencionRtf.addProperty("valorTotal", formatVal(baseImponibleProducto * (big.getMonedaToDouble(cmbRtf.getSelectedItem().toString()) / 100)));
                impuestoRetencionRtf.add("subtotales", subTotalesRtf);
                JsonObject subTotalRtf = new JsonObject();
                double VlrRtf = baseImponibleProducto * (big.getMonedaToDouble(cmbRtf.getSelectedItem().toString()) / 100);
                valorRtf = valorRtf + VlrRtf;
                subTotalRtf.addProperty("valorBase", formatVal(baseImponibleProducto));
                subTotalRtf.addProperty("valorImpuestoRetencion", formatVal(VlrRtf));
                subTotalRtf.addProperty("porcentaje", formatVal(big.getMonedaToDouble(cmbRtf.getSelectedItem().toString())));
                subTotalRtf.addProperty("tributo", "RETE_FUENTE");

                subTotalesRtf.add(subTotalRtf);
                impuestosRetencionesProducto.add(impuestoRetencionRtf);
            }

            if (big.getMonedaToDouble(tblProductos.getValueAt(i, 33).toString()) > 0) {
                JsonObject impuestoRetencionIva = new JsonObject();
                JsonArray subTotalesIva = new JsonArray();

                impuestoRetencionIva.addProperty("valorTotal", formatVal(detalladoProductos[i][10]));
                impuestoRetencionIva.add("subtotales", subTotalesIva);
                JsonObject subTotalIva = new JsonObject();

                subTotalIva.addProperty("valorBase", formatVal(baseImponibleProducto));
                subTotalIva.addProperty("valorImpuestoRetencion", formatVal(detalladoProductos[i][10]));
                subTotalIva.addProperty("porcentaje", formatVal(big.formatDouble(tblProductos.getValueAt(i, 7).toString())));
                subTotalIva.addProperty("tributo", "IVA");

                subTotalesIva.add(subTotalIva);
                impuestosRetencionesProducto.add(impuestoRetencionIva);
                valorBaseImponible = big.formatDouble(valorBaseImponible + baseImponibleProducto);
                baseSumada = true;
//            }else{
//                valorBaseImponible = big.formatDouble(valorBaseImponible + baseImponibleProducto);
            }

            if (big.getMonedaToDouble(tblProductos.getValueAt(i, 8).toString()) > 0) {
                JsonObject impuestoRetencionInc = new JsonObject();
                JsonArray subTotalesInc = new JsonArray();

                double valorImpo = (double) detalladoProductos[i][11];
                impuestoRetencionInc.addProperty("valorTotal", formatVal(valorImpo));
                impuestoRetencionInc.add("subtotales", subTotalesInc);
                JsonObject subTotalInc = new JsonObject();

                subTotalInc.addProperty("valorBase", formatVal(baseImponibleProducto));
                subTotalInc.addProperty("valorImpuestoRetencion", formatVal(detalladoProductos[i][11]));
                subTotalInc.addProperty("porcentaje", formatVal(big.formatDouble(tblProductos.getValueAt(i, 23).toString())));
                subTotalInc.addProperty("tributo", "INC");

                subTotalesInc.add(subTotalInc);
                impuestosRetencionesProducto.add(impuestoRetencionInc);
                if(!baseSumada){
                    valorBaseImponible = big.formatDouble(valorBaseImponible + baseImponibleProducto);
                }
            }
            if (impuestosRetencionesProducto.size() > 0) {
                detalle.add("impuestosRetenciones", impuestosRetencionesProducto);
               
            }
            arrayDetalles.add(detalle);
        }

        if(valorBaseImponible>0){
             adquiriente.addProperty("valorBaseImponible", formatVal(valorBaseImponible));
        }else{
            adquiriente.addProperty("valorBaseImponible", "0.00");
        }
        Logs.log("arrayDetalles: " + arrayDetalles.toString());
        adquiriente.add("detalles", arrayDetalles);

        if (valorDescuento > 0) {
            Logs.log("arraydescuentos: " + arraydescuentosGeneral.toString());
            adquiriente.add("cargosDescuentos", arraydescuentosGeneral);
        }

        double valorBrutoMasTributos = big.formatDouble(valorBrutoTotal + totalIvas + totalImpos);
        double varloNeto = big.formatDouble((valorBrutoTotal + totalIvas + totalImpos) - valorDescuento);

        adquiriente.addProperty("valorBruto", formatVal(valorBrutoTotal));
        adquiriente.addProperty("valorNeto", formatVal(varloNeto));
        adquiriente.addProperty("valorBrutoMasTributos", formatVal(valorBrutoMasTributos));
        adquiriente.addProperty("descuentoTotal", formatVal(big.formatDouble(valorDescuento+"")));//SE DEBE APROXIMAR
        convertirNumeroALetras convertirNumeroALetras = new convertirNumeroALetras();
        if(!descripcionMoneda.equals("")){
              
         adquiriente.addProperty("valorEnLetras", convertirNumeroALetras.Convertir(formatVal(varloNeto),descripcionMoneda));
        }else{
            
         adquiriente.addProperty("valorEnLetras", convertirNumeroALetras.Convertir(formatVal(varloNeto)));
        }
        adquiriente.addProperty("customTotalUnidades", txtCantUnidades.getText());
        
        if(valorRtf>0){
            adquiriente.addProperty("dsObservacion", txtObservaciones.getText()+ " Para realizar su pago, debe aplicar retención del "+cmbRtf.getSelectedItem().toString()+"%, equivalente a "+big.setMoneda(valorRtf)); 
        }else{
            adquiriente.addProperty("dsObservacion", txtObservaciones.getText());
        }        
 
        if (Utils.quitarEtiquetas(instancias.getLegal()).isEmpty()) {
            adquiriente.addProperty("customNumeroCuenta", "");
        } else {
            adquiriente.addProperty("customNumeroCuenta", Utils.quitarEtiquetas(instancias.getLegal()));
        }

    }catch(Exception exp){
        if(showMsg){
          metodos.msgError(null,"Ocurrio un error al formatear el Json - Mensaje: "+exp.getMessage()+" - Causa: "+exp.getCause());
        }
        Logs.log("Error al formatear Json: "+exp.getMessage()+" - Causa: "+exp.getCause());
        exp.printStackTrace();
        return false; 
    }
        
//SE COMENTA PORQUE YA NO SE NECESITA ENVIAR EL TOKEN PARA FACTURA ELECTRONICA YA QUE SE HACE POR MEDIO DEL SERVICIO DE LA API
//       try{
//        Logs.log("json: " + adquiriente.toString());
//        Logs.log("Nit Emisor: " + instancias.getNitEmisor().isEmpty());
//        Logs.log("Token Emisor(): " + instancias.getTokenEmisor().isEmpty());
//       }catch(Exception exp){System.err.println(""+exp.getMessage()); exp.printStackTrace();}
//        if(instancias.getNitEmisor() == "null" || instancias.getTokenEmisor() == "null" ){
//          metodos.msgError(null,"El Token de Facturación ha caducado, por favor ingresar nuevamente al sistema!");
//          return false;
//        }
      try{  
          //DEBE IR SERVICIO DE CONSULTA
          if(instancias.getNitEmisor() == "null" || instancias.getNitEmisor().trim() == "" ){
            if(showMsg){
              instancias.getSql().desbloquearConsecutivosfactura();
              Logs.log("Informamos que en este momento se está presentando intermitencia en el servicio, Por lo cual recomendamos detener la facturación.\n Comuníquese con la línea de servicio");   
              metodos.msgError(null,"Informamos que en este momento se está presentando intermitencia en el servicio, Por lo cual recomendamos detener la facturación.\n Comuníquese con la línea de servicio");
            }else{
              Logs.log("Error en Factura al conectar con el servidor de ClickingPos!");
            }
            return false;
          }
        }catch(Exception exp){
            String estado  = null;
                try{
                ndConfiguracion nodoConf = instancias.getSql().getDatosConfiguracion();
                frmIngresar frmIngresar = new frmIngresar();
                RespuestaServicioRest respuestaServicio = metodos.consultarEstado(frmIngresar.codigoEncriptado(nodoConf.getNit(), nodoConf.getNombre()),1);
                respuestaServicio.getEstado();
                estado  = respuestaServicio.getEstado();
                Cliente cliente = respuestaServicio.getCliente();
                String nitEmisor = String.valueOf(cliente.getNitEmisor());
                String  tokenEmisor = String.valueOf(cliente.getTokenEmisor());
                instancias.setNitEmisor(nitEmisor);
                instancias.setTokenEmisor(tokenEmisor);
                }catch(Exception expt){
                  Logs.log("Error en la conexion con el servicor!");
                }
            if(estado != null) {
               if(showMsg){   
                  metodos.msgError(null,"Conexión Exitosa");
                }else{
                  Logs.log("Conexión Exitosa");
                }
            }else{
                if(showMsg){   
                  instancias.getSql().desbloquearConsecutivosfactura();
                  metodos.msgError(null,"Informamos que en este momento se está presentando intermitencia en el servicio, Por lo cual recomendamos detener la facturación.\n Comuníquese con la línea de servicio");
                }else{
                  Logs.log("Error en Factura al conectar con el servidor de ClickingPos!");
                }
               return false;
            }
        }
      
        facturacionElectronica facturacion = new facturacionElectronica(instancias.getNitEmisor(), instancias.getTokenEmisor());

        try {
              String numeroFacturaRenvioLocal="0"; 
              if(!getNumeroFacturaRenvio().equals("")){
                numeroFacturaRenvioLocal=getNumeroIdFacturaRenvio();
                if(numeroFacturaRenvioLocal.equals("")){
                 numeroFacturaRenvioLocal="0";
                }
              }
              boolean estadoFactura = facturacion.consumirServicioApiClickingPos(adquiriente.toString(),showMsg,instancias.getNitEmisor(),dsNumeroFactura,numeroFacturaRenvioLocal);
              setRespuesta(facturacion.getRespuesta());
              return estadoFactura;
//            return facturacion.consumirServicio(adquiriente.toString(), showMsg);
        } catch (Exception ex) {  
            Logs.log("consumirServicioApiClickingPos "+ex.getMessage());
            setRespuesta(facturacion.getRespuesta());
            
            return false;
        }
    }

    public <T> T deepCopy(T object, Class<T> type) {
        try {
            Gson gson = new Gson();
            return gson.fromJson(gson.toJson(object, type), type);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    private String formatVal(Object numero) {
        df.setRoundingMode(RoundingMode.DOWN);
        String dato = df.format(numero).replace(",", ".");
        if(dato.equals(".00")){
           return "0.00";
        }else{
           return dato;
        }
    }

    private String formatVal(double numero) {
        df.setRoundingMode(RoundingMode.DOWN);
        String dato = df.format(numero).replace(",", ".");
        if(dato.equals(".00")){
           return "0.00";
        }else{
           return dato;
        }
    }

    public static void main(String[] args) {
        double num1 = 605.0445673456;
        double num2 = 1447.6197996786;

        BigDecimal big1 = big.truncateDecimal2(num1, 2);
        BigDecimal big2 = big.truncateDecimal2(num2, 2);
        double suma = big.redondearDecimales((big1.doubleValue()+big2.doubleValue()),2);
               
 
    }
    
   public void cambiarPrecio(int fila,String precio){
     tblProductos.setValueAt(big.setMoneda(big.getBigDecimal(precio)), fila, 2);
   }
   
   /*
     funcion para envio de json a facturacion Pos sin validacion de errores
   */
   private JsonObject jsonFacturacion(String factura, String factura2){
         
        JsonObject adquiriente = new JsonObject();
        JsonObject errorJson = new JsonObject();
        ndTercero nodoTerc = instancias.getSql().getDatosTercero(txtIdSistema.getText());
        Object[][] paises = instancias.getSql().getPais(nodoTerc.getPais());
        String dsPrefijo = "";
//        if (null == tblComprobantes.getValueAt(fila, 8)) {
//            dsPrefijo = "";
//        } else {
            dsPrefijo ="XXXXXXXXXX";// tblComprobantes.getValueAt(fila, 8).toString();
//        }

        String dsNumeroFactura = factura.replaceAll("FACT", "");
        dsNumeroFactura = dsNumeroFactura.replaceAll("-", "");
     try{
        String fechaEmision = metodos.fecha4(metodosGenerales.fecha()) + " " + metodosGenerales.fechaHora().split(" ")[1];
        String fechaVencimiento = metodos.fecha4(txtVencimiento.getText());
        String emailAdquiriente = nodoTerc.getEmail();
        String tipoIdentificacionAdquiriente = getTipoDocumentoEquivalente(nodoTerc.getTipo());

        String identificacionAdquiriente = nodoTerc.getId();
        String codigoPostalAdquirente = nodoTerc.getCategoria();
        String tipoPersonaAdquiriente = "NATURAL";
        if (nodoTerc.getNaturaleza() != null) {
            if (nodoTerc.getNaturaleza().equals("Persona juridica")) {
                tipoPersonaAdquiriente = "JURIDICA";
            }
        }

        String tipoIdent = "", nombresAdquiriente = "";
        if (null != nodoTerc.getTipo()) {
            tipoIdent = nodoTerc.getTipo();
        }

        if (tipoIdent.equals("Nit") || tipoIdent.equals("NIT de otro país")) {
            nombresAdquiriente = nodoTerc.getNombre();
        } else {
            nombresAdquiriente = nodoTerc.getpNombre();
        }

        
        String moneda = "COP";
        String descripcionMoneda = "";
        JsonObject monedaCambio = new JsonObject();
        if(nodoTerc.getCodigoMoneda()!= null){
            if(nodoTerc.getCodigoMoneda()!= ""){
              moneda = nodoTerc.getCodigoMoneda();
              if(moneda.equals("USD")){
               descripcionMoneda = "DÓLARES";
               monedaCambio.addProperty("fechaTipoCambio", getFechaMoneda());
               monedaCambio.addProperty("valorTipoCambio", getTrmMoneda());
              } 
             }
        }
        
        String segundoNombre = nodoTerc.getsNombre();
        String primerApellido = nodoTerc.getpApellido();
        String segundoApellido = nodoTerc.getsApellido();
        
        String direccionAdquiriente = nodoTerc.getDireccion();
        Boolean adquirenteResponsable = nodoTerc.isResponsableIva();
        String regimenAdquirente = "NO_RESPONSABLE_IVA";
        if (adquirenteResponsable) {
            regimenAdquirente = "RESPONSABLE_IVA";
        }

        String telefonoAdquiriente = nodoTerc.getTelefono();
        String cdIso ="CO";
        try{
         cdIso = paises[0][2].toString(); //;
        }catch(Exception exp){
        }
        String pais = nodoTerc.getPais();
        String ciudad = nodoTerc.getCiudad().equals("")?"MEDELLÍN":nodoTerc.getCiudad();
        String departamento = nodoTerc.getDepartamento().equals("")?"Antioquia":nodoTerc.getDepartamento();
        String cdDaneDepartamento = "";
        String cdDaneCiudad = "";
        try {
            Object[][] codigo = instancias.getSql().getCodigoLugar(departamento, ciudad);
            cdDaneDepartamento = codigo[0][0].toString();
            cdDaneCiudad = codigo[0][1].toString();
        } catch (Exception e) {
           cdDaneDepartamento = "001";
           cdDaneCiudad = "MEDELLÍN"; 
        }

        String snDistribucionFisica = "N";
        String tipoDocumentoElectronico = "VENTA";

        String rtf = cmbRtf.getSelectedItem().toString();
        if (rtf.equals("RtF")) {
            rtf = "0.00";
        }
        double dsPorcentajeReteFuente = big.getMonedaToDouble(rtf);

        int cargoTotal = 0, anticipoTotal = 0;

        String tipoOperacion = cmbTipoOperacion.getSelectedItem().toString();
        String dsResolucionDian = "XXXXXXXXXX";//tblComprobantes.getValueAt(fila, 3).toString();
        String versionDian = "2";

       // String[] responsabilidades = datos[113].toString().split(", ");
        String[] responsabilidades = {"R-99-PN /No responsable"};
        String responsabilidadesFiscales = "";
        for (int i = 0; i < responsabilidades.length; i++) {
            responsabilidadesFiscales = responsabilidadesFiscales + responsabilidades[i].split(" /")[0] + ";";
        }

        if (!responsabilidadesFiscales.equals("")) {
            responsabilidadesFiscales = responsabilidadesFiscales.substring(0, responsabilidadesFiscales.length() - 1);
        }

        //ESTOS SON LOS METODOS DE PAGO
        String minutos = metodosGenerales.hora().split(":")[0], segundos = metodosGenerales.hora().split(":")[1];
        if (minutos.length() == 1) {
            minutos = "0" + minutos;
        }

        if (segundos.length() == 1) {
            segundos = "0" + segundos;
        }

        Object[] metodosPagos = new Object[4];
        if (!txtFechaFactura.getText().equals(txtVencimiento.getText())) {
            metodosPagos[0] = "CREDITO";
            metodosPagos[1] = "CREDITO_ACH";
            metodosPagos[2] = fechaVencimiento + " " + minutos + ":" + segundos + ":00";
            metodosPagos[3] = "";
        } else {
            if (instancias.getEfectivoDevuelta().compareTo(BigDecimal.ZERO) > 0) {
                metodosPagos[0] = "CONTADO";
                metodosPagos[1] = "EFECTIVO";
                metodosPagos[2] = fechaVencimiento + " " + minutos + ":" + segundos + ":00";
                metodosPagos[3] = instancias.getSql().getIDPago(factura2, "EFECTIVO");
            } else if (instancias.getChequeDevuelta().compareTo(BigDecimal.ZERO) > 0 && instancias.getEfectivoDevuelta().compareTo(BigDecimal.ZERO) == 0) {
                metodosPagos[0] = "CONTADO";
                metodosPagos[1] = "CHEQUE";
                metodosPagos[2] = fechaVencimiento + " " + minutos + ":" + segundos + ":00";
                metodosPagos[3] = instancias.getSql().getIDPago(factura2, "CHEQUE");
            } else if (instancias.getTarjetaCredito().compareTo(BigDecimal.ZERO) > 0 && instancias.getEfectivoDevuelta().compareTo(BigDecimal.ZERO) == 0) {
                metodosPagos[0] = "CONTADO";
                metodosPagos[1] = "TARJETA_CREDITO";
                metodosPagos[2] = fechaVencimiento + " " + minutos + ":" + segundos + ":00";
                metodosPagos[3] = instancias.getSql().getIDPago(factura2, "TARJETA_CREDITO");
            } else if (instancias.getTarjetaDevuelta().compareTo(BigDecimal.ZERO) > 0 && instancias.getEfectivoDevuelta().compareTo(BigDecimal.ZERO) == 0) {
                metodosPagos[0] = "CONTADO";
                metodosPagos[1] = "TARJETA_DEBITO";
                metodosPagos[2] = fechaVencimiento + " " + minutos + ":" + segundos + ":00";
                metodosPagos[3] = instancias.getSql().getIDPago(factura2, "TARJETA_DEBITO");
            }
        }
        //FIN METODOS DE PAGO

        int contadorIvas = 0, contadorImpos = 0;
        Object[][] arregloImpuestosIva = new Object[tblProductos.getRowCount()][3];
        Object[][] arregloImpuestosImpo = new Object[tblProductos.getRowCount()][3];

        for (int i = 0; i < tblProductos.getRowCount(); i++) {
            int posicionImpuestoIva = 0, posicionImpuestoImpo = 0;
            Boolean impuestoExistenteIva = false, impuestoExistenteImpo = false;

            for (int j = 0; j < arregloImpuestosIva.length; j++) {
                if (arregloImpuestosIva[j][0] != null) {
                    if (arregloImpuestosIva[j][0].equals(tblProductos.getValueAt(i, 7))) {
                        posicionImpuestoIva = j;
                        impuestoExistenteIva = true;
                    }
                }
            }

            for (int j = 0; j < arregloImpuestosImpo.length; j++) {
                if (arregloImpuestosImpo[j][0] != null) {
                    if (arregloImpuestosImpo[j][0].equals(tblProductos.getValueAt(i, 23))) {
                        posicionImpuestoImpo = j;
                        impuestoExistenteImpo = true;
                    }
                }
            }

            if (impuestoExistenteIva) {
                if (big.getMonedaToDouble(tblProductos.getValueAt(i, 7).toString()) > 0) {
                    arregloImpuestosIva[posicionImpuestoIva][1] = big.formatDouble(((double) arregloImpuestosIva[posicionImpuestoIva][1])) + big.getMonedaToDouble(tblProductos.getValueAt(i, 4).toString());
                    arregloImpuestosIva[posicionImpuestoIva][2] = big.formatDouble(((double) arregloImpuestosIva[posicionImpuestoIva][2])) + big.getMonedaToDouble(tblProductos.getValueAt(i, 33).toString());
                }
            } else {
                if (big.getMonedaToDouble(tblProductos.getValueAt(i, 7).toString()) > 0) {
                    arregloImpuestosIva[contadorIvas][0] = big.formatDouble(tblProductos.getValueAt(i, 7).toString());
                    arregloImpuestosIva[contadorIvas][1] = big.getMonedaToDouble(tblProductos.getValueAt(i, 4).toString());
                    arregloImpuestosIva[contadorIvas][2] = big.getMonedaToDouble(tblProductos.getValueAt(i, 33).toString());
                    contadorIvas = contadorIvas + 1;
                }
            }

            if (impuestoExistenteImpo) {
                if (big.getMonedaToDouble(tblProductos.getValueAt(i, 23).toString()) > 0) {
                    arregloImpuestosImpo[posicionImpuestoImpo][1] = big.formatDouble(((double) arregloImpuestosImpo[posicionImpuestoImpo][1]) + big.getMonedaToDouble(tblProductos.getValueAt(i, 4).toString()));
                    arregloImpuestosImpo[posicionImpuestoImpo][2] = big.formatDouble(((double) arregloImpuestosImpo[posicionImpuestoImpo][1]) + big.getMonedaToDouble(tblProductos.getValueAt(i, 8).toString()));
                }
            } else {
                if (big.getMonedaToDouble(tblProductos.getValueAt(i, 23).toString()) > 0) {
                    arregloImpuestosImpo[contadorImpos][0] = big.formatDouble(tblProductos.getValueAt(i, 23).toString());
                    arregloImpuestosImpo[contadorImpos][1] = big.getMonedaToDouble(tblProductos.getValueAt(i, 4).toString());
                    arregloImpuestosImpo[contadorImpos][2] = big.getMonedaToDouble(tblProductos.getValueAt(i, 8).toString());
                    contadorImpos = contadorImpos + 1;
                }
            }
        }

        double totalIvas = 0.0;
        for (int i = 0; i < contadorIvas; i++) {
            totalIvas = big.sumaExacta(totalIvas , (double) arregloImpuestosIva[i][2]);
        }

        double totalImpos = 0.0;
        for (int i = 0; i < contadorImpos; i++) {
            totalImpos = big.sumaExacta(((double) arregloImpuestosImpo[i][2]), totalImpos);
        }

        //se crea el json 
         
        adquiriente.addProperty("tipoFactura", 1);
        adquiriente.addProperty("dsPrefijo", dsPrefijo);
        adquiriente.addProperty("dsNumeroFactura", dsNumeroFactura);
        String turno = txtTurno.getText().trim();
        if(turno!=""){
         adquiriente.addProperty("OrdenReference", turno);
         JsonObject numero = new JsonObject();
         numero.addProperty("numero", turno);
         adquiriente.add("ordenCompra", numero);
        }
        adquiriente.addProperty("fechaEmision", fechaEmision);
        adquiriente.addProperty("fechaVencimiento", fechaVencimiento);
        adquiriente.addProperty("emailAdquiriente", emailAdquiriente);
        adquiriente.addProperty("tipoIdentificacionAdquiriente", tipoIdentificacionAdquiriente.equals("")?"CEDULA_CIUDADANIA":tipoIdentificacionAdquiriente);
        adquiriente.addProperty("identificacionAdquiriente", identificacionAdquiriente.trim().equals("")?"XXXXXXX":identificacionAdquiriente.replace(" ","").replace(".","").trim());
        if (nodoTerc.getId().contains("-")) {
            String digitoVerificacionAdquirente = nodoTerc.getId().split("-")[1];
            adquiriente.addProperty("digitoVerificacionAdquirente", digitoVerificacionAdquirente.trim());
        }
        adquiriente.addProperty("codigoPostalAdquirente", codigoPostalAdquirente);
        adquiriente.addProperty("tipoPersonaAdquiriente", tipoPersonaAdquiriente);
        adquiriente.addProperty("nombresAdquiriente", nombresAdquiriente);
        adquiriente.addProperty("segundoNombre", segundoNombre);
        adquiriente.addProperty("primerApellido", primerApellido);
        adquiriente.addProperty("segundoApellido", segundoApellido);        
        adquiriente.addProperty("direccionAdquiriente", direccionAdquiriente);
        
        datos = instancias.getSql().getDatosMaestra();
        ndMaestra maestra = metodos.llenarMaestra(datos);
        if(maestra.isTieneSucursal()){
           adquiriente.addProperty("dsRazonComercial", maestra.getD1());
           adquiriente.addProperty("dsDireccionEmisor", maestra.getD6());
           adquiriente.addProperty("dsTelefonoEmisor", maestra.getD7());
           adquiriente.addProperty("dsEmailEmisor", maestra.getGmail());
           adquiriente.addProperty("cdTipoPlantilla", maestra.getNumeroSucursal());
        }
        
        adquiriente.addProperty("adquirenteResponsable", "" + adquirenteResponsable);
        adquiriente.addProperty("regimenAdquirente", regimenAdquirente);
        adquiriente.addProperty("telefonoAdquiriente", telefonoAdquiriente);

        adquiriente.addProperty("snDistribucionFisica", snDistribucionFisica);

        adquiriente.addProperty("dsObservacion", txtObservaciones.getText());
      
        adquiriente.addProperty("tipoDocumentoElectronico", tipoDocumentoElectronico);
//                if(Double.valueOf(dsPorcentajeReteFuente1) >0 ){
//                    adquiriente.addProperty("dsPorcentajeReteFuente",dsPorcentajeReteFuente1);
//                }
//                if(Double.valueOf(dsRetencionFuente1) >0 ){
//                    adquiriente.addProperty("dsRetencionFuente",dsRetencionFuente1);
//                }

        //adquiriente.addProperty("valorBaseImponible", valorBaseImponible1);
        adquiriente.addProperty("cargoTotal", formatVal(cargoTotal));
        adquiriente.addProperty("anticipoTotal", formatVal(anticipoTotal));
        adquiriente.addProperty("moneda", moneda);
        if(moneda.equals("USD")){
         adquiriente.add("tipoCambio", monedaCambio);
        }
        adquiriente.addProperty("tipoOperacion", tipoOperacion);
        adquiriente.addProperty("dsResolucionDian", dsResolucionDian);
        adquiriente.addProperty("versionDian", versionDian);
        adquiriente.addProperty("responsabilidadesFiscales", responsabilidadesFiscales);

        //se adiciona la ciudad
        JsonObject ciudadAdquiriente = new JsonObject();

        ciudadAdquiriente.addProperty("cdDane", cdDaneCiudad);
        ciudadAdquiriente.addProperty("dsNombre", ciudad);

        JsonObject departamentoAdquiriente = new JsonObject();
        departamentoAdquiriente.addProperty("cdDane", cdDaneDepartamento);
        departamentoAdquiriente.addProperty("dsNombre", departamento);

        departamentoAdquiriente.addProperty("cdIso", cdIso + "-" + departamento.substring(0, 3));

        JsonObject paisAdquiriente = new JsonObject();
        paisAdquiriente.addProperty("cdIso", cdIso);
        paisAdquiriente.addProperty("dsNombre", pais);

        departamentoAdquiriente.add("pais", paisAdquiriente);

        ciudadAdquiriente.add("departamento", departamentoAdquiriente);

        adquiriente.add("ciudadAdquiriente", ciudadAdquiriente);
        //fin adicion ciudad

        JsonObject pagoJson = new JsonObject();
        pagoJson.addProperty("formaPago", "" + metodosPagos[0]);
        pagoJson.addProperty("medioPago", "" + metodosPagos[1]);
        if (!txtFechaFactura.getText().equals(txtVencimiento.getText())) {
            pagoJson.addProperty("fechaVencimientoPago", "" + metodosPagos[2]);
        }

        Logs.log("adquiriente: " + adquiriente.toString());

        Logs.log("pago: " + pagoJson.toString());
        adquiriente.add("pago", pagoJson);

        JsonArray impuestosRetenciones = new JsonArray();
        if (contadorIvas > 0) {
            JsonObject impuestosRetencionesIva = new JsonObject();
            JsonArray arraySubTotalesIva = new JsonArray();

            impuestosRetencionesIva.addProperty("valorTotal", formatVal(totalIvas));
            impuestosRetencionesIva.add("subtotales", arraySubTotalesIva);
            
            for (int i = 0; i < contadorIvas; i++) {
                JsonObject subTotal = new JsonObject();
                subTotal.addProperty("valorBase", formatVal(arregloImpuestosIva[i][1]));
                subTotal.addProperty("valorImpuestoRetencion", formatVal(arregloImpuestosIva[i][2]));
                subTotal.addProperty("porcentaje", formatVal(arregloImpuestosIva[i][0]));
                subTotal.addProperty("tributo", "IVA");
                arraySubTotalesIva.add(subTotal);
            }
            impuestosRetenciones.add(impuestosRetencionesIva);
        }

        //Cadena del impoconsumo
        if (contadorImpos > 0) {
            JsonObject impuestosRetencionesInc = new JsonObject();
            JsonArray arraySubTotalesInc = new JsonArray();

            impuestosRetencionesInc.addProperty("valorTotal", formatVal(totalImpos));
            impuestosRetencionesInc.add("subtotales", arraySubTotalesInc);

            for (int i = 0; i < contadorImpos; i++) {
                JsonObject subTotal = new JsonObject();
                subTotal.addProperty("valorBase", formatVal(arregloImpuestosImpo[i][1]));
                subTotal.addProperty("valorImpuestoRetencion", formatVal(arregloImpuestosImpo[i][2]));
                subTotal.addProperty("porcentaje", formatVal(arregloImpuestosImpo[i][0]));
                subTotal.addProperty("tributo", "INC");
                arraySubTotalesInc.add(subTotal);
            }
            impuestosRetenciones.add(impuestosRetencionesInc);
        }

        if (big.getMonedaToDouble(txtRiva.getText()) > 0) {

            JsonObject impuestosRetencionesRteIva = new JsonObject();
            JsonArray arraySubTotalesRteIva = new JsonArray();

            impuestosRetencionesRteIva.addProperty("valorTotal", formatVal(totalImpos));
            impuestosRetencionesRteIva.add("subtotales", arraySubTotalesRteIva);
            JsonObject subTotal = new JsonObject();

            subTotal.addProperty("valorBase", formatVal(big.getMonedaToDouble(txtTotalIva.getText())));
            subTotal.addProperty("valorImpuestoRetencion", formatVal(big.getMonedaToDouble(txtRiva.getText())));
            subTotal.addProperty("porcentaje", "15.00");
            subTotal.addProperty("tributo", "RETE_IVA");
            arraySubTotalesRteIva.add(subTotal);
            impuestosRetenciones.add(impuestosRetencionesRteIva);
        }

        if (big.getMonedaToDouble(txtRtf.getText()) > 0) {
            JsonObject impuestosRetencionesRteFuente = new JsonObject();
            JsonArray arraySubTotalesRteFuente = new JsonArray();

            impuestosRetencionesRteFuente.addProperty("valorTotal", formatVal(big.getMonedaToDouble(txtRtf.getText())));
            impuestosRetencionesRteFuente.add("subtotales", arraySubTotalesRteFuente);
            JsonObject subTotal = new JsonObject();

            subTotal.addProperty("valorBase", "" + formatVal(big.getMonedaToDouble(txtSubTotal.getText())));
            subTotal.addProperty("valorImpuestoRetencion", formatVal(big.getMonedaToDouble(txtRtf.getText())));
            subTotal.addProperty("porcentaje", formatVal(dsPorcentajeReteFuente));
            subTotal.addProperty("tributo", "RETE_FUENTE");
            arraySubTotalesRteFuente.add(subTotal);
            impuestosRetenciones.add(impuestosRetencionesRteFuente);
        }

        JsonObject impuestosRetencionesImpBolsa = new JsonObject();
        JsonArray arraySubTotalesImpBolsa = new JsonArray();

        impuestosRetencionesImpBolsa.addProperty("valorTotal", formatVal(totalImpos));
        impuestosRetencionesImpBolsa.add("subtotales", arraySubTotalesImpBolsa);

        Logs.log("impuestosRetenciones: " + impuestosRetenciones.toString());

        if (impuestosRetenciones.size() > 0) {
            adquiriente.add("impuestosRetenciones", impuestosRetenciones);
        }

        double valorBaseImponible = 0.00;
        Object[][] detalladoProductos = new Object[tblProductos.getRowCount()][20];

        double valorBrutoTotal = 0.0;
        //codigoVendedor
        String codigoVendedor = "TERC-00000001";
        if(!cmbVendedor.getSelectedItem().toString().trim().equals("")){
          codigoVendedor = instancias.getSql().getIdEmpleado(cmbVendedor.getSelectedItem().toString());
        }
        
        for (int i = 0; i < tblProductos.getRowCount(); i++) {
            //se valida el impuesto a la bolsa
            if (tblProductos.getValueAt(i, 0).equals("IMP01")) {
                JsonObject subTotal = new JsonObject();

                double totalBolsas = big.getMonedaToDouble(tblProductos.getValueAt(i, 2).toString());

                subTotal.addProperty("valorBase", formatVal(totalBolsas));
                subTotal.addProperty("valorImpuestoRetencion", formatVal(big.getMonedaToDouble(txtImpuesto.getText())));
                subTotal.addProperty("porcentaje", "0.00");
                subTotal.addProperty("tributo", "BOLSAS");
                subTotal.addProperty("unidadMedida", tblProductos.getValueAt(i, 36).toString());
                subTotal.addProperty("valorUnitario", formatVal(totalBolsas));
                arraySubTotalesImpBolsa.add(subTotal);
            }
            
            //numeroFactura
//            detalladoProductos[i][0] = factura.replace("FACT-", "");
            detalladoProductos[i][0] = dsNumeroFactura;

            //codigoArticulo
            detalladoProductos[i][1] = tblProductos.getValueAt(i, 0);

            //estandarProducto
            String estandar = tblProductos.getValueAt(i, 35).toString();
            if (estandar.equals("Código Estándar de Productos y Servicios de Naciones Unidas")) {
                estandar = "UNSPSC";
            } else if (estandar.equals("Números Globales de Identificación de Productos")) {
                estandar = "GTIN";
            } else if (estandar.equals("Partida Arancelaria")) {
                estandar = "PARTIDA_ARANCELARIA";
            } else if (estandar.equals("Estándar de adopción del contribuyente")) {
                estandar = "ESTANDAR_CONTRIBUYENTE";
            }
            detalladoProductos[i][2] = estandar;

            //descripcionArticulo
            detalladoProductos[i][3] = tblProductos.getValueAt(i, 1);

            //porcentajeIva
            double porcIva = big.getMonedaToDouble(tblProductos.getValueAt(i, 7).toString());
            detalladoProductos[i][4] = porcIva;

            //porcentajeIca
            detalladoProductos[i][5] = "0.00";

            //porcentajeConsumo
            double porcImpo = big.getMonedaToDouble(tblProductos.getValueAt(i, 23).toString());
            detalladoProductos[i][6] = porcImpo;

            //cantidad
            double cantidad = big.getMonedaToDouble(tblProductos.getValueAt(i, 3).toString());
            detalladoProductos[i][7] = cantidad;

            //precioUnitario
            double precioUnitario = 0;
            
            if (instancias.isPvpConIva() || instancias.isPvpConImpoconsumo()) {
                precioUnitario = big.getMonedaToDouble(tblProductos.getValueAt(i, 9).toString()) / big.getMonedaToDouble(tblProductos.getValueAt(i, 3).toString());
            }else{
                //antes de modificar
                precioUnitario = big.getMonedaToDouble(tblProductos.getValueAt(i, 2).toString());
            }
            detalladoProductos[i][8] = precioUnitario;

            //valorTotalArticulo
            double valorTotalArticulo = big.getMonedaToDouble(tblProductos.getValueAt(i, 9).toString()) / big.getMonedaToDouble(tblProductos.getValueAt(i, 3).toString());

            detalladoProductos[i][9] = valorTotalArticulo;

            //valorIva
            double valorIva = big.getMonedaToDouble(tblProductos.getValueAt(i, 33).toString());
            detalladoProductos[i][10] = valorIva;

            //valorImpo
            double valorImpo = big.getMonedaToDouble(tblProductos.getValueAt(i, 8).toString());
            detalladoProductos[i][11] = valorImpo;

            //unidadMedida
            detalladoProductos[i][12] = tblProductos.getValueAt(i, 36).toString();

            
            //valorTotalBruto
            double valorDescuento = big.getMonedaToDouble(tblProductos.getValueAt(i, 6).toString());
            double valorTotalBruto = big.getMonedaToDouble(tblProductos.getValueAt(i, 4).toString());
           //valorTotalBruto = valorTotalBruto + valorDescuento; se reemplaza porque no redondeba correctamente
            valorTotalBruto = big.formatDouble(valorTotalBruto + valorDescuento);
            valorBrutoTotal = big.formatDouble(valorBrutoTotal + valorTotalBruto);
            detalladoProductos[i][13] = valorTotalBruto;

            //unidadesEmpaque
            detalladoProductos[i][14] = big.getMonedaToDouble(tblProductos.getValueAt(i, 13).toString()) / big.getMonedaToDouble(tblProductos.getValueAt(i, 3).toString());

            //valorTotalImpuestosRetenciones
            double valorTotalImpuestosRetenciones = big.getMonedaToDouble(tblProductos.getValueAt(i, 8).toString())
                    + big.getMonedaToDouble(tblProductos.getValueAt(i, 33).toString());

            detalladoProductos[i][17] = valorTotalImpuestosRetenciones;

//            //codigoVendedor
//            String codigoVendedor = "TERC-00000001";
//            if(!cmbVendedor.getSelectedItem().toString().trim().equals("")){
//              codigoVendedor = instancias.getSql().getIdEmpleado(cmbVendedor.getSelectedItem().toString());
//            }
            
            detalladoProductos[i][18] = codigoVendedor;

            //detalle Producto
            detalladoProductos[i][19] = tblProductos.getValueAt(i, 27);

            detalladoProductos[i][19] = tblProductos.getValueAt(i, 27);

        }

        if (arraySubTotalesImpBolsa.size() > 0) {
            impuestosRetenciones.add(impuestosRetencionesImpBolsa);
        }

        JsonArray arrayDetalles = new JsonArray(); 
        double valorDecuentoTotalDouble  = 0.0; 
        double valorDescuento = 0.0;
        double valorRtf = 0.0;
        JsonArray arraydescuentosGeneral = new JsonArray();
        for (int i = 0; i < tblProductos.getRowCount(); i++) {

            JsonObject detalle = new JsonObject();
            detalle.addProperty("numeroFactura", "" + detalladoProductos[i][0]);
            detalle.addProperty("codigoArticulo", "" + detalladoProductos[i][1]);
            //detalle.addProperty("estandarProducto", ""+ detalladoProductos[i][2]);
            detalle.addProperty("descripcionArticulo", "" + detalladoProductos[i][3]);
            detalle.addProperty("cantidad", formatVal(big.getBigDecimal(detalladoProductos[i][7])));
            detalle.addProperty("precioUnitario", formatVal(detalladoProductos[i][8]));
            detalle.addProperty("valorTotalArticulo", formatVal(detalladoProductos[i][9]));
            detalle.addProperty("unidadMedida", "" + detalladoProductos[i][12]);
            detalle.addProperty("valorTotalBruto", formatVal(detalladoProductos[i][13]));
            detalle.addProperty("valorTotalImpuestosRetenciones", formatVal(Double.valueOf(detalladoProductos[i][17].toString()) + big.getMonedaToDouble(txtRtf.getText())));
            
            if (big.getBigDecimal(tblProductos.getValueAt(i, 5).toString().replace(",", ".")).compareTo(big.getBigDecimal("0")) > 0) {
                Logs.error("ENTRO POR DESCUENTOS ");
                JsonArray cargosDescuentos = new JsonArray();
                boolean descuentoExiste = false;
                JsonObject descuento = new JsonObject();
                descuento.addProperty("tipo", "" + false);
               try{
                descuento.addProperty("codigoDescuento", "DESCUENTO_NO_CONDICIONADO");          
                descuento.addProperty("razon", "" + tblProductos.getValueAt(i, 31).toString().split("///")[1]);
                descuento.addProperty("porcentaje", formatVal(big.formatDouble(tblProductos.getValueAt(i, 5).toString().replace(",", "."))));
               }catch(Exception exp){
                  descuento.addProperty("codigoDescuento", "DESCUENTO_NO_CONDICIONADO");          
                  descuento.addProperty("razon", "DESCUENTO XXXXXX");
                  descuento.addProperty("porcentaje", "0");
               }
                double valorDesc = big.getMonedaToDouble(tblProductos.getValueAt(i, 6).toString());
                valorDescuento = valorDescuento + valorDesc;
                descuento.addProperty("valor", formatVal(valorDesc));
                descuento.addProperty("valorBase", formatVal(big.formatDouble(big.getMonedaToDouble(tblProductos.getValueAt(i, 4).toString().replace(".", ""))+ valorDesc )));
                BigDecimal valorDesDestalle  = new BigDecimal(formatVal(big.formatDouble(big.getMonedaToDouble(tblProductos.getValueAt(i, 4).toString().replace(".", ""))+ valorDesc )));
                valorDecuentoTotalDouble  = valorDecuentoTotalDouble +  Double.parseDouble(valorDesDestalle+"");
                   
                cargosDescuentos.add(descuento);
                
                JsonObject descuentoTmp = null;
                for (JsonElement cargosDescuento : arraydescuentosGeneral) {
                    descuentoTmp = cargosDescuento.getAsJsonObject();
                    String codigoDescuento = tblProductos.getValueAt(i, 31).toString().split("///")[0];
                    if (descuentoTmp != null && descuentoTmp.get("codigoDescuento").getAsString().equalsIgnoreCase(codigoDescuento) && descuentoTmp.get("porcentaje").getAsString().equalsIgnoreCase(descuento.get("porcentaje").getAsString())) {
                        valorDesc = descuentoTmp.get("valor").getAsDouble() + valorDesc;
                        descuentoTmp.addProperty("valor",formatVal(big.formatDouble(valorDesc+"")));                                             
                        descuentoTmp.addProperty("valorBase", formatVal(valorDecuentoTotalDouble));
                        descuentoExiste = true;
                    }
                }
                if (!descuentoExiste) {
                    descuentoTmp = deepCopy(descuento.getAsJsonObject(), JsonObject.class);
                    arraydescuentosGeneral.add(descuentoTmp);
                }
                detalle.add("cargosDescuentos", cargosDescuentos);

            }

            JsonArray impuestosRetencionesProducto = new JsonArray();
            boolean baseSumada = false;
            if (detalladoProductos[i][1].toString().equals("IMP01")) {
                JsonObject impuestoRetencionBolsa = new JsonObject();
                JsonArray subTotales = new JsonArray();

                impuestoRetencionBolsa.addProperty("valorTotal", formatVal(big.getMonedaToDouble(txtImpuesto.getText())));
                impuestoRetencionBolsa.add("subtotales", subTotales);
                JsonObject subTotal = new JsonObject();

                subTotal.addProperty("valorBase", formatVal(detalladoProductos[i][8]));
                subTotal.addProperty("valorImpuestoRetencion", formatVal(big.getMonedaToDouble(datos[53].toString())));
                subTotal.addProperty("porcentaje", "0.00");
                subTotal.addProperty("tributo", "BOLSAS");
                subTotal.addProperty("unidadMedida", "" + detalladoProductos[i][12]);
                subTotal.addProperty("valorUnitario", formatVal(detalladoProductos[i][8]));

                subTotales.add(subTotal);
                impuestosRetencionesProducto.add(impuestoRetencionBolsa);
            }

            double baseImponibleProducto = big.getMonedaToDouble(tblProductos.getValueAt(i, 4).toString());

            if (cmbRtf.getSelectedIndex() > 0) {
                
                JsonObject impuestoRetencionRtf = new JsonObject();
                JsonArray subTotalesRtf = new JsonArray();

                impuestoRetencionRtf.addProperty("valorTotal", formatVal(baseImponibleProducto * (big.getMonedaToDouble(cmbRtf.getSelectedItem().toString()) / 100)));
                impuestoRetencionRtf.add("subtotales", subTotalesRtf);
                JsonObject subTotalRtf = new JsonObject();
                double VlrRtf = baseImponibleProducto * (big.getMonedaToDouble(cmbRtf.getSelectedItem().toString()) / 100);
                valorRtf = valorRtf + VlrRtf;
                subTotalRtf.addProperty("valorBase", formatVal(baseImponibleProducto));
                subTotalRtf.addProperty("valorImpuestoRetencion", formatVal(VlrRtf));
                subTotalRtf.addProperty("porcentaje", formatVal(big.getMonedaToDouble(cmbRtf.getSelectedItem().toString())));
                subTotalRtf.addProperty("tributo", "RETE_FUENTE");

                subTotalesRtf.add(subTotalRtf);
                impuestosRetencionesProducto.add(impuestoRetencionRtf);
            }

            if (big.getMonedaToDouble(tblProductos.getValueAt(i, 33).toString()) > 0) {
                JsonObject impuestoRetencionIva = new JsonObject();
                JsonArray subTotalesIva = new JsonArray();

                impuestoRetencionIva.addProperty("valorTotal", formatVal(detalladoProductos[i][10]));
                impuestoRetencionIva.add("subtotales", subTotalesIva);
                JsonObject subTotalIva = new JsonObject();

                subTotalIva.addProperty("valorBase", formatVal(baseImponibleProducto));
                subTotalIva.addProperty("valorImpuestoRetencion", formatVal(detalladoProductos[i][10]));
                subTotalIva.addProperty("porcentaje", formatVal(big.formatDouble(tblProductos.getValueAt(i, 7).toString())));
                subTotalIva.addProperty("tributo", "IVA");

                subTotalesIva.add(subTotalIva);
                impuestosRetencionesProducto.add(impuestoRetencionIva);
                valorBaseImponible = big.formatDouble(valorBaseImponible + baseImponibleProducto);
                baseSumada = true;
           }

            if (big.getMonedaToDouble(tblProductos.getValueAt(i, 8).toString()) > 0) {
                JsonObject impuestoRetencionInc = new JsonObject();
                JsonArray subTotalesInc = new JsonArray();

                double valorImpo = (double) detalladoProductos[i][11];
                impuestoRetencionInc.addProperty("valorTotal", formatVal(valorImpo));
                impuestoRetencionInc.add("subtotales", subTotalesInc);
                JsonObject subTotalInc = new JsonObject();

                subTotalInc.addProperty("valorBase", formatVal(baseImponibleProducto));
                subTotalInc.addProperty("valorImpuestoRetencion", formatVal(detalladoProductos[i][11]));
                subTotalInc.addProperty("porcentaje", formatVal(big.formatDouble(tblProductos.getValueAt(i, 23).toString())));
                subTotalInc.addProperty("tributo", "INC");

                subTotalesInc.add(subTotalInc);
                impuestosRetencionesProducto.add(impuestoRetencionInc);
                if(!baseSumada){
                    valorBaseImponible = big.formatDouble(valorBaseImponible + baseImponibleProducto);
                }
            }
            if (impuestosRetencionesProducto.size() > 0) {
                detalle.add("impuestosRetenciones", impuestosRetencionesProducto);
               
            }
            arrayDetalles.add(detalle);
        }

        if(valorBaseImponible>0){
             adquiriente.addProperty("valorBaseImponible", formatVal(valorBaseImponible));
        }else{
            adquiriente.addProperty("valorBaseImponible", "0.00");
        }
        Logs.log("arrayDetalles: " + arrayDetalles.toString());
        adquiriente.add("detalles", arrayDetalles);

        if (valorDescuento > 0) {
            Logs.log("arraydescuentos: " + arraydescuentosGeneral.toString());
            adquiriente.add("cargosDescuentos", arraydescuentosGeneral);
        }

        double valorBrutoMasTributos = big.formatDouble(valorBrutoTotal + totalIvas + totalImpos);
        double varloNeto = big.formatDouble((valorBrutoTotal + totalIvas + totalImpos) - valorDescuento);

        adquiriente.addProperty("valorBruto", formatVal(valorBrutoTotal));
        adquiriente.addProperty("valorNeto", formatVal(varloNeto));
        adquiriente.addProperty("valorBrutoMasTributos", formatVal(valorBrutoMasTributos));
        adquiriente.addProperty("descuentoTotal", formatVal(big.formatDouble(valorDescuento+"")));//SE DEBE APROXIMAR
        convertirNumeroALetras convertirNumeroALetras = new convertirNumeroALetras();
        if(!descripcionMoneda.equals("")){
              
         adquiriente.addProperty("valorEnLetras", convertirNumeroALetras.Convertir(formatVal(varloNeto),descripcionMoneda));
        }else{
            
         adquiriente.addProperty("valorEnLetras", convertirNumeroALetras.Convertir(formatVal(varloNeto)));
        }
        adquiriente.addProperty("customTotalUnidades", txtCantUnidades.getText());
        
        if(valorRtf>0){
            adquiriente.addProperty("dsObservacion", txtObservaciones.getText()+ " Para realizar su pago, debe aplicar retención del "+cmbRtf.getSelectedItem().toString()+"%, equivalente a "+big.setMoneda(valorRtf)); 
        }else{
            adquiriente.addProperty("dsObservacion", txtObservaciones.getText());
        }        
 
        if (Utils.quitarEtiquetas(instancias.getLegal()).isEmpty()) {
            adquiriente.addProperty("customNumeroCuenta", "");
        } else {
            adquiriente.addProperty("customNumeroCuenta", Utils.quitarEtiquetas(instancias.getLegal()));
        }

    }catch(Exception exp){
//        if(showMsg){
//          metodos.msgError(null,"Ocurrio un error al formatear el Json - Mensaje: "+exp.getMessage()+" - Causa: "+exp.getCause());
//        }
        Logs.log("Error al formatear Json: "+exp.getMessage()+" - Causa: "+exp.getCause());
        errorJson.addProperty("mesajeError", "Ocurrio un error al formatear el Json - Mensaje: "+exp.getMessage()+" - Causa: "+exp.getCause());
        return errorJson;
         
    }
     return adquiriente;
 }
 
}