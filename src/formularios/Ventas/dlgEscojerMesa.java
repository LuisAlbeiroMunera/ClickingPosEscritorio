package formularios.Ventas;

import clases.IconCellRenderer;
import clases.IconCellRendererConColor;
import clases.Instancias;
import clases.big;
import clases.metodosGenerales;
import java.awt.Image;
import java.math.BigDecimal;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;

public class dlgEscojerMesa extends javax.swing.JDialog {

    metodosGenerales metodos = new metodosGenerales();
    private Instancias instancias;
    private String terminal;
    Object[] datos;
    String facturaGeneral = "";

    public dlgEscojerMesa(java.awt.Frame parent, boolean modal, String factura) {
        super(parent, modal);
        initComponents();
        instancias = Instancias.getInstancias();

        facturaGeneral = factura;

        this.setLocationRelativeTo(null);
        tblMesas.setDefaultRenderer(Object.class, new IconCellRendererConColor());

        datos = instancias.getSql().getDatosMaestra();

        cargarColumna();
        cargarFila();
        cargarRegistrosMesas();
        cargarRegistros();
//        cargarEspacios();
//        cargarRegistros();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblMesa = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        tblMesas = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cambiar mesa");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        lblMesa.setFont(new java.awt.Font("Century Gothic", 1, 36)); // NOI18N
        lblMesa.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMesa.setText("ESCOJA LA NUEVA MESA");

        tblMesas.setBackground(new java.awt.Color(255, 0, 0));
        tblMesas.setFont(new java.awt.Font("Century Gothic", 1, 20)); // NOI18N
        tblMesas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMesas.setRowHeight(100);
        tblMesas.setSelectionBackground(new java.awt.Color(255, 255, 255));
        tblMesas.setSelectionForeground(new java.awt.Color(204, 204, 204));
        tblMesas.getTableHeader().setResizingAllowed(false);
        tblMesas.getTableHeader().setReorderingAllowed(false);
        tblMesas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMesasMouseClicked(evt);
            }
        });
        jScrollPane11.setViewportView(tblMesas);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane11)
                    .addComponent(lblMesa, javax.swing.GroupLayout.DEFAULT_SIZE, 1175, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(lblMesa)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblMesasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMesasMouseClicked
        if (evt.getClickCount() > 1) {

            String valor = "";

            if (tblMesas.getSelectedRow() % 2 == 0) {
                valor = tblMesas.getValueAt(tblMesas.getSelectedRow() + 1, tblMesas.getSelectedColumn()).toString();
            } else {
                valor = tblMesas.getValueAt(tblMesas.getSelectedRow(), tblMesas.getSelectedColumn()).toString();
            }

            String tipo = "MESA";
            String mesa = "";

            Object[] cadenas = valor.split(",");
            for (int i = 0; i < cadenas.length; i++) {
                if (cadenas[i].toString().contains("text=M")) {
                    mesa = cadenas[i].toString().replace("text=", "");
                }
            }

            if (mesa.equals("OCUPADO")) {
                metodos.msgError(null, "¡Mesa ocupada!");
                return;
            } else if (mesa.length() > 1) {
                instancias.getSql().cambiarMesa(facturaGeneral, mesa);
                instancias.getMesa1().setCambioMesa(true);
                metodos.msgExito(null, "¡Mesa cambiada correctamente!");
                this.dispose();
            } else if (valor.equals("")) {
                metodos.msgError(null, "¡Seleccione una mesa válida!");
                return;
            }
        }
    }//GEN-LAST:event_tblMesasMouseClicked

    public void cargarRegistros() {

        Object[][] congeladas = instancias.getSql().getDatosCongelada();

        if (congeladas.length > 0) {

            Icon icono = null;
            ImageIcon fot = new ImageIcon(getClass().getResource("/imagenes/MESA_ROJA.png"));
            icono = new ImageIcon(fot.getImage().getScaledInstance(125, 125, Image.SCALE_DEFAULT));

            for (int i = 0; i < congeladas.length; i++) {

                String lugar = congeladas[i][3].toString();

                for (int k = 0; k < tblMesas.getRowCount(); k++) {
                    for (int s = 0; s < tblMesas.getColumnCount(); s++) {

                        String lugarTabla = tblMesas.getValueAt(k, s).toString();
                        String mesa = "";

                        Object[] cadenas = lugarTabla.split(",");

                        for (int ser = 0; ser < cadenas.length; ser++) {
                            if (cadenas[ser].toString().contains("text=Mesa")) {
                                mesa = cadenas[ser].toString().replace("text=", "");
                            }
                        }

                        if (mesa.equals(lugar)) {
                            BigDecimal total = big.getBigDecimal(congeladas[i][2]);
                            tblMesas.setValueAt(new JLabel(icono), k - 1, s);
                            tblMesas.setValueAt(new JLabel("OCUPADO"), k, s);
                        }
                    }
                }
            }
        }
    }

    public void cargarRegistrosMesas() {
        Object[][] mesas = instancias.getSql().getPosicionesMesas();

        Icon icono = null;
        ImageIcon fot = new ImageIcon(getClass().getResource("/imagenes/MESA_VERDE.png"));
        icono = new ImageIcon(fot.getImage().getScaledInstance(125, 125, Image.SCALE_DEFAULT));

        for (int i = 0; i < mesas.length; i++) {
            int x = Integer.parseInt(mesas[i][0].toString().split(",")[0]);
            int y = Integer.parseInt(mesas[i][0].toString().split(",")[1]);

            tblMesas.setValueAt(new JLabel(icono), x - 1, y);
            tblMesas.setValueAt(new JLabel(mesas[i][1].toString()), x, y);
        }
    }

    public void cargarFila() {
        DefaultTableModel model = (DefaultTableModel) tblMesas.getModel();
        int filas = Integer.parseInt(datos[88].toString());
        while (tblMesas.getRowCount() > 0) {
            model.removeRow(0);
        }
        filas = filas * 2;
        for (int i = 1; i <= filas; i++) {
            model.addRow(new Object[]{"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""});
        }

        for (int i = 0; i < tblMesas.getRowCount(); i++) {
            if (i % 2 == 0) {
                tblMesas.setRowHeight(i, 110);
            } else {
                tblMesas.setRowHeight(i, 25);
            }
        }

    }

    public void cargarColumna() {
        DefaultTableModel model = (DefaultTableModel) tblMesas.getModel();

        int columnas = Integer.parseInt(datos[89].toString());

        tblMesas.setModel(new javax.swing.table.DefaultTableModel(new Object[][]{}, new String[]{
            "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
        }) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });

        tblMesas.getTableHeader().setResizingAllowed(false);
        tblMesas.getTableHeader().setReorderingAllowed(false);
        jScrollPane11.setViewportView(tblMesas);

        for (int i = columnas; i < 26; i++) {
            if (tblMesas.getColumnModel().getColumnCount() > 0) {
                tblMesas.getColumnModel().getColumn(i).setMinWidth(0);
                tblMesas.getColumnModel().getColumn(i).setPreferredWidth(0);
                tblMesas.getColumnModel().getColumn(i).setMaxWidth(0);
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JLabel lblMesa;
    private javax.swing.JTable tblMesas;
    // End of variables declaration//GEN-END:variables
}
